
hydrogarden 2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  080076f8  080076f8  000086f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b6c  08007b6c  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007b6c  08007b6c  00008b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b74  08007b74  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b74  08007b74  00008b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b78  08007b78  00008b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007b7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001d4  08007d50  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08007d50  00009564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e10c  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d58  00000000  00000000  00017309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00019068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdb  00000000  00000000  00019f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a38  00000000  00000000  0001ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d98  00000000  00000000  00033573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e601  00000000  00000000  0004430b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d290c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  000d2950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d8000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080076dc 	.word	0x080076dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080076dc 	.word	0x080076dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c6:	2afd      	cmp	r2, #253	@ 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	@ 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_frsub>:
 8000c68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	e002      	b.n	8000c74 <__addsf3>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_fsub>:
 8000c70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c74 <__addsf3>:
 8000c74:	0042      	lsls	r2, r0, #1
 8000c76:	bf1f      	itttt	ne
 8000c78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c7c:	ea92 0f03 	teqne	r2, r3
 8000c80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c88:	d06a      	beq.n	8000d60 <__addsf3+0xec>
 8000c8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c92:	bfc1      	itttt	gt
 8000c94:	18d2      	addgt	r2, r2, r3
 8000c96:	4041      	eorgt	r1, r0
 8000c98:	4048      	eorgt	r0, r1
 8000c9a:	4041      	eorgt	r1, r0
 8000c9c:	bfb8      	it	lt
 8000c9e:	425b      	neglt	r3, r3
 8000ca0:	2b19      	cmp	r3, #25
 8000ca2:	bf88      	it	hi
 8000ca4:	4770      	bxhi	lr
 8000ca6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4240      	negne	r0, r0
 8000cb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cc2:	bf18      	it	ne
 8000cc4:	4249      	negne	r1, r1
 8000cc6:	ea92 0f03 	teq	r2, r3
 8000cca:	d03f      	beq.n	8000d4c <__addsf3+0xd8>
 8000ccc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cd4:	eb10 000c 	adds.w	r0, r0, ip
 8000cd8:	f1c3 0320 	rsb	r3, r3, #32
 8000cdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ce0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce4:	d502      	bpl.n	8000cec <__addsf3+0x78>
 8000ce6:	4249      	negs	r1, r1
 8000ce8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cf0:	d313      	bcc.n	8000d1a <__addsf3+0xa6>
 8000cf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cf6:	d306      	bcc.n	8000d06 <__addsf3+0x92>
 8000cf8:	0840      	lsrs	r0, r0, #1
 8000cfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cfe:	f102 0201 	add.w	r2, r2, #1
 8000d02:	2afe      	cmp	r2, #254	@ 0xfe
 8000d04:	d251      	bcs.n	8000daa <__addsf3+0x136>
 8000d06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d0e:	bf08      	it	eq
 8000d10:	f020 0001 	biceq.w	r0, r0, #1
 8000d14:	ea40 0003 	orr.w	r0, r0, r3
 8000d18:	4770      	bx	lr
 8000d1a:	0049      	lsls	r1, r1, #1
 8000d1c:	eb40 0000 	adc.w	r0, r0, r0
 8000d20:	3a01      	subs	r2, #1
 8000d22:	bf28      	it	cs
 8000d24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d28:	d2ed      	bcs.n	8000d06 <__addsf3+0x92>
 8000d2a:	fab0 fc80 	clz	ip, r0
 8000d2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d32:	ebb2 020c 	subs.w	r2, r2, ip
 8000d36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d3a:	bfaa      	itet	ge
 8000d3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d40:	4252      	neglt	r2, r2
 8000d42:	4318      	orrge	r0, r3
 8000d44:	bfbc      	itt	lt
 8000d46:	40d0      	lsrlt	r0, r2
 8000d48:	4318      	orrlt	r0, r3
 8000d4a:	4770      	bx	lr
 8000d4c:	f092 0f00 	teq	r2, #0
 8000d50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d54:	bf06      	itte	eq
 8000d56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d5a:	3201      	addeq	r2, #1
 8000d5c:	3b01      	subne	r3, #1
 8000d5e:	e7b5      	b.n	8000ccc <__addsf3+0x58>
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d021      	beq.n	8000db4 <__addsf3+0x140>
 8000d70:	ea92 0f03 	teq	r2, r3
 8000d74:	d004      	beq.n	8000d80 <__addsf3+0x10c>
 8000d76:	f092 0f00 	teq	r2, #0
 8000d7a:	bf08      	it	eq
 8000d7c:	4608      	moveq	r0, r1
 8000d7e:	4770      	bx	lr
 8000d80:	ea90 0f01 	teq	r0, r1
 8000d84:	bf1c      	itt	ne
 8000d86:	2000      	movne	r0, #0
 8000d88:	4770      	bxne	lr
 8000d8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d8e:	d104      	bne.n	8000d9a <__addsf3+0x126>
 8000d90:	0040      	lsls	r0, r0, #1
 8000d92:	bf28      	it	cs
 8000d94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d98:	4770      	bx	lr
 8000d9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d9e:	bf3c      	itt	cc
 8000da0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000da4:	4770      	bxcc	lr
 8000da6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000daa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db2:	4770      	bx	lr
 8000db4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000db8:	bf16      	itet	ne
 8000dba:	4608      	movne	r0, r1
 8000dbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dc0:	4601      	movne	r1, r0
 8000dc2:	0242      	lsls	r2, r0, #9
 8000dc4:	bf06      	itte	eq
 8000dc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dca:	ea90 0f01 	teqeq	r0, r1
 8000dce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_ui2f>:
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	e004      	b.n	8000de4 <__aeabi_i2f+0x8>
 8000dda:	bf00      	nop

08000ddc <__aeabi_i2f>:
 8000ddc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000de0:	bf48      	it	mi
 8000de2:	4240      	negmi	r0, r0
 8000de4:	ea5f 0c00 	movs.w	ip, r0
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000df0:	4601      	mov	r1, r0
 8000df2:	f04f 0000 	mov.w	r0, #0
 8000df6:	e01c      	b.n	8000e32 <__aeabi_l2f+0x2a>

08000df8 <__aeabi_ul2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e00a      	b.n	8000e1c <__aeabi_l2f+0x14>
 8000e06:	bf00      	nop

08000e08 <__aeabi_l2f>:
 8000e08:	ea50 0201 	orrs.w	r2, r0, r1
 8000e0c:	bf08      	it	eq
 8000e0e:	4770      	bxeq	lr
 8000e10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e14:	d502      	bpl.n	8000e1c <__aeabi_l2f+0x14>
 8000e16:	4240      	negs	r0, r0
 8000e18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1c:	ea5f 0c01 	movs.w	ip, r1
 8000e20:	bf02      	ittt	eq
 8000e22:	4684      	moveq	ip, r0
 8000e24:	4601      	moveq	r1, r0
 8000e26:	2000      	moveq	r0, #0
 8000e28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e2c:	bf08      	it	eq
 8000e2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e36:	fabc f28c 	clz	r2, ip
 8000e3a:	3a08      	subs	r2, #8
 8000e3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e40:	db10      	blt.n	8000e64 <__aeabi_l2f+0x5c>
 8000e42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e46:	4463      	add	r3, ip
 8000e48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e54:	fa20 f202 	lsr.w	r2, r0, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	f020 0001 	biceq.w	r0, r0, #1
 8000e62:	4770      	bx	lr
 8000e64:	f102 0220 	add.w	r2, r2, #32
 8000e68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e74:	fa21 f202 	lsr.w	r2, r1, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_f2uiz>:
 8000e84:	0042      	lsls	r2, r0, #1
 8000e86:	d20e      	bcs.n	8000ea6 <__aeabi_f2uiz+0x22>
 8000e88:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e8c:	d30b      	bcc.n	8000ea6 <__aeabi_f2uiz+0x22>
 8000e8e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e96:	d409      	bmi.n	8000eac <__aeabi_f2uiz+0x28>
 8000e98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ea0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ea4:	4770      	bx	lr
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	4770      	bx	lr
 8000eac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000eb0:	d101      	bne.n	8000eb6 <__aeabi_f2uiz+0x32>
 8000eb2:	0242      	lsls	r2, r0, #9
 8000eb4:	d102      	bne.n	8000ebc <__aeabi_f2uiz+0x38>
 8000eb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eba:	4770      	bx	lr
 8000ebc:	f04f 0000 	mov.w	r0, #0
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_d2lz>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f7ff fe33 	bl	8000b38 <__aeabi_dcmplt>
 8000ed2:	b928      	cbnz	r0, 8000ee0 <__aeabi_d2lz+0x1c>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000edc:	f000 b80a 	b.w	8000ef4 <__aeabi_d2ulz>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ee6:	f000 f805 	bl	8000ef4 <__aeabi_d2ulz>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2ulz>:
 8000ef4:	b5d0      	push	{r4, r6, r7, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <__aeabi_d2ulz+0x34>)
 8000efa:	4606      	mov	r6, r0
 8000efc:	460f      	mov	r7, r1
 8000efe:	f7ff fba9 	bl	8000654 <__aeabi_dmul>
 8000f02:	f7ff fe41 	bl	8000b88 <__aeabi_d2uiz>
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff fb2a 	bl	8000560 <__aeabi_ui2d>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <__aeabi_d2ulz+0x38>)
 8000f10:	f7ff fba0 	bl	8000654 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f7ff f9e2 	bl	80002e4 <__aeabi_dsub>
 8000f20:	f7ff fe32 	bl	8000b88 <__aeabi_d2uiz>
 8000f24:	4621      	mov	r1, r4
 8000f26:	bdd0      	pop	{r4, r6, r7, pc}
 8000f28:	3df00000 	.word	0x3df00000
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0a0      	sub	sp, #128	@ 0x80
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f36:	f000 fe47 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3a:	f000 f923 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3e:	f000 fb3b 	bl	80015b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f42:	f000 f965 	bl	8001210 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f46:	f000 f991 	bl	800126c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f4a:	f000 fa2f 	bl	80013ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f4e:	f000 fa85 	bl	800145c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f52:	f000 fadd 	bl	8001510 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f56:	f000 fb05 	bl	8001564 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	487c      	ldr	r0, [pc, #496]	@ (8001150 <main+0x220>)
 8000f5e:	f001 feef 	bl	8002d40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000f62:	210c      	movs	r1, #12
 8000f64:	487b      	ldr	r0, [pc, #492]	@ (8001154 <main+0x224>)
 8000f66:	f001 feeb 	bl	8002d40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f6a:	210c      	movs	r1, #12
 8000f6c:	487a      	ldr	r0, [pc, #488]	@ (8001158 <main+0x228>)
 8000f6e:	f001 fee7 	bl	8002d40 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      int idx = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
      uint8_t ch;

      // Clear buffer
      memset(rxBuffer, 0, sizeof(rxBuffer));
 8000f76:	2264      	movs	r2, #100	@ 0x64
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4878      	ldr	r0, [pc, #480]	@ (800115c <main+0x22c>)
 8000f7c:	f003 fec8 	bl	8004d10 <memset>

      // Read one byte at a time until newline or buffer full
      while (HAL_UART_Receive(&huart1, &ch, 1, 1000) == HAL_OK) {
 8000f80:	e00d      	b.n	8000f9e <main+0x6e>
          rxBuffer[idx++] = ch;
 8000f82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f88:	f897 1063 	ldrb.w	r1, [r7, #99]	@ 0x63
 8000f8c:	4a73      	ldr	r2, [pc, #460]	@ (800115c <main+0x22c>)
 8000f8e:	54d1      	strb	r1, [r2, r3]
          if(ch == '\n' || idx >= sizeof(rxBuffer) - 1) {
 8000f90:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8000f94:	2b0a      	cmp	r3, #10
 8000f96:	d00d      	beq.n	8000fb4 <main+0x84>
 8000f98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f9a:	2b62      	cmp	r3, #98	@ 0x62
 8000f9c:	d80a      	bhi.n	8000fb4 <main+0x84>
      while (HAL_UART_Receive(&huart1, &ch, 1, 1000) == HAL_OK) {
 8000f9e:	f107 0163 	add.w	r1, r7, #99	@ 0x63
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	486d      	ldr	r0, [pc, #436]	@ (8001160 <main+0x230>)
 8000faa:	f002 fd2f 	bl	8003a0c <HAL_UART_Receive>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0e6      	beq.n	8000f82 <main+0x52>
              break;
          }
      }
      // Null-terminate the string
      rxBuffer[idx] = '\0';
 8000fb4:	4a69      	ldr	r2, [pc, #420]	@ (800115c <main+0x22c>)
 8000fb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fb8:	4413      	add	r3, r2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
      // Remove any trailing newline/carriage return
	  for (char *p = (char *)rxBuffer; *p != '\0'; p++) {
 8000fbe:	4b67      	ldr	r3, [pc, #412]	@ (800115c <main+0x22c>)
 8000fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000fc2:	e00e      	b.n	8000fe2 <main+0xb2>
		  if (*p == '\n' || *p == '\r') {
 8000fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d003      	beq.n	8000fd4 <main+0xa4>
 8000fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b0d      	cmp	r3, #13
 8000fd2:	d103      	bne.n	8000fdc <main+0xac>
			  *p = '\0';
 8000fd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			  break;
 8000fda:	e006      	b.n	8000fea <main+0xba>
	  for (char *p = (char *)rxBuffer; *p != '\0'; p++) {
 8000fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fde:	3301      	adds	r3, #1
 8000fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000fe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1ec      	bne.n	8000fc4 <main+0x94>
	  }

      // Parse the JSON command.
      char channel[20];
      char valueStr[10];
      int ret = sscanf((char *)rxBuffer,
 8000fea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fee:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000ff2:	495c      	ldr	r1, [pc, #368]	@ (8001164 <main+0x234>)
 8000ff4:	4859      	ldr	r0, [pc, #356]	@ (800115c <main+0x22c>)
 8000ff6:	f002 ff41 	bl	8003e7c <siscanf>
 8000ffa:	6778      	str	r0, [r7, #116]	@ 0x74
          "{\"channel\": \"%[^\"]\", \"value\": \"%[^\"]\"}",
          channel, valueStr);
      if (ret == 2) {
 8000ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d1b7      	bne.n	8000f72 <main+0x42>
    	  float value = atof(valueStr);
 8001002:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001006:	4618      	mov	r0, r3
 8001008:	f002 fee0 	bl	8003dcc <atof>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fdd8 	bl	8000bc8 <__aeabi_d2f>
 8001018:	4603      	mov	r3, r0
 800101a:	673b      	str	r3, [r7, #112]	@ 0x70
          if (strcmp(channel, "fan_in") == 0) {
 800101c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001020:	4951      	ldr	r1, [pc, #324]	@ (8001168 <main+0x238>)
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f89c 	bl	8000160 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d114      	bne.n	8001058 <main+0x128>
              uint32_t compare = (uint32_t)(htim1.Init.Period * value);
 800102e:	4b48      	ldr	r3, [pc, #288]	@ (8001150 <main+0x220>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fece 	bl	8000dd4 <__aeabi_ui2f>
 8001038:	4603      	mov	r3, r0
 800103a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f899 	bl	8000174 <__aeabi_fmul>
 8001042:	4603      	mov	r3, r0
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff1d 	bl	8000e84 <__aeabi_f2uiz>
 800104a:	4603      	mov	r3, r0
 800104c:	667b      	str	r3, [r7, #100]	@ 0x64
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, compare);
 800104e:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <main+0x220>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34
 8001056:	e06e      	b.n	8001136 <main+0x206>
          } else if (strcmp(channel, "fan_out") == 0) {
 8001058:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800105c:	4943      	ldr	r1, [pc, #268]	@ (800116c <main+0x23c>)
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f87e 	bl	8000160 <strcmp>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <main+0x164>
              uint32_t compare = (uint32_t)(htim2.Init.Period * value);
 800106a:	4b3a      	ldr	r3, [pc, #232]	@ (8001154 <main+0x224>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff feb0 	bl	8000dd4 <__aeabi_ui2f>
 8001074:	4603      	mov	r3, r0
 8001076:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f87b 	bl	8000174 <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff feff 	bl	8000e84 <__aeabi_f2uiz>
 8001086:	4603      	mov	r3, r0
 8001088:	66bb      	str	r3, [r7, #104]	@ 0x68
              __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, compare);
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <main+0x224>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001090:	641a      	str	r2, [r3, #64]	@ 0x40
 8001092:	e050      	b.n	8001136 <main+0x206>
          } else if (strcmp(channel, "aerator") == 0) {
 8001094:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001098:	4935      	ldr	r1, [pc, #212]	@ (8001170 <main+0x240>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f860 	bl	8000160 <strcmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d114      	bne.n	80010d0 <main+0x1a0>
              uint32_t compare = (uint32_t)(htim3.Init.Period * value);
 80010a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001158 <main+0x228>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe92 	bl	8000dd4 <__aeabi_ui2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f85d 	bl	8000174 <__aeabi_fmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fee1 	bl	8000e84 <__aeabi_f2uiz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
              __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, compare);
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <main+0x228>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ce:	e032      	b.n	8001136 <main+0x206>
          } else if (strcmp(channel, "light") == 0) {
 80010d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010d4:	4927      	ldr	r1, [pc, #156]	@ (8001174 <main+0x244>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f842 	bl	8000160 <strcmp>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <main+0x1e0>
        	  char buffer[11];
        	  sprintf(buffer, "%s\n", valueStr);
 80010e2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80010e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010ea:	4923      	ldr	r1, [pc, #140]	@ (8001178 <main+0x248>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fea5 	bl	8003e3c <siprintf>
        	  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 80010f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f82a 	bl	8000150 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	481c      	ldr	r0, [pc, #112]	@ (800117c <main+0x24c>)
 800110a:	f002 fbf4 	bl	80038f6 <HAL_UART_Transmit>
 800110e:	e012      	b.n	8001136 <main+0x206>
          } else {
              char errMsg[50];
              snprintf(errMsg, sizeof(errMsg), "Error: Unknown channel \"%s\"\n", channel);
 8001110:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001114:	4638      	mov	r0, r7
 8001116:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <main+0x250>)
 8001118:	2132      	movs	r1, #50	@ 0x32
 800111a:	f002 fe5b 	bl	8003dd4 <sniprintf>
              HAL_UART_Transmit(&huart1, (uint8_t *)errMsg, strlen(errMsg), 1000);
 800111e:	463b      	mov	r3, r7
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f815 	bl	8000150 <strlen>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	4639      	mov	r1, r7
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	480b      	ldr	r0, [pc, #44]	@ (8001160 <main+0x230>)
 8001132:	f002 fbe0 	bl	80038f6 <HAL_UART_Transmit>
          }
          // Optionally, echo the received command back:
          HAL_UART_Transmit(&huart1, rxBuffer, strlen((char *)rxBuffer), 1000);
 8001136:	4809      	ldr	r0, [pc, #36]	@ (800115c <main+0x22c>)
 8001138:	f7ff f80a 	bl	8000150 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001144:	4905      	ldr	r1, [pc, #20]	@ (800115c <main+0x22c>)
 8001146:	4806      	ldr	r0, [pc, #24]	@ (8001160 <main+0x230>)
 8001148:	f002 fbd5 	bl	80038f6 <HAL_UART_Transmit>
  {
 800114c:	e711      	b.n	8000f72 <main+0x42>
 800114e:	bf00      	nop
 8001150:	20000244 	.word	0x20000244
 8001154:	2000028c 	.word	0x2000028c
 8001158:	200002d4 	.word	0x200002d4
 800115c:	200003ac 	.word	0x200003ac
 8001160:	2000031c 	.word	0x2000031c
 8001164:	080076f8 	.word	0x080076f8
 8001168:	08007720 	.word	0x08007720
 800116c:	08007728 	.word	0x08007728
 8001170:	08007730 	.word	0x08007730
 8001174:	08007738 	.word	0x08007738
 8001178:	08007740 	.word	0x08007740
 800117c:	20000364 	.word	0x20000364
 8001180:	08007744 	.word	0x08007744

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	@ 0x40
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2228      	movs	r2, #40	@ 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fdbc 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f909 	bl	80023e4 <HAL_RCC_OscConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d8:	f000 fa1c 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	230f      	movs	r3, #15
 80011de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e0:	2302      	movs	r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fb76 	bl	80028e8 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001202:	f000 fa07 	bl	8001614 <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3740      	adds	r7, #64	@ 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f000 ff85 	bl	800215c <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f9dc 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200001f0 	.word	0x200001f0
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	@ 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fd33 	bl	8004d10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012ac:	4a3e      	ldr	r2, [pc, #248]	@ (80013a8 <MX_TIM1_Init+0x13c>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b0:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3b      	ldr	r3, [pc, #236]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012bc:	4b39      	ldr	r3, [pc, #228]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4833      	ldr	r0, [pc, #204]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012d8:	f001 fc94 	bl	8002c04 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f000 f997 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482c      	ldr	r0, [pc, #176]	@ (80013a4 <MX_TIM1_Init+0x138>)
 80012f4:	f001 fe88 	bl	8003008 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f000 f989 	bl	8001614 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4828      	ldr	r0, [pc, #160]	@ (80013a4 <MX_TIM1_Init+0x138>)
 8001304:	f001 fccd 	bl	8002ca2 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f000 f981 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	@ (80013a4 <MX_TIM1_Init+0x138>)
 8001322:	f002 f9e9 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f000 f972 	bl	8001614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	@ 0x60
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4813      	ldr	r0, [pc, #76]	@ (80013a4 <MX_TIM1_Init+0x138>)
 8001356:	f001 fd95 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001360:	f000 f958 	bl	8001614 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <MX_TIM1_Init+0x138>)
 8001388:	f002 fa14 	bl	80037b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001392:	f000 f93f 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001396:	4803      	ldr	r0, [pc, #12]	@ (80013a4 <MX_TIM1_Init+0x138>)
 8001398:	f000 fa00 	bl	800179c <HAL_TIM_MspPostInit>

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	@ 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000244 	.word	0x20000244
 80013a8:	40012c00 	.word	0x40012c00

080013ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013f6:	4818      	ldr	r0, [pc, #96]	@ (8001458 <MX_TIM2_Init+0xac>)
 80013f8:	f001 fc53 	bl	8002ca2 <HAL_TIM_PWM_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001402:	f000 f907 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	f107 0320 	add.w	r3, r7, #32
 8001412:	4619      	mov	r1, r3
 8001414:	4810      	ldr	r0, [pc, #64]	@ (8001458 <MX_TIM2_Init+0xac>)
 8001416:	f002 f96f 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001420:	f000 f8f8 	bl	8001614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001424:	2360      	movs	r3, #96	@ 0x60
 8001426:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	220c      	movs	r2, #12
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <MX_TIM2_Init+0xac>)
 800143c:	f001 fd22 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001446:	f000 f8e5 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800144a:	4803      	ldr	r0, [pc, #12]	@ (8001458 <MX_TIM2_Init+0xac>)
 800144c:	f000 f9a6 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	@ 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000028c 	.word	0x2000028c

0800145c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <MX_TIM3_Init+0xac>)
 8001480:	4a22      	ldr	r2, [pc, #136]	@ (800150c <MX_TIM3_Init+0xb0>)
 8001482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <MX_TIM3_Init+0xac>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_TIM3_Init+0xac>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_TIM3_Init+0xac>)
 8001492:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_TIM3_Init+0xac>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_TIM3_Init+0xac>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014a4:	4818      	ldr	r0, [pc, #96]	@ (8001508 <MX_TIM3_Init+0xac>)
 80014a6:	f001 fbfc 	bl	8002ca2 <HAL_TIM_PWM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014b0:	f000 f8b0 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4619      	mov	r1, r3
 80014c2:	4811      	ldr	r0, [pc, #68]	@ (8001508 <MX_TIM3_Init+0xac>)
 80014c4:	f002 f918 	bl	80036f8 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80014ce:	f000 f8a1 	bl	8001614 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	@ 0x60
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	220c      	movs	r2, #12
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM3_Init+0xac>)
 80014ea:	f001 fccb 	bl	8002e84 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80014f4:	f000 f88e 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM3_Init+0xac>)
 80014fa:	f000 f94f 	bl	800179c <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002d4 	.word	0x200002d4
 800150c:	40000400 	.word	0x40000400

08001510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_USART1_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_USART1_UART_Init+0x4c>)
 8001548:	f002 f985 	bl	8003856 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f85f 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000031c 	.word	0x2000031c
 8001560:	40013800 	.word	0x40013800

08001564 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 800156a:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <MX_USART3_UART_Init+0x50>)
 800156c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 8001570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001574:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 800158a:	220c      	movs	r2, #12
 800158c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_USART3_UART_Init+0x4c>)
 800159c:	f002 f95b 	bl	8003856 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015a6:	f000 f835 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000364 	.word	0x20000364
 80015b4:	40004800 	.word	0x40004800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0320 	and.w	r3, r3, #32
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6193      	str	r3, [r2, #24]
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <MX_GPIO_Init+0x58>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_MspInit+0x5c>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a14      	ldr	r2, [pc, #80]	@ (800167c <HAL_MspInit+0x5c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_MspInit+0x5c>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_MspInit+0x5c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a0e      	ldr	r2, [pc, #56]	@ (800167c <HAL_MspInit+0x5c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <HAL_MspInit+0x5c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <HAL_MspInit+0x60>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_MspInit+0x60>)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000

08001684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a15      	ldr	r2, [pc, #84]	@ (80016f4 <HAL_I2C_MspInit+0x70>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d123      	bne.n	80016ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016bc:	23c0      	movs	r3, #192	@ 0xc0
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	480b      	ldr	r0, [pc, #44]	@ (80016fc <HAL_I2C_MspInit+0x78>)
 80016d0:	f000 fbc0 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016de:	61d3      	str	r3, [r2, #28]
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_I2C_MspInit+0x74>)
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010c00 	.word	0x40010c00

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_TIM_Base_MspInit+0x34>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10b      	bne.n	800172a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_TIM_Base_MspInit+0x38>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_TIM_Base_MspInit+0x38>)
 8001718:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_TIM_Base_MspInit+0x38>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	40012c00 	.word	0x40012c00
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800174c:	d10c      	bne.n	8001768 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001766:	e010      	b.n	800178a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_TIM_PWM_MspInit+0x5c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_TIM_PWM_MspInit+0x58>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000
 8001798:	40000400 	.word	0x40000400

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0318 	add.w	r3, r7, #24
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001870 <HAL_TIM_MspPostInit+0xd4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d119      	bne.n	80017f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2302      	movs	r3, #2
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4619      	mov	r1, r3
 80017e8:	4823      	ldr	r0, [pc, #140]	@ (8001878 <HAL_TIM_MspPostInit+0xdc>)
 80017ea:	f000 fb33 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ee:	e03a      	b.n	8001866 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f8:	d118      	bne.n	800182c <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001812:	2308      	movs	r3, #8
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2302      	movs	r3, #2
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0318 	add.w	r3, r7, #24
 8001822:	4619      	mov	r1, r3
 8001824:	4814      	ldr	r0, [pc, #80]	@ (8001878 <HAL_TIM_MspPostInit+0xdc>)
 8001826:	f000 fb15 	bl	8001e54 <HAL_GPIO_Init>
}
 800182a:	e01c      	b.n	8001866 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a12      	ldr	r2, [pc, #72]	@ (800187c <HAL_TIM_MspPostInit+0xe0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d117      	bne.n	8001866 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 800183c:	f043 0308 	orr.w	r3, r3, #8
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_TIM_MspPostInit+0xd8>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2302      	movs	r3, #2
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0318 	add.w	r3, r7, #24
 800185e:	4619      	mov	r1, r3
 8001860:	4807      	ldr	r0, [pc, #28]	@ (8001880 <HAL_TIM_MspPostInit+0xe4>)
 8001862:	f000 faf7 	bl	8001e54 <HAL_GPIO_Init>
}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40012c00 	.word	0x40012c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40010800 	.word	0x40010800
 800187c:	40000400 	.word	0x40000400
 8001880:	40010c00 	.word	0x40010c00

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a38      	ldr	r2, [pc, #224]	@ (8001980 <HAL_UART_MspInit+0xfc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d132      	bne.n	800190a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a4:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a36      	ldr	r2, [pc, #216]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a30      	ldr	r2, [pc, #192]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <HAL_UART_MspInit+0x100>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 0318 	add.w	r3, r7, #24
 80018e6:	4619      	mov	r1, r3
 80018e8:	4827      	ldr	r0, [pc, #156]	@ (8001988 <HAL_UART_MspInit+0x104>)
 80018ea:	f000 fab3 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4619      	mov	r1, r3
 8001902:	4821      	ldr	r0, [pc, #132]	@ (8001988 <HAL_UART_MspInit+0x104>)
 8001904:	f000 faa6 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001908:	e036      	b.n	8001978 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <HAL_UART_MspInit+0x108>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d131      	bne.n	8001978 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_UART_MspInit+0x100>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a1a      	ldr	r2, [pc, #104]	@ (8001984 <HAL_UART_MspInit+0x100>)
 800191a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_UART_MspInit+0x100>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_UART_MspInit+0x100>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <HAL_UART_MspInit+0x100>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_UART_MspInit+0x100>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	4619      	mov	r1, r3
 8001958:	480d      	ldr	r0, [pc, #52]	@ (8001990 <HAL_UART_MspInit+0x10c>)
 800195a:	f000 fa7b 	bl	8001e54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800195e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <HAL_UART_MspInit+0x10c>)
 8001974:	f000 fa6e 	bl	8001e54 <HAL_GPIO_Init>
}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	@ 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40013800 	.word	0x40013800
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800
 800198c:	40004800 	.word	0x40004800
 8001990:	40010c00 	.word	0x40010c00

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f000 f936 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return 1;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_kill>:

int _kill(int pid, int sig)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a04:	f003 f9d2 	bl	8004dac <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2216      	movs	r2, #22
 8001a0c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_exit>:

void _exit (int status)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffe7 	bl	80019fa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <_exit+0x12>

08001a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e00a      	b.n	8001a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a42:	f3af 8000 	nop.w
 8001a46:	4601      	mov	r1, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	b2ca      	uxtb	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf0      	blt.n	8001a42 <_read+0x12>
  }

  return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e009      	b.n	8001a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf1      	blt.n	8001a7c <_write+0x12>
  }
  return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_close>:

int _close(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f003 f93a 	bl	8004dac <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20005000 	.word	0x20005000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000410 	.word	0x20000410
 8001b6c:	20000568 	.word	0x20000568

08001b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7c:	f7ff fff8 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b82:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b98:	4c09      	ldr	r4, [pc, #36]	@ (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f003 f907 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff f9c1 	bl	8000f30 <main>
  bx lr
 8001bae:	4770      	bx	lr
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bb8:	08007b7c 	.word	0x08007b7c
  ldr r2, =_sbss
 8001bbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001bc0:	20000564 	.word	0x20000564

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x28>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x28>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f907 	bl	8001dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fd1c 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f911 	bl	8001e3a <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c30:	f000 f8e7 	bl	8001e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000414 	.word	0x20000414

08001c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	20000414 	.word	0x20000414

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001db8:	d301      	bcc.n	8001dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00f      	b.n	8001dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <SysTick_Config+0x40>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc6:	210f      	movs	r1, #15
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dcc:	f7ff ff90 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <SysTick_Config+0x40>)
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000e010 	.word	0xe000e010

08001dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff49 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e14:	f7ff ff5e 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6978      	ldr	r0, [r7, #20]
 8001e20:	f7ff ff90 	bl	8001d44 <NVIC_EncodePriority>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff5f 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb0 	bl	8001da8 <SysTick_Config>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b08b      	sub	sp, #44	@ 0x2c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	e169      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8158 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a9a      	ldr	r2, [pc, #616]	@ (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d05e      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e90:	4a98      	ldr	r2, [pc, #608]	@ (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d875      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001e96:	4a98      	ldr	r2, [pc, #608]	@ (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d058      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e9c:	4a96      	ldr	r2, [pc, #600]	@ (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d86f      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a96      	ldr	r2, [pc, #600]	@ (80020fc <HAL_GPIO_Init+0x2a8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d052      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ea8:	4a94      	ldr	r2, [pc, #592]	@ (80020fc <HAL_GPIO_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d869      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eae:	4a94      	ldr	r2, [pc, #592]	@ (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04c      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001eb4:	4a92      	ldr	r2, [pc, #584]	@ (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d863      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eba:	4a92      	ldr	r2, [pc, #584]	@ (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d046      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a90      	ldr	r2, [pc, #576]	@ (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d85d      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d82a      	bhi.n	8001f20 <HAL_GPIO_Init+0xcc>
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d859      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ece:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed4 <HAL_GPIO_Init+0x80>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	08001f3b 	.word	0x08001f3b
 8001ee0:	08001f7d 	.word	0x08001f7d
 8001ee4:	08001f83 	.word	0x08001f83
 8001ee8:	08001f83 	.word	0x08001f83
 8001eec:	08001f83 	.word	0x08001f83
 8001ef0:	08001f83 	.word	0x08001f83
 8001ef4:	08001f83 	.word	0x08001f83
 8001ef8:	08001f83 	.word	0x08001f83
 8001efc:	08001f83 	.word	0x08001f83
 8001f00:	08001f83 	.word	0x08001f83
 8001f04:	08001f83 	.word	0x08001f83
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f83 	.word	0x08001f83
 8001f10:	08001f83 	.word	0x08001f83
 8001f14:	08001f83 	.word	0x08001f83
 8001f18:	08001f31 	.word	0x08001f31
 8001f1c:	08001f45 	.word	0x08001f45
 8001f20:	4a79      	ldr	r2, [pc, #484]	@ (8002108 <HAL_GPIO_Init+0x2b4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f26:	e02c      	b.n	8001f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e029      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	3304      	adds	r3, #4
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e024      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e01f      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e01a      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f56:	2304      	movs	r3, #4
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e013      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	611a      	str	r2, [r3, #16]
          break;
 8001f6e:	e009      	b.n	8001f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	615a      	str	r2, [r3, #20]
          break;
 8001f7a:	e003      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          break;
 8001f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2bff      	cmp	r3, #255	@ 0xff
 8001f88:	d801      	bhi.n	8001f8e <HAL_GPIO_Init+0x13a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	e001      	b.n	8001f92 <HAL_GPIO_Init+0x13e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	@ 0xff
 8001f98:	d802      	bhi.n	8001fa0 <HAL_GPIO_Init+0x14c>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x152>
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	3b08      	subs	r3, #8
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	210f      	movs	r1, #15
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	6a39      	ldr	r1, [r7, #32]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80b1 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800210c <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800210c <HAL_GPIO_Init+0x2b8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800210c <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fec:	4a48      	ldr	r2, [pc, #288]	@ (8002110 <HAL_GPIO_Init+0x2bc>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	@ (8002114 <HAL_GPIO_Init+0x2c0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_GPIO_Init+0x1ec>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3f      	ldr	r2, [pc, #252]	@ (8002118 <HAL_GPIO_Init+0x2c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00d      	beq.n	800203c <HAL_GPIO_Init+0x1e8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3e      	ldr	r2, [pc, #248]	@ (800211c <HAL_GPIO_Init+0x2c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3d      	ldr	r2, [pc, #244]	@ (8002120 <HAL_GPIO_Init+0x2cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_GPIO_Init+0x1e0>
 8002030:	2303      	movs	r3, #3
 8002032:	e006      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002034:	2304      	movs	r3, #4
 8002036:	e004      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002038:	2302      	movs	r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002040:	2300      	movs	r3, #0
 8002042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002044:	f002 0203 	and.w	r2, r2, #3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4093      	lsls	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002052:	492f      	ldr	r1, [pc, #188]	@ (8002110 <HAL_GPIO_Init+0x2bc>)
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800206c:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	492c      	ldr	r1, [pc, #176]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4928      	ldr	r1, [pc, #160]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	4922      	ldr	r1, [pc, #136]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	491e      	ldr	r1, [pc, #120]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020bc:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4918      	ldr	r1, [pc, #96]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ca:	4b16      	ldr	r3, [pc, #88]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4914      	ldr	r1, [pc, #80]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	490e      	ldr	r1, [pc, #56]	@ (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	600b      	str	r3, [r1, #0]
 80020f0:	e021      	b.n	8002136 <HAL_GPIO_Init+0x2e2>
 80020f2:	bf00      	nop
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10310000 	.word	0x10310000
 80020fc:	10220000 	.word	0x10220000
 8002100:	10210000 	.word	0x10210000
 8002104:	10120000 	.word	0x10120000
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40011000 	.word	0x40011000
 8002120:	40011400 	.word	0x40011400
 8002124:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_GPIO_Init+0x304>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	43db      	mvns	r3, r3
 8002130:	4909      	ldr	r1, [pc, #36]	@ (8002158 <HAL_GPIO_Init+0x304>)
 8002132:	4013      	ands	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f47f ae8e 	bne.w	8001e68 <HAL_GPIO_Init+0x14>
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	372c      	adds	r7, #44	@ 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e12b      	b.n	80023c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fa7e 	bl	8001684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	@ 0x24
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c0:	f000 fcda 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80021c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a81      	ldr	r2, [pc, #516]	@ (80023d0 <HAL_I2C_Init+0x274>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d807      	bhi.n	80021e0 <HAL_I2C_Init+0x84>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a80      	ldr	r2, [pc, #512]	@ (80023d4 <HAL_I2C_Init+0x278>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e006      	b.n	80021ee <HAL_I2C_Init+0x92>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a7d      	ldr	r2, [pc, #500]	@ (80023d8 <HAL_I2C_Init+0x27c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0e7      	b.n	80023c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a78      	ldr	r2, [pc, #480]	@ (80023dc <HAL_I2C_Init+0x280>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a6a      	ldr	r2, [pc, #424]	@ (80023d0 <HAL_I2C_Init+0x274>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d802      	bhi.n	8002230 <HAL_I2C_Init+0xd4>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3301      	adds	r3, #1
 800222e:	e009      	b.n	8002244 <HAL_I2C_Init+0xe8>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	4a69      	ldr	r2, [pc, #420]	@ (80023e0 <HAL_I2C_Init+0x284>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	3301      	adds	r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002256:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	495c      	ldr	r1, [pc, #368]	@ (80023d0 <HAL_I2C_Init+0x274>)
 8002260:	428b      	cmp	r3, r1
 8002262:	d819      	bhi.n	8002298 <HAL_I2C_Init+0x13c>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e59      	subs	r1, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002278:	400b      	ands	r3, r1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_I2C_Init+0x138>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e59      	subs	r1, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fbb1 f3f3 	udiv	r3, r1, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002292:	e051      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002294:	2304      	movs	r3, #4
 8002296:	e04f      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d111      	bne.n	80022c4 <HAL_I2C_Init+0x168>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e58      	subs	r0, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e012      	b.n	80022ea <HAL_I2C_Init+0x18e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	0099      	lsls	r1, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Init+0x196>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e022      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10e      	bne.n	8002318 <HAL_I2C_Init+0x1bc>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e58      	subs	r0, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6859      	ldr	r1, [r3, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	440b      	add	r3, r1
 8002308:	fbb0 f3f3 	udiv	r3, r0, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002316:	e00f      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	6809      	ldr	r1, [r1, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002366:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6911      	ldr	r1, [r2, #16]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	000186a0 	.word	0x000186a0
 80023d4:	001e847f 	.word	0x001e847f
 80023d8:	003d08ff 	.word	0x003d08ff
 80023dc:	431bde83 	.word	0x431bde83
 80023e0:	10624dd3 	.word	0x10624dd3

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e272      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002410:	4b8f      	ldr	r3, [pc, #572]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
 800241c:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x12c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e24c      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x76>
 800244c:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7f      	ldr	r2, [pc, #508]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b7b      	ldr	r3, [pc, #492]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xbc>
 8002486:	4b72      	ldr	r3, [pc, #456]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 80024a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b68      	ldr	r3, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fbda 	bl	8001c78 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff fbd6 	bl	8001c78 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e200      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe4>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fbc6 	bl	8001c78 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fbc2 	bl	8001c78 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1ec      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x10c>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b4c      	ldr	r3, [pc, #304]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252a:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
 8002536:	4b46      	ldr	r3, [pc, #280]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c0      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4939      	ldr	r1, [pc, #228]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fb7b 	bl	8001c78 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff fb77 	bl	8001c78 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1a1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4927      	ldr	r1, [pc, #156]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb5a 	bl	8001c78 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fb56 	bl	8001c78 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e180      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03a      	beq.n	8002668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7ff fb3a 	bl	8001c78 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7ff fb36 	bl	8001c78 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e160      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 face 	bl	8002bc8 <RCC_Delay>
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7ff fb20 	bl	8001c78 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7ff fb1c 	bl	8001c78 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d908      	bls.n	800265c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e146      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	42420000 	.word	0x42420000
 8002658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e9      	bne.n	800263c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a6 	beq.w	80027c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a87      	ldr	r2, [pc, #540]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7e      	ldr	r2, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fadd 	bl	8001c78 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7ff fad9 	bl	8001c78 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e103      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b6f      	ldr	r3, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x334>
 80026fe:	4b6a      	ldr	r3, [pc, #424]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a69      	ldr	r2, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a66      	ldr	r2, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	e01c      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x356>
 8002720:	4b61      	ldr	r3, [pc, #388]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a60      	ldr	r2, [pc, #384]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a5d      	ldr	r2, [pc, #372]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a57      	ldr	r2, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7ff fa8d 	bl	8001c78 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7ff fa89 	bl	8001c78 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0b1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b4b      	ldr	r3, [pc, #300]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x37e>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fa77 	bl	8001c78 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fa73 	bl	8001c78 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e09b      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a3b      	ldr	r2, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d061      	beq.n	800289c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d146      	bne.n	800286e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fa47 	bl	8001c78 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7ff fa43 	bl	8001c78 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e06d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	4b29      	ldr	r3, [pc, #164]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4921      	ldr	r1, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	430b      	orrs	r3, r1
 800283a:	491b      	ldr	r1, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7ff fa17 	bl	8001c78 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7ff fa13 	bl	8001c78 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
 800286c:	e035      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff fa00 	bl	8001c78 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff f9fc 	bl	8001c78 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e026      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x498>
 800289a:	e01e      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e019      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x500>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d0      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4965      	ldr	r1, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800294e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d040      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d115      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e073      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4936      	ldr	r1, [pc, #216]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f94e 	bl	8001c78 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f94a 	bl	8001c78 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e053      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d210      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4922      	ldr	r1, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f8ac 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08007770 	.word	0x08007770
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e027      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	e027      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0c5b      	lsrs	r3, r3, #17
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e004      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	613b      	str	r3, [r7, #16]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3e:	613b      	str	r3, [r7, #16]
      break;
 8002b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b42:	693b      	ldr	r3, [r7, #16]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	08007788 	.word	0x08007788
 8002b5c:	08007798 	.word	0x08007798
 8002b60:	003d0900 	.word	0x003d0900

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08007780 	.word	0x08007780

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffde 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08007780 	.word	0x08007780

08002bc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <RCC_Delay+0x34>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c00 <RCC_Delay+0x38>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0a5b      	lsrs	r3, r3, #9
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002be4:	bf00      	nop
  }
  while (Delay --);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	60fa      	str	r2, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f9      	bne.n	8002be4 <RCC_Delay+0x1c>
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e041      	b.n	8002c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe fd68 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 faa8 	bl	8003198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e041      	b.n	8002d38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d106      	bne.n	8002cce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7fe fd37 	bl	800173c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	f000 fa59 	bl	8003198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_TIM_PWM_Start+0x24>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	e022      	b.n	8002daa <HAL_TIM_PWM_Start+0x6a>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d109      	bne.n	8002d7e <HAL_TIM_PWM_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	bf14      	ite	ne
 8002d76:	2301      	movne	r3, #1
 8002d78:	2300      	moveq	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	e015      	b.n	8002daa <HAL_TIM_PWM_Start+0x6a>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d109      	bne.n	8002d98 <HAL_TIM_PWM_Start+0x58>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e008      	b.n	8002daa <HAL_TIM_PWM_Start+0x6a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e05e      	b.n	8002e70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0x82>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc0:	e013      	b.n	8002dea <HAL_TIM_PWM_Start+0xaa>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0x92>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd0:	e00b      	b.n	8002dea <HAL_TIM_PWM_Start+0xaa>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Start+0xa2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de0:	e003      	b.n	8002dea <HAL_TIM_PWM_Start+0xaa>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc5c 	bl	80036b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_TIM_PWM_Start+0x138>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d107      	bne.n	8002e12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a18      	ldr	r2, [pc, #96]	@ (8002e78 <HAL_TIM_PWM_Start+0x138>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00e      	beq.n	8002e3a <HAL_TIM_PWM_Start+0xfa>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e24:	d009      	beq.n	8002e3a <HAL_TIM_PWM_Start+0xfa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_TIM_PWM_Start+0x13c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d004      	beq.n	8002e3a <HAL_TIM_PWM_Start+0xfa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_TIM_PWM_Start+0x140>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d111      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d010      	beq.n	8002e6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	e007      	b.n	8002e6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800

08002e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e0ae      	b.n	8003000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	f200 809f 	bhi.w	8002ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002ff1 	.word	0x08002ff1
 8002ec0:	08002ff1 	.word	0x08002ff1
 8002ec4:	08002ff1 	.word	0x08002ff1
 8002ec8:	08002f2d 	.word	0x08002f2d
 8002ecc:	08002ff1 	.word	0x08002ff1
 8002ed0:	08002ff1 	.word	0x08002ff1
 8002ed4:	08002ff1 	.word	0x08002ff1
 8002ed8:	08002f6f 	.word	0x08002f6f
 8002edc:	08002ff1 	.word	0x08002ff1
 8002ee0:	08002ff1 	.word	0x08002ff1
 8002ee4:	08002ff1 	.word	0x08002ff1
 8002ee8:	08002faf 	.word	0x08002faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f9be 	bl	8003274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0208 	orr.w	r2, r2, #8
 8002f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6999      	ldr	r1, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	619a      	str	r2, [r3, #24]
      break;
 8002f2a:	e064      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fa04 	bl	8003340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	021a      	lsls	r2, r3, #8
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	619a      	str	r2, [r3, #24]
      break;
 8002f6c:	e043      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fa4d 	bl	8003414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0208 	orr.w	r2, r2, #8
 8002f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69da      	ldr	r2, [r3, #28]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69d9      	ldr	r1, [r3, #28]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	61da      	str	r2, [r3, #28]
      break;
 8002fac:	e023      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa97 	bl	80034e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69d9      	ldr	r1, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	61da      	str	r2, [r3, #28]
      break;
 8002fee:	e002      	b.n	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIM_ConfigClockSource+0x1c>
 8003020:	2302      	movs	r3, #2
 8003022:	e0b4      	b.n	800318e <HAL_TIM_ConfigClockSource+0x186>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800304a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305c:	d03e      	beq.n	80030dc <HAL_TIM_ConfigClockSource+0xd4>
 800305e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003062:	f200 8087 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	f000 8086 	beq.w	800317a <HAL_TIM_ConfigClockSource+0x172>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	d87f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b70      	cmp	r3, #112	@ 0x70
 8003076:	d01a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0xa6>
 8003078:	2b70      	cmp	r3, #112	@ 0x70
 800307a:	d87b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b60      	cmp	r3, #96	@ 0x60
 800307e:	d050      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x11a>
 8003080:	2b60      	cmp	r3, #96	@ 0x60
 8003082:	d877      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b50      	cmp	r3, #80	@ 0x50
 8003086:	d03c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0xfa>
 8003088:	2b50      	cmp	r3, #80	@ 0x50
 800308a:	d873      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d058      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x13a>
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d86f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d064      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 8003098:	2b30      	cmp	r3, #48	@ 0x30
 800309a:	d86b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d060      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d867      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05c      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d05a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x15a>
 80030ac:	e062      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030be:	f000 fad8 	bl	8003672 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	609a      	str	r2, [r3, #8]
      break;
 80030da:	e04f      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ec:	f000 fac1 	bl	8003672 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030fe:	609a      	str	r2, [r3, #8]
      break;
 8003100:	e03c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	f000 fa38 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2150      	movs	r1, #80	@ 0x50
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa8f 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003120:	e02c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	f000 fa56 	bl	80035e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2160      	movs	r1, #96	@ 0x60
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa7f 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003140:	e01c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	461a      	mov	r2, r3
 8003150:	f000 fa18 	bl	8003584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2140      	movs	r1, #64	@ 0x40
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fa6f 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003160:	e00c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 fa66 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 8003172:	e003      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e000      	b.n	800317c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800317a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003268 <TIM_Base_SetConfig+0xd0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b6:	d007      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	@ (800326c <TIM_Base_SetConfig+0xd4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0x30>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <TIM_Base_SetConfig+0xd8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <TIM_Base_SetConfig+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1f      	ldr	r2, [pc, #124]	@ (800326c <TIM_Base_SetConfig+0xd4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0x62>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003270 <TIM_Base_SetConfig+0xd8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0d      	ldr	r2, [pc, #52]	@ (8003268 <TIM_Base_SetConfig+0xd0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f023 0201 	bic.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]
  }
}
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40012c00 	.word	0x40012c00
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800

08003274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f023 0201 	bic.w	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0302 	bic.w	r3, r3, #2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <TIM_OC1_SetConfig+0xc8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10c      	bne.n	80032ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0308 	bic.w	r3, r3, #8
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a13      	ldr	r2, [pc, #76]	@ (800333c <TIM_OC1_SetConfig+0xc8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d111      	bne.n	8003316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40012c00 	.word	0x40012c00

08003340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 0210 	bic.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0320 	bic.w	r3, r3, #32
 800338a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1d      	ldr	r2, [pc, #116]	@ (8003410 <TIM_OC2_SetConfig+0xd0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10d      	bne.n	80033bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a14      	ldr	r2, [pc, #80]	@ (8003410 <TIM_OC2_SetConfig+0xd0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d113      	bne.n	80033ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	621a      	str	r2, [r3, #32]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00

08003414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800345c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <TIM_OC3_SetConfig+0xd0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10d      	bne.n	800348e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <TIM_OC3_SetConfig+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d113      	bne.n	80034be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	621a      	str	r2, [r3, #32]
}
 80034d8:	bf00      	nop
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0f      	ldr	r2, [pc, #60]	@ (8003580 <TIM_OC4_SetConfig+0x98>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d109      	bne.n	800355c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800354e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	019b      	lsls	r3, r3, #6
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00

08003584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 030a 	bic.w	r3, r3, #10
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f023 0210 	bic.w	r2, r3, #16
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800360a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	031b      	lsls	r3, r3, #12
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800361c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	621a      	str	r2, [r3, #32]
}
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	f043 0307 	orr.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003672:	b480      	push	{r7}
 8003674:	b087      	sub	sp, #28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800368c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	431a      	orrs	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	401a      	ands	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1a      	ldr	r2, [r3, #32]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e046      	b.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a16      	ldr	r2, [pc, #88]	@ (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d009      	beq.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a10      	ldr	r2, [pc, #64]	@ (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10c      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	4313      	orrs	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800

080037b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e03d      	b.n	800384c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e042      	b.n	80038ee <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fe f801 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2224      	movs	r2, #36	@ 0x24
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003898:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fa08 	bl	8003cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	@ 0x28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d175      	bne.n	8003a02 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x2c>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e06e      	b.n	8003a04 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2221      	movs	r2, #33	@ 0x21
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003934:	f7fe f9a0 	bl	8001c78 <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394e:	d108      	bne.n	8003962 <HAL_UART_Transmit+0x6c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	e003      	b.n	800396a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800396a:	e02e      	b.n	80039ca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	2180      	movs	r1, #128	@ 0x80
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8df 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e03a      	b.n	8003a04 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	3302      	adds	r3, #2
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	e007      	b.n	80039bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1cb      	bne.n	800396c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2140      	movs	r1, #64	@ 0x40
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f8ab 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e006      	b.n	8003a04 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	@ 0x28
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f040 8081 	bne.w	8003b30 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Receive+0x2e>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e079      	b.n	8003b32 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2222      	movs	r2, #34	@ 0x22
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a52:	f7fe f911 	bl	8001c78 <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6c:	d108      	bne.n	8003a80 <HAL_UART_Receive+0x74>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d104      	bne.n	8003a80 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e003      	b.n	8003a88 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a88:	e047      	b.n	8003b1a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2120      	movs	r1, #32
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f850 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e042      	b.n	8003b32 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10c      	bne.n	8003acc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e01f      	b.n	8003b0c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	d007      	beq.n	8003ae6 <HAL_UART_Receive+0xda>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_UART_Receive+0xe8>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e008      	b.n	8003b06 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1b2      	bne.n	8003a8a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	e03b      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b52:	d037      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b54:	f7fe f890 	bl	8001c78 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d302      	bcc.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03a      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b80      	cmp	r3, #128	@ 0x80
 8003b80:	d020      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d01d      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d116      	bne.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f81d 	bl	8003bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e00f      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d0b4      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b095      	sub	sp, #84	@ 0x54
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c14:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d119      	bne.n	8003c98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c84:	61ba      	str	r2, [r7, #24]
 8003c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6979      	ldr	r1, [r7, #20]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ca6:	bf00      	nop
 8003ca8:	3754      	adds	r7, #84	@ 0x54
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003cea:	f023 030c 	bic.w	r3, r3, #12
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc4 <UART_SetConfig+0x114>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe ff42 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	e002      	b.n	8003d26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7fe ff2a 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003d24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009a      	lsls	r2, r3, #2
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <UART_SetConfig+0x118>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	0119      	lsls	r1, r3, #4
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <UART_SetConfig+0x118>)
 8003d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2064      	movs	r0, #100	@ 0x64
 8003d66:	fb00 f303 	mul.w	r3, r0, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	@ 0x32
 8003d70:	4a15      	ldr	r2, [pc, #84]	@ (8003dc8 <UART_SetConfig+0x118>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	4419      	add	r1, r3
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <UART_SetConfig+0x118>)
 8003d96:	fba3 0302 	umull	r0, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2064      	movs	r0, #100	@ 0x64
 8003d9e:	fb00 f303 	mul.w	r3, r0, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	@ 0x32
 8003da8:	4a07      	ldr	r2, [pc, #28]	@ (8003dc8 <UART_SetConfig+0x118>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 020f 	and.w	r2, r3, #15
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	440a      	add	r2, r1
 8003dba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	51eb851f 	.word	0x51eb851f

08003dcc <atof>:
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f000 bf63 	b.w	8004c98 <strtod>
	...

08003dd4 <sniprintf>:
 8003dd4:	b40c      	push	{r2, r3}
 8003dd6:	b530      	push	{r4, r5, lr}
 8003dd8:	4b17      	ldr	r3, [pc, #92]	@ (8003e38 <sniprintf+0x64>)
 8003dda:	1e0c      	subs	r4, r1, #0
 8003ddc:	681d      	ldr	r5, [r3, #0]
 8003dde:	b09d      	sub	sp, #116	@ 0x74
 8003de0:	da08      	bge.n	8003df4 <sniprintf+0x20>
 8003de2:	238b      	movs	r3, #139	@ 0x8b
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	b01d      	add	sp, #116	@ 0x74
 8003dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003df0:	b002      	add	sp, #8
 8003df2:	4770      	bx	lr
 8003df4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003df8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dfc:	bf0c      	ite	eq
 8003dfe:	4623      	moveq	r3, r4
 8003e00:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003e04:	9304      	str	r3, [sp, #16]
 8003e06:	9307      	str	r3, [sp, #28]
 8003e08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e0c:	9002      	str	r0, [sp, #8]
 8003e0e:	9006      	str	r0, [sp, #24]
 8003e10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e14:	4628      	mov	r0, r5
 8003e16:	ab21      	add	r3, sp, #132	@ 0x84
 8003e18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e1a:	a902      	add	r1, sp, #8
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	f001 fbe3 	bl	80055e8 <_svfiprintf_r>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	bfbc      	itt	lt
 8003e26:	238b      	movlt	r3, #139	@ 0x8b
 8003e28:	602b      	strlt	r3, [r5, #0]
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	d0dd      	beq.n	8003dea <sniprintf+0x16>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	9b02      	ldr	r3, [sp, #8]
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e7d9      	b.n	8003dea <sniprintf+0x16>
 8003e36:	bf00      	nop
 8003e38:	20000184 	.word	0x20000184

08003e3c <siprintf>:
 8003e3c:	b40e      	push	{r1, r2, r3}
 8003e3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e42:	b500      	push	{lr}
 8003e44:	b09c      	sub	sp, #112	@ 0x70
 8003e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e48:	9002      	str	r0, [sp, #8]
 8003e4a:	9006      	str	r0, [sp, #24]
 8003e4c:	9107      	str	r1, [sp, #28]
 8003e4e:	9104      	str	r1, [sp, #16]
 8003e50:	4808      	ldr	r0, [pc, #32]	@ (8003e74 <siprintf+0x38>)
 8003e52:	4909      	ldr	r1, [pc, #36]	@ (8003e78 <siprintf+0x3c>)
 8003e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e58:	9105      	str	r1, [sp, #20]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	a902      	add	r1, sp, #8
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	f001 fbc2 	bl	80055e8 <_svfiprintf_r>
 8003e64:	2200      	movs	r2, #0
 8003e66:	9b02      	ldr	r3, [sp, #8]
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	b01c      	add	sp, #112	@ 0x70
 8003e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e70:	b003      	add	sp, #12
 8003e72:	4770      	bx	lr
 8003e74:	20000184 	.word	0x20000184
 8003e78:	ffff0208 	.word	0xffff0208

08003e7c <siscanf>:
 8003e7c:	b40e      	push	{r1, r2, r3}
 8003e7e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003e82:	b530      	push	{r4, r5, lr}
 8003e84:	b09c      	sub	sp, #112	@ 0x70
 8003e86:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003e88:	f854 5b04 	ldr.w	r5, [r4], #4
 8003e8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003e90:	9002      	str	r0, [sp, #8]
 8003e92:	9006      	str	r0, [sp, #24]
 8003e94:	f7fc f95c 	bl	8000150 <strlen>
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <siscanf+0x4c>)
 8003e9a:	9003      	str	r0, [sp, #12]
 8003e9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ea2:	9314      	str	r3, [sp, #80]	@ 0x50
 8003ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ea8:	9007      	str	r0, [sp, #28]
 8003eaa:	4808      	ldr	r0, [pc, #32]	@ (8003ecc <siscanf+0x50>)
 8003eac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	a902      	add	r1, sp, #8
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	9401      	str	r4, [sp, #4]
 8003eba:	f001 fce9 	bl	8005890 <__ssvfiscanf_r>
 8003ebe:	b01c      	add	sp, #112	@ 0x70
 8003ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ec4:	b003      	add	sp, #12
 8003ec6:	4770      	bx	lr
 8003ec8:	08003ef3 	.word	0x08003ef3
 8003ecc:	20000184 	.word	0x20000184

08003ed0 <__sread>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed8:	f000 ff44 	bl	8004d64 <_read_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	bfab      	itete	ge
 8003ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ee4:	181b      	addge	r3, r3, r0
 8003ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003eea:	bfac      	ite	ge
 8003eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003eee:	81a3      	strhlt	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__seofread>:
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	4770      	bx	lr

08003ef6 <__swrite>:
 8003ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efa:	461f      	mov	r7, r3
 8003efc:	898b      	ldrh	r3, [r1, #12]
 8003efe:	4605      	mov	r5, r0
 8003f00:	05db      	lsls	r3, r3, #23
 8003f02:	460c      	mov	r4, r1
 8003f04:	4616      	mov	r6, r2
 8003f06:	d505      	bpl.n	8003f14 <__swrite+0x1e>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f10:	f000 ff16 	bl	8004d40 <_lseek_r>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	4632      	mov	r2, r6
 8003f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	4628      	mov	r0, r5
 8003f20:	463b      	mov	r3, r7
 8003f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2a:	f000 bf2d 	b.w	8004d88 <_write_r>

08003f2e <__sseek>:
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f36:	f000 ff03 	bl	8004d40 <_lseek_r>
 8003f3a:	1c43      	adds	r3, r0, #1
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	bf15      	itete	ne
 8003f40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f4a:	81a3      	strheq	r3, [r4, #12]
 8003f4c:	bf18      	it	ne
 8003f4e:	81a3      	strhne	r3, [r4, #12]
 8003f50:	bd10      	pop	{r4, pc}

08003f52 <__sclose>:
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 bee3 	b.w	8004d20 <_close_r>
	...

08003f5c <std>:
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	4604      	mov	r4, r0
 8003f62:	e9c0 3300 	strd	r3, r3, [r0]
 8003f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f6a:	6083      	str	r3, [r0, #8]
 8003f6c:	8181      	strh	r1, [r0, #12]
 8003f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f70:	81c2      	strh	r2, [r0, #14]
 8003f72:	6183      	str	r3, [r0, #24]
 8003f74:	4619      	mov	r1, r3
 8003f76:	2208      	movs	r2, #8
 8003f78:	305c      	adds	r0, #92	@ 0x5c
 8003f7a:	f000 fec9 	bl	8004d10 <memset>
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <std+0x58>)
 8003f80:	6224      	str	r4, [r4, #32]
 8003f82:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <std+0x5c>)
 8003f86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <std+0x60>)
 8003f8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <std+0x64>)
 8003f8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f90:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <std+0x68>)
 8003f92:	429c      	cmp	r4, r3
 8003f94:	d006      	beq.n	8003fa4 <std+0x48>
 8003f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f9a:	4294      	cmp	r4, r2
 8003f9c:	d002      	beq.n	8003fa4 <std+0x48>
 8003f9e:	33d0      	adds	r3, #208	@ 0xd0
 8003fa0:	429c      	cmp	r4, r3
 8003fa2:	d105      	bne.n	8003fb0 <std+0x54>
 8003fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	f000 bf28 	b.w	8004e00 <__retarget_lock_init_recursive>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08003ed1 	.word	0x08003ed1
 8003fb8:	08003ef7 	.word	0x08003ef7
 8003fbc:	08003f2f 	.word	0x08003f2f
 8003fc0:	08003f53 	.word	0x08003f53
 8003fc4:	20000418 	.word	0x20000418

08003fc8 <stdio_exit_handler>:
 8003fc8:	4a02      	ldr	r2, [pc, #8]	@ (8003fd4 <stdio_exit_handler+0xc>)
 8003fca:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <stdio_exit_handler+0x10>)
 8003fcc:	4803      	ldr	r0, [pc, #12]	@ (8003fdc <stdio_exit_handler+0x14>)
 8003fce:	f000 be6f 	b.w	8004cb0 <_fwalk_sglue>
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	0800640d 	.word	0x0800640d
 8003fdc:	20000188 	.word	0x20000188

08003fe0 <cleanup_stdio>:
 8003fe0:	6841      	ldr	r1, [r0, #4]
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <cleanup_stdio+0x34>)
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	4604      	mov	r4, r0
 8003fea:	d001      	beq.n	8003ff0 <cleanup_stdio+0x10>
 8003fec:	f002 fa0e 	bl	800640c <_fflush_r>
 8003ff0:	68a1      	ldr	r1, [r4, #8]
 8003ff2:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <cleanup_stdio+0x38>)
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	d002      	beq.n	8003ffe <cleanup_stdio+0x1e>
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	f002 fa07 	bl	800640c <_fflush_r>
 8003ffe:	68e1      	ldr	r1, [r4, #12]
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <cleanup_stdio+0x3c>)
 8004002:	4299      	cmp	r1, r3
 8004004:	d004      	beq.n	8004010 <cleanup_stdio+0x30>
 8004006:	4620      	mov	r0, r4
 8004008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800400c:	f002 b9fe 	b.w	800640c <_fflush_r>
 8004010:	bd10      	pop	{r4, pc}
 8004012:	bf00      	nop
 8004014:	20000418 	.word	0x20000418
 8004018:	20000480 	.word	0x20000480
 800401c:	200004e8 	.word	0x200004e8

08004020 <global_stdio_init.part.0>:
 8004020:	b510      	push	{r4, lr}
 8004022:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <global_stdio_init.part.0+0x30>)
 8004024:	4c0b      	ldr	r4, [pc, #44]	@ (8004054 <global_stdio_init.part.0+0x34>)
 8004026:	4a0c      	ldr	r2, [pc, #48]	@ (8004058 <global_stdio_init.part.0+0x38>)
 8004028:	4620      	mov	r0, r4
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	2104      	movs	r1, #4
 800402e:	2200      	movs	r2, #0
 8004030:	f7ff ff94 	bl	8003f5c <std>
 8004034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004038:	2201      	movs	r2, #1
 800403a:	2109      	movs	r1, #9
 800403c:	f7ff ff8e 	bl	8003f5c <std>
 8004040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004044:	2202      	movs	r2, #2
 8004046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404a:	2112      	movs	r1, #18
 800404c:	f7ff bf86 	b.w	8003f5c <std>
 8004050:	20000550 	.word	0x20000550
 8004054:	20000418 	.word	0x20000418
 8004058:	08003fc9 	.word	0x08003fc9

0800405c <__sfp_lock_acquire>:
 800405c:	4801      	ldr	r0, [pc, #4]	@ (8004064 <__sfp_lock_acquire+0x8>)
 800405e:	f000 bed0 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	20000559 	.word	0x20000559

08004068 <__sfp_lock_release>:
 8004068:	4801      	ldr	r0, [pc, #4]	@ (8004070 <__sfp_lock_release+0x8>)
 800406a:	f000 becb 	b.w	8004e04 <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	20000559 	.word	0x20000559

08004074 <__sinit>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4604      	mov	r4, r0
 8004078:	f7ff fff0 	bl	800405c <__sfp_lock_acquire>
 800407c:	6a23      	ldr	r3, [r4, #32]
 800407e:	b11b      	cbz	r3, 8004088 <__sinit+0x14>
 8004080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004084:	f7ff bff0 	b.w	8004068 <__sfp_lock_release>
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <__sinit+0x28>)
 800408a:	6223      	str	r3, [r4, #32]
 800408c:	4b04      	ldr	r3, [pc, #16]	@ (80040a0 <__sinit+0x2c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f5      	bne.n	8004080 <__sinit+0xc>
 8004094:	f7ff ffc4 	bl	8004020 <global_stdio_init.part.0>
 8004098:	e7f2      	b.n	8004080 <__sinit+0xc>
 800409a:	bf00      	nop
 800409c:	08003fe1 	.word	0x08003fe1
 80040a0:	20000550 	.word	0x20000550

080040a4 <sulp>:
 80040a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a8:	460f      	mov	r7, r1
 80040aa:	4690      	mov	r8, r2
 80040ac:	f002 fd54 	bl	8006b58 <__ulp>
 80040b0:	4604      	mov	r4, r0
 80040b2:	460d      	mov	r5, r1
 80040b4:	f1b8 0f00 	cmp.w	r8, #0
 80040b8:	d011      	beq.n	80040de <sulp+0x3a>
 80040ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80040be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dd0b      	ble.n	80040de <sulp+0x3a>
 80040c6:	2400      	movs	r4, #0
 80040c8:	051b      	lsls	r3, r3, #20
 80040ca:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80040ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80040d2:	4622      	mov	r2, r4
 80040d4:	462b      	mov	r3, r5
 80040d6:	f7fc fabd 	bl	8000654 <__aeabi_dmul>
 80040da:	4604      	mov	r4, r0
 80040dc:	460d      	mov	r5, r1
 80040de:	4620      	mov	r0, r4
 80040e0:	4629      	mov	r1, r5
 80040e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080040e8 <_strtod_l>:
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ec:	b09f      	sub	sp, #124	@ 0x7c
 80040ee:	9217      	str	r2, [sp, #92]	@ 0x5c
 80040f0:	2200      	movs	r2, #0
 80040f2:	460c      	mov	r4, r1
 80040f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80040f6:	f04f 0a00 	mov.w	sl, #0
 80040fa:	f04f 0b00 	mov.w	fp, #0
 80040fe:	460a      	mov	r2, r1
 8004100:	9005      	str	r0, [sp, #20]
 8004102:	9219      	str	r2, [sp, #100]	@ 0x64
 8004104:	7811      	ldrb	r1, [r2, #0]
 8004106:	292b      	cmp	r1, #43	@ 0x2b
 8004108:	d048      	beq.n	800419c <_strtod_l+0xb4>
 800410a:	d836      	bhi.n	800417a <_strtod_l+0x92>
 800410c:	290d      	cmp	r1, #13
 800410e:	d830      	bhi.n	8004172 <_strtod_l+0x8a>
 8004110:	2908      	cmp	r1, #8
 8004112:	d830      	bhi.n	8004176 <_strtod_l+0x8e>
 8004114:	2900      	cmp	r1, #0
 8004116:	d039      	beq.n	800418c <_strtod_l+0xa4>
 8004118:	2200      	movs	r2, #0
 800411a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800411c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800411e:	782a      	ldrb	r2, [r5, #0]
 8004120:	2a30      	cmp	r2, #48	@ 0x30
 8004122:	f040 80b1 	bne.w	8004288 <_strtod_l+0x1a0>
 8004126:	786a      	ldrb	r2, [r5, #1]
 8004128:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800412c:	2a58      	cmp	r2, #88	@ 0x58
 800412e:	d16c      	bne.n	800420a <_strtod_l+0x122>
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004134:	4a8e      	ldr	r2, [pc, #568]	@ (8004370 <_strtod_l+0x288>)
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	ab1a      	add	r3, sp, #104	@ 0x68
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	9805      	ldr	r0, [sp, #20]
 800413e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004140:	a919      	add	r1, sp, #100	@ 0x64
 8004142:	f000 ff25 	bl	8004f90 <__gethex>
 8004146:	f010 060f 	ands.w	r6, r0, #15
 800414a:	4604      	mov	r4, r0
 800414c:	d005      	beq.n	800415a <_strtod_l+0x72>
 800414e:	2e06      	cmp	r6, #6
 8004150:	d126      	bne.n	80041a0 <_strtod_l+0xb8>
 8004152:	2300      	movs	r3, #0
 8004154:	3501      	adds	r5, #1
 8004156:	9519      	str	r5, [sp, #100]	@ 0x64
 8004158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800415a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 8584 	bne.w	8004c6a <_strtod_l+0xb82>
 8004162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004164:	b1bb      	cbz	r3, 8004196 <_strtod_l+0xae>
 8004166:	4650      	mov	r0, sl
 8004168:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800416c:	b01f      	add	sp, #124	@ 0x7c
 800416e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004172:	2920      	cmp	r1, #32
 8004174:	d1d0      	bne.n	8004118 <_strtod_l+0x30>
 8004176:	3201      	adds	r2, #1
 8004178:	e7c3      	b.n	8004102 <_strtod_l+0x1a>
 800417a:	292d      	cmp	r1, #45	@ 0x2d
 800417c:	d1cc      	bne.n	8004118 <_strtod_l+0x30>
 800417e:	2101      	movs	r1, #1
 8004180:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004182:	1c51      	adds	r1, r2, #1
 8004184:	9119      	str	r1, [sp, #100]	@ 0x64
 8004186:	7852      	ldrb	r2, [r2, #1]
 8004188:	2a00      	cmp	r2, #0
 800418a:	d1c7      	bne.n	800411c <_strtod_l+0x34>
 800418c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800418e:	9419      	str	r4, [sp, #100]	@ 0x64
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 8568 	bne.w	8004c66 <_strtod_l+0xb7e>
 8004196:	4650      	mov	r0, sl
 8004198:	4659      	mov	r1, fp
 800419a:	e7e7      	b.n	800416c <_strtod_l+0x84>
 800419c:	2100      	movs	r1, #0
 800419e:	e7ef      	b.n	8004180 <_strtod_l+0x98>
 80041a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80041a2:	b13a      	cbz	r2, 80041b4 <_strtod_l+0xcc>
 80041a4:	2135      	movs	r1, #53	@ 0x35
 80041a6:	a81c      	add	r0, sp, #112	@ 0x70
 80041a8:	f002 fdc6 	bl	8006d38 <__copybits>
 80041ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80041ae:	9805      	ldr	r0, [sp, #20]
 80041b0:	f002 f9a0 	bl	80064f4 <_Bfree>
 80041b4:	3e01      	subs	r6, #1
 80041b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80041b8:	2e04      	cmp	r6, #4
 80041ba:	d806      	bhi.n	80041ca <_strtod_l+0xe2>
 80041bc:	e8df f006 	tbb	[pc, r6]
 80041c0:	201d0314 	.word	0x201d0314
 80041c4:	14          	.byte	0x14
 80041c5:	00          	.byte	0x00
 80041c6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80041ca:	05e1      	lsls	r1, r4, #23
 80041cc:	bf48      	it	mi
 80041ce:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80041d2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80041d6:	0d1b      	lsrs	r3, r3, #20
 80041d8:	051b      	lsls	r3, r3, #20
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1bd      	bne.n	800415a <_strtod_l+0x72>
 80041de:	f000 fde5 	bl	8004dac <__errno>
 80041e2:	2322      	movs	r3, #34	@ 0x22
 80041e4:	6003      	str	r3, [r0, #0]
 80041e6:	e7b8      	b.n	800415a <_strtod_l+0x72>
 80041e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80041ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80041f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041f4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80041f8:	e7e7      	b.n	80041ca <_strtod_l+0xe2>
 80041fa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004374 <_strtod_l+0x28c>
 80041fe:	e7e4      	b.n	80041ca <_strtod_l+0xe2>
 8004200:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004204:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004208:	e7df      	b.n	80041ca <_strtod_l+0xe2>
 800420a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	2b30      	cmp	r3, #48	@ 0x30
 8004214:	d0f9      	beq.n	800420a <_strtod_l+0x122>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d09f      	beq.n	800415a <_strtod_l+0x72>
 800421a:	2301      	movs	r3, #1
 800421c:	9309      	str	r3, [sp, #36]	@ 0x24
 800421e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004220:	220a      	movs	r2, #10
 8004222:	930c      	str	r3, [sp, #48]	@ 0x30
 8004224:	2300      	movs	r3, #0
 8004226:	461f      	mov	r7, r3
 8004228:	9308      	str	r3, [sp, #32]
 800422a:	930a      	str	r3, [sp, #40]	@ 0x28
 800422c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800422e:	7805      	ldrb	r5, [r0, #0]
 8004230:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004234:	b2d9      	uxtb	r1, r3
 8004236:	2909      	cmp	r1, #9
 8004238:	d928      	bls.n	800428c <_strtod_l+0x1a4>
 800423a:	2201      	movs	r2, #1
 800423c:	494e      	ldr	r1, [pc, #312]	@ (8004378 <_strtod_l+0x290>)
 800423e:	f000 fd55 	bl	8004cec <strncmp>
 8004242:	2800      	cmp	r0, #0
 8004244:	d032      	beq.n	80042ac <_strtod_l+0x1c4>
 8004246:	2000      	movs	r0, #0
 8004248:	462a      	mov	r2, r5
 800424a:	4681      	mov	r9, r0
 800424c:	463d      	mov	r5, r7
 800424e:	4603      	mov	r3, r0
 8004250:	2a65      	cmp	r2, #101	@ 0x65
 8004252:	d001      	beq.n	8004258 <_strtod_l+0x170>
 8004254:	2a45      	cmp	r2, #69	@ 0x45
 8004256:	d114      	bne.n	8004282 <_strtod_l+0x19a>
 8004258:	b91d      	cbnz	r5, 8004262 <_strtod_l+0x17a>
 800425a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800425c:	4302      	orrs	r2, r0
 800425e:	d095      	beq.n	800418c <_strtod_l+0xa4>
 8004260:	2500      	movs	r5, #0
 8004262:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004264:	1c62      	adds	r2, r4, #1
 8004266:	9219      	str	r2, [sp, #100]	@ 0x64
 8004268:	7862      	ldrb	r2, [r4, #1]
 800426a:	2a2b      	cmp	r2, #43	@ 0x2b
 800426c:	d077      	beq.n	800435e <_strtod_l+0x276>
 800426e:	2a2d      	cmp	r2, #45	@ 0x2d
 8004270:	d07b      	beq.n	800436a <_strtod_l+0x282>
 8004272:	f04f 0c00 	mov.w	ip, #0
 8004276:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800427a:	2909      	cmp	r1, #9
 800427c:	f240 8082 	bls.w	8004384 <_strtod_l+0x29c>
 8004280:	9419      	str	r4, [sp, #100]	@ 0x64
 8004282:	f04f 0800 	mov.w	r8, #0
 8004286:	e0a2      	b.n	80043ce <_strtod_l+0x2e6>
 8004288:	2300      	movs	r3, #0
 800428a:	e7c7      	b.n	800421c <_strtod_l+0x134>
 800428c:	2f08      	cmp	r7, #8
 800428e:	bfd5      	itete	le
 8004290:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004292:	9908      	ldrgt	r1, [sp, #32]
 8004294:	fb02 3301 	mlale	r3, r2, r1, r3
 8004298:	fb02 3301 	mlagt	r3, r2, r1, r3
 800429c:	f100 0001 	add.w	r0, r0, #1
 80042a0:	bfd4      	ite	le
 80042a2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80042a4:	9308      	strgt	r3, [sp, #32]
 80042a6:	3701      	adds	r7, #1
 80042a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80042aa:	e7bf      	b.n	800422c <_strtod_l+0x144>
 80042ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80042b2:	785a      	ldrb	r2, [r3, #1]
 80042b4:	b37f      	cbz	r7, 8004316 <_strtod_l+0x22e>
 80042b6:	4681      	mov	r9, r0
 80042b8:	463d      	mov	r5, r7
 80042ba:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80042be:	2b09      	cmp	r3, #9
 80042c0:	d912      	bls.n	80042e8 <_strtod_l+0x200>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7c4      	b.n	8004250 <_strtod_l+0x168>
 80042c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80042c8:	3001      	adds	r0, #1
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80042ce:	785a      	ldrb	r2, [r3, #1]
 80042d0:	2a30      	cmp	r2, #48	@ 0x30
 80042d2:	d0f8      	beq.n	80042c6 <_strtod_l+0x1de>
 80042d4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 84cb 	bhi.w	8004c74 <_strtod_l+0xb8c>
 80042de:	4681      	mov	r9, r0
 80042e0:	2000      	movs	r0, #0
 80042e2:	4605      	mov	r5, r0
 80042e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80042e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80042e8:	3a30      	subs	r2, #48	@ 0x30
 80042ea:	f100 0301 	add.w	r3, r0, #1
 80042ee:	d02a      	beq.n	8004346 <_strtod_l+0x25e>
 80042f0:	4499      	add	r9, r3
 80042f2:	210a      	movs	r1, #10
 80042f4:	462b      	mov	r3, r5
 80042f6:	eb00 0c05 	add.w	ip, r0, r5
 80042fa:	4563      	cmp	r3, ip
 80042fc:	d10d      	bne.n	800431a <_strtod_l+0x232>
 80042fe:	1c69      	adds	r1, r5, #1
 8004300:	4401      	add	r1, r0
 8004302:	4428      	add	r0, r5
 8004304:	2808      	cmp	r0, #8
 8004306:	dc16      	bgt.n	8004336 <_strtod_l+0x24e>
 8004308:	230a      	movs	r3, #10
 800430a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800430c:	fb03 2300 	mla	r3, r3, r0, r2
 8004310:	930a      	str	r3, [sp, #40]	@ 0x28
 8004312:	2300      	movs	r3, #0
 8004314:	e018      	b.n	8004348 <_strtod_l+0x260>
 8004316:	4638      	mov	r0, r7
 8004318:	e7da      	b.n	80042d0 <_strtod_l+0x1e8>
 800431a:	2b08      	cmp	r3, #8
 800431c:	f103 0301 	add.w	r3, r3, #1
 8004320:	dc03      	bgt.n	800432a <_strtod_l+0x242>
 8004322:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004324:	434e      	muls	r6, r1
 8004326:	960a      	str	r6, [sp, #40]	@ 0x28
 8004328:	e7e7      	b.n	80042fa <_strtod_l+0x212>
 800432a:	2b10      	cmp	r3, #16
 800432c:	bfde      	ittt	le
 800432e:	9e08      	ldrle	r6, [sp, #32]
 8004330:	434e      	mulle	r6, r1
 8004332:	9608      	strle	r6, [sp, #32]
 8004334:	e7e1      	b.n	80042fa <_strtod_l+0x212>
 8004336:	280f      	cmp	r0, #15
 8004338:	dceb      	bgt.n	8004312 <_strtod_l+0x22a>
 800433a:	230a      	movs	r3, #10
 800433c:	9808      	ldr	r0, [sp, #32]
 800433e:	fb03 2300 	mla	r3, r3, r0, r2
 8004342:	9308      	str	r3, [sp, #32]
 8004344:	e7e5      	b.n	8004312 <_strtod_l+0x22a>
 8004346:	4629      	mov	r1, r5
 8004348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800434a:	460d      	mov	r5, r1
 800434c:	1c50      	adds	r0, r2, #1
 800434e:	9019      	str	r0, [sp, #100]	@ 0x64
 8004350:	7852      	ldrb	r2, [r2, #1]
 8004352:	4618      	mov	r0, r3
 8004354:	e7b1      	b.n	80042ba <_strtod_l+0x1d2>
 8004356:	f04f 0900 	mov.w	r9, #0
 800435a:	2301      	movs	r3, #1
 800435c:	e77d      	b.n	800425a <_strtod_l+0x172>
 800435e:	f04f 0c00 	mov.w	ip, #0
 8004362:	1ca2      	adds	r2, r4, #2
 8004364:	9219      	str	r2, [sp, #100]	@ 0x64
 8004366:	78a2      	ldrb	r2, [r4, #2]
 8004368:	e785      	b.n	8004276 <_strtod_l+0x18e>
 800436a:	f04f 0c01 	mov.w	ip, #1
 800436e:	e7f8      	b.n	8004362 <_strtod_l+0x27a>
 8004370:	080077bc 	.word	0x080077bc
 8004374:	7ff00000 	.word	0x7ff00000
 8004378:	0800779a 	.word	0x0800779a
 800437c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800437e:	1c51      	adds	r1, r2, #1
 8004380:	9119      	str	r1, [sp, #100]	@ 0x64
 8004382:	7852      	ldrb	r2, [r2, #1]
 8004384:	2a30      	cmp	r2, #48	@ 0x30
 8004386:	d0f9      	beq.n	800437c <_strtod_l+0x294>
 8004388:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800438c:	2908      	cmp	r1, #8
 800438e:	f63f af78 	bhi.w	8004282 <_strtod_l+0x19a>
 8004392:	f04f 080a 	mov.w	r8, #10
 8004396:	3a30      	subs	r2, #48	@ 0x30
 8004398:	920e      	str	r2, [sp, #56]	@ 0x38
 800439a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800439c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800439e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80043a0:	1c56      	adds	r6, r2, #1
 80043a2:	9619      	str	r6, [sp, #100]	@ 0x64
 80043a4:	7852      	ldrb	r2, [r2, #1]
 80043a6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80043aa:	f1be 0f09 	cmp.w	lr, #9
 80043ae:	d939      	bls.n	8004424 <_strtod_l+0x33c>
 80043b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80043b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80043b6:	1a76      	subs	r6, r6, r1
 80043b8:	2e08      	cmp	r6, #8
 80043ba:	dc03      	bgt.n	80043c4 <_strtod_l+0x2dc>
 80043bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80043be:	4588      	cmp	r8, r1
 80043c0:	bfa8      	it	ge
 80043c2:	4688      	movge	r8, r1
 80043c4:	f1bc 0f00 	cmp.w	ip, #0
 80043c8:	d001      	beq.n	80043ce <_strtod_l+0x2e6>
 80043ca:	f1c8 0800 	rsb	r8, r8, #0
 80043ce:	2d00      	cmp	r5, #0
 80043d0:	d14e      	bne.n	8004470 <_strtod_l+0x388>
 80043d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80043d4:	4308      	orrs	r0, r1
 80043d6:	f47f aec0 	bne.w	800415a <_strtod_l+0x72>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f47f aed6 	bne.w	800418c <_strtod_l+0xa4>
 80043e0:	2a69      	cmp	r2, #105	@ 0x69
 80043e2:	d028      	beq.n	8004436 <_strtod_l+0x34e>
 80043e4:	dc25      	bgt.n	8004432 <_strtod_l+0x34a>
 80043e6:	2a49      	cmp	r2, #73	@ 0x49
 80043e8:	d025      	beq.n	8004436 <_strtod_l+0x34e>
 80043ea:	2a4e      	cmp	r2, #78	@ 0x4e
 80043ec:	f47f aece 	bne.w	800418c <_strtod_l+0xa4>
 80043f0:	499a      	ldr	r1, [pc, #616]	@ (800465c <_strtod_l+0x574>)
 80043f2:	a819      	add	r0, sp, #100	@ 0x64
 80043f4:	f000 ffee 	bl	80053d4 <__match>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f43f aec7 	beq.w	800418c <_strtod_l+0xa4>
 80043fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b28      	cmp	r3, #40	@ 0x28
 8004404:	d12e      	bne.n	8004464 <_strtod_l+0x37c>
 8004406:	4996      	ldr	r1, [pc, #600]	@ (8004660 <_strtod_l+0x578>)
 8004408:	aa1c      	add	r2, sp, #112	@ 0x70
 800440a:	a819      	add	r0, sp, #100	@ 0x64
 800440c:	f000 fff6 	bl	80053fc <__hexnan>
 8004410:	2805      	cmp	r0, #5
 8004412:	d127      	bne.n	8004464 <_strtod_l+0x37c>
 8004414:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004416:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800441a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800441e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004422:	e69a      	b.n	800415a <_strtod_l+0x72>
 8004424:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004426:	fb08 2101 	mla	r1, r8, r1, r2
 800442a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800442e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004430:	e7b5      	b.n	800439e <_strtod_l+0x2b6>
 8004432:	2a6e      	cmp	r2, #110	@ 0x6e
 8004434:	e7da      	b.n	80043ec <_strtod_l+0x304>
 8004436:	498b      	ldr	r1, [pc, #556]	@ (8004664 <_strtod_l+0x57c>)
 8004438:	a819      	add	r0, sp, #100	@ 0x64
 800443a:	f000 ffcb 	bl	80053d4 <__match>
 800443e:	2800      	cmp	r0, #0
 8004440:	f43f aea4 	beq.w	800418c <_strtod_l+0xa4>
 8004444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004446:	4988      	ldr	r1, [pc, #544]	@ (8004668 <_strtod_l+0x580>)
 8004448:	3b01      	subs	r3, #1
 800444a:	a819      	add	r0, sp, #100	@ 0x64
 800444c:	9319      	str	r3, [sp, #100]	@ 0x64
 800444e:	f000 ffc1 	bl	80053d4 <__match>
 8004452:	b910      	cbnz	r0, 800445a <_strtod_l+0x372>
 8004454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004456:	3301      	adds	r3, #1
 8004458:	9319      	str	r3, [sp, #100]	@ 0x64
 800445a:	f04f 0a00 	mov.w	sl, #0
 800445e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800466c <_strtod_l+0x584>
 8004462:	e67a      	b.n	800415a <_strtod_l+0x72>
 8004464:	4882      	ldr	r0, [pc, #520]	@ (8004670 <_strtod_l+0x588>)
 8004466:	f000 fcdd 	bl	8004e24 <nan>
 800446a:	4682      	mov	sl, r0
 800446c:	468b      	mov	fp, r1
 800446e:	e674      	b.n	800415a <_strtod_l+0x72>
 8004470:	eba8 0309 	sub.w	r3, r8, r9
 8004474:	2f00      	cmp	r7, #0
 8004476:	bf08      	it	eq
 8004478:	462f      	moveq	r7, r5
 800447a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800447c:	2d10      	cmp	r5, #16
 800447e:	462c      	mov	r4, r5
 8004480:	9309      	str	r3, [sp, #36]	@ 0x24
 8004482:	bfa8      	it	ge
 8004484:	2410      	movge	r4, #16
 8004486:	f7fc f86b 	bl	8000560 <__aeabi_ui2d>
 800448a:	2d09      	cmp	r5, #9
 800448c:	4682      	mov	sl, r0
 800448e:	468b      	mov	fp, r1
 8004490:	dc11      	bgt.n	80044b6 <_strtod_l+0x3ce>
 8004492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	f43f ae60 	beq.w	800415a <_strtod_l+0x72>
 800449a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800449c:	dd76      	ble.n	800458c <_strtod_l+0x4a4>
 800449e:	2b16      	cmp	r3, #22
 80044a0:	dc5d      	bgt.n	800455e <_strtod_l+0x476>
 80044a2:	4974      	ldr	r1, [pc, #464]	@ (8004674 <_strtod_l+0x58c>)
 80044a4:	4652      	mov	r2, sl
 80044a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80044aa:	465b      	mov	r3, fp
 80044ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044b0:	f7fc f8d0 	bl	8000654 <__aeabi_dmul>
 80044b4:	e7d9      	b.n	800446a <_strtod_l+0x382>
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <_strtod_l+0x58c>)
 80044b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80044c0:	f7fc f8c8 	bl	8000654 <__aeabi_dmul>
 80044c4:	4682      	mov	sl, r0
 80044c6:	9808      	ldr	r0, [sp, #32]
 80044c8:	468b      	mov	fp, r1
 80044ca:	f7fc f849 	bl	8000560 <__aeabi_ui2d>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4650      	mov	r0, sl
 80044d4:	4659      	mov	r1, fp
 80044d6:	f7fb ff07 	bl	80002e8 <__adddf3>
 80044da:	2d0f      	cmp	r5, #15
 80044dc:	4682      	mov	sl, r0
 80044de:	468b      	mov	fp, r1
 80044e0:	ddd7      	ble.n	8004492 <_strtod_l+0x3aa>
 80044e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044e4:	1b2c      	subs	r4, r5, r4
 80044e6:	441c      	add	r4, r3
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	f340 8096 	ble.w	800461a <_strtod_l+0x532>
 80044ee:	f014 030f 	ands.w	r3, r4, #15
 80044f2:	d00a      	beq.n	800450a <_strtod_l+0x422>
 80044f4:	495f      	ldr	r1, [pc, #380]	@ (8004674 <_strtod_l+0x58c>)
 80044f6:	4652      	mov	r2, sl
 80044f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80044fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004500:	465b      	mov	r3, fp
 8004502:	f7fc f8a7 	bl	8000654 <__aeabi_dmul>
 8004506:	4682      	mov	sl, r0
 8004508:	468b      	mov	fp, r1
 800450a:	f034 040f 	bics.w	r4, r4, #15
 800450e:	d073      	beq.n	80045f8 <_strtod_l+0x510>
 8004510:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004514:	dd48      	ble.n	80045a8 <_strtod_l+0x4c0>
 8004516:	2400      	movs	r4, #0
 8004518:	46a0      	mov	r8, r4
 800451a:	46a1      	mov	r9, r4
 800451c:	940a      	str	r4, [sp, #40]	@ 0x28
 800451e:	2322      	movs	r3, #34	@ 0x22
 8004520:	f04f 0a00 	mov.w	sl, #0
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800466c <_strtod_l+0x584>
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	f43f ae13 	beq.w	800415a <_strtod_l+0x72>
 8004534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004536:	9805      	ldr	r0, [sp, #20]
 8004538:	f001 ffdc 	bl	80064f4 <_Bfree>
 800453c:	4649      	mov	r1, r9
 800453e:	9805      	ldr	r0, [sp, #20]
 8004540:	f001 ffd8 	bl	80064f4 <_Bfree>
 8004544:	4641      	mov	r1, r8
 8004546:	9805      	ldr	r0, [sp, #20]
 8004548:	f001 ffd4 	bl	80064f4 <_Bfree>
 800454c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800454e:	9805      	ldr	r0, [sp, #20]
 8004550:	f001 ffd0 	bl	80064f4 <_Bfree>
 8004554:	4621      	mov	r1, r4
 8004556:	9805      	ldr	r0, [sp, #20]
 8004558:	f001 ffcc 	bl	80064f4 <_Bfree>
 800455c:	e5fd      	b.n	800415a <_strtod_l+0x72>
 800455e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004560:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004564:	4293      	cmp	r3, r2
 8004566:	dbbc      	blt.n	80044e2 <_strtod_l+0x3fa>
 8004568:	4c42      	ldr	r4, [pc, #264]	@ (8004674 <_strtod_l+0x58c>)
 800456a:	f1c5 050f 	rsb	r5, r5, #15
 800456e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004572:	4652      	mov	r2, sl
 8004574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004578:	465b      	mov	r3, fp
 800457a:	f7fc f86b 	bl	8000654 <__aeabi_dmul>
 800457e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004580:	1b5d      	subs	r5, r3, r5
 8004582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004586:	e9d4 2300 	ldrd	r2, r3, [r4]
 800458a:	e791      	b.n	80044b0 <_strtod_l+0x3c8>
 800458c:	3316      	adds	r3, #22
 800458e:	dba8      	blt.n	80044e2 <_strtod_l+0x3fa>
 8004590:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <_strtod_l+0x58c>)
 8004592:	eba9 0808 	sub.w	r8, r9, r8
 8004596:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800459a:	4650      	mov	r0, sl
 800459c:	e9d8 2300 	ldrd	r2, r3, [r8]
 80045a0:	4659      	mov	r1, fp
 80045a2:	f7fc f981 	bl	80008a8 <__aeabi_ddiv>
 80045a6:	e760      	b.n	800446a <_strtod_l+0x382>
 80045a8:	4b33      	ldr	r3, [pc, #204]	@ (8004678 <_strtod_l+0x590>)
 80045aa:	4650      	mov	r0, sl
 80045ac:	9308      	str	r3, [sp, #32]
 80045ae:	2300      	movs	r3, #0
 80045b0:	4659      	mov	r1, fp
 80045b2:	461e      	mov	r6, r3
 80045b4:	1124      	asrs	r4, r4, #4
 80045b6:	2c01      	cmp	r4, #1
 80045b8:	dc21      	bgt.n	80045fe <_strtod_l+0x516>
 80045ba:	b10b      	cbz	r3, 80045c0 <_strtod_l+0x4d8>
 80045bc:	4682      	mov	sl, r0
 80045be:	468b      	mov	fp, r1
 80045c0:	492d      	ldr	r1, [pc, #180]	@ (8004678 <_strtod_l+0x590>)
 80045c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80045c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80045ca:	4652      	mov	r2, sl
 80045cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045d0:	465b      	mov	r3, fp
 80045d2:	f7fc f83f 	bl	8000654 <__aeabi_dmul>
 80045d6:	4b25      	ldr	r3, [pc, #148]	@ (800466c <_strtod_l+0x584>)
 80045d8:	460a      	mov	r2, r1
 80045da:	400b      	ands	r3, r1
 80045dc:	4927      	ldr	r1, [pc, #156]	@ (800467c <_strtod_l+0x594>)
 80045de:	4682      	mov	sl, r0
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d898      	bhi.n	8004516 <_strtod_l+0x42e>
 80045e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80045e8:	428b      	cmp	r3, r1
 80045ea:	bf86      	itte	hi
 80045ec:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80045f0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004680 <_strtod_l+0x598>
 80045f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80045f8:	2300      	movs	r3, #0
 80045fa:	9308      	str	r3, [sp, #32]
 80045fc:	e07a      	b.n	80046f4 <_strtod_l+0x60c>
 80045fe:	07e2      	lsls	r2, r4, #31
 8004600:	d505      	bpl.n	800460e <_strtod_l+0x526>
 8004602:	9b08      	ldr	r3, [sp, #32]
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fc f824 	bl	8000654 <__aeabi_dmul>
 800460c:	2301      	movs	r3, #1
 800460e:	9a08      	ldr	r2, [sp, #32]
 8004610:	3601      	adds	r6, #1
 8004612:	3208      	adds	r2, #8
 8004614:	1064      	asrs	r4, r4, #1
 8004616:	9208      	str	r2, [sp, #32]
 8004618:	e7cd      	b.n	80045b6 <_strtod_l+0x4ce>
 800461a:	d0ed      	beq.n	80045f8 <_strtod_l+0x510>
 800461c:	4264      	negs	r4, r4
 800461e:	f014 020f 	ands.w	r2, r4, #15
 8004622:	d00a      	beq.n	800463a <_strtod_l+0x552>
 8004624:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <_strtod_l+0x58c>)
 8004626:	4650      	mov	r0, sl
 8004628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800462c:	4659      	mov	r1, fp
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fc f939 	bl	80008a8 <__aeabi_ddiv>
 8004636:	4682      	mov	sl, r0
 8004638:	468b      	mov	fp, r1
 800463a:	1124      	asrs	r4, r4, #4
 800463c:	d0dc      	beq.n	80045f8 <_strtod_l+0x510>
 800463e:	2c1f      	cmp	r4, #31
 8004640:	dd20      	ble.n	8004684 <_strtod_l+0x59c>
 8004642:	2400      	movs	r4, #0
 8004644:	46a0      	mov	r8, r4
 8004646:	46a1      	mov	r9, r4
 8004648:	940a      	str	r4, [sp, #40]	@ 0x28
 800464a:	2322      	movs	r3, #34	@ 0x22
 800464c:	9a05      	ldr	r2, [sp, #20]
 800464e:	f04f 0a00 	mov.w	sl, #0
 8004652:	f04f 0b00 	mov.w	fp, #0
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e768      	b.n	800452c <_strtod_l+0x444>
 800465a:	bf00      	nop
 800465c:	080077a5 	.word	0x080077a5
 8004660:	080077a8 	.word	0x080077a8
 8004664:	0800779c 	.word	0x0800779c
 8004668:	0800779f 	.word	0x0800779f
 800466c:	7ff00000 	.word	0x7ff00000
 8004670:	08007b6b 	.word	0x08007b6b
 8004674:	08007a68 	.word	0x08007a68
 8004678:	08007a40 	.word	0x08007a40
 800467c:	7ca00000 	.word	0x7ca00000
 8004680:	7fefffff 	.word	0x7fefffff
 8004684:	f014 0310 	ands.w	r3, r4, #16
 8004688:	bf18      	it	ne
 800468a:	236a      	movne	r3, #106	@ 0x6a
 800468c:	4650      	mov	r0, sl
 800468e:	9308      	str	r3, [sp, #32]
 8004690:	4659      	mov	r1, fp
 8004692:	2300      	movs	r3, #0
 8004694:	4ea9      	ldr	r6, [pc, #676]	@ (800493c <_strtod_l+0x854>)
 8004696:	07e2      	lsls	r2, r4, #31
 8004698:	d504      	bpl.n	80046a4 <_strtod_l+0x5bc>
 800469a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800469e:	f7fb ffd9 	bl	8000654 <__aeabi_dmul>
 80046a2:	2301      	movs	r3, #1
 80046a4:	1064      	asrs	r4, r4, #1
 80046a6:	f106 0608 	add.w	r6, r6, #8
 80046aa:	d1f4      	bne.n	8004696 <_strtod_l+0x5ae>
 80046ac:	b10b      	cbz	r3, 80046b2 <_strtod_l+0x5ca>
 80046ae:	4682      	mov	sl, r0
 80046b0:	468b      	mov	fp, r1
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	b1b3      	cbz	r3, 80046e4 <_strtod_l+0x5fc>
 80046b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80046ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80046be:	2b00      	cmp	r3, #0
 80046c0:	4659      	mov	r1, fp
 80046c2:	dd0f      	ble.n	80046e4 <_strtod_l+0x5fc>
 80046c4:	2b1f      	cmp	r3, #31
 80046c6:	dd57      	ble.n	8004778 <_strtod_l+0x690>
 80046c8:	2b34      	cmp	r3, #52	@ 0x34
 80046ca:	bfd8      	it	le
 80046cc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80046d0:	f04f 0a00 	mov.w	sl, #0
 80046d4:	bfcf      	iteee	gt
 80046d6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80046da:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80046de:	4093      	lslle	r3, r2
 80046e0:	ea03 0b01 	andle.w	fp, r3, r1
 80046e4:	2200      	movs	r2, #0
 80046e6:	2300      	movs	r3, #0
 80046e8:	4650      	mov	r0, sl
 80046ea:	4659      	mov	r1, fp
 80046ec:	f7fc fa1a 	bl	8000b24 <__aeabi_dcmpeq>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d1a6      	bne.n	8004642 <_strtod_l+0x55a>
 80046f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046f6:	463a      	mov	r2, r7
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80046fc:	462b      	mov	r3, r5
 80046fe:	9805      	ldr	r0, [sp, #20]
 8004700:	f001 ff60 	bl	80065c4 <__s2b>
 8004704:	900a      	str	r0, [sp, #40]	@ 0x28
 8004706:	2800      	cmp	r0, #0
 8004708:	f43f af05 	beq.w	8004516 <_strtod_l+0x42e>
 800470c:	2400      	movs	r4, #0
 800470e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004710:	eba9 0308 	sub.w	r3, r9, r8
 8004714:	2a00      	cmp	r2, #0
 8004716:	bfa8      	it	ge
 8004718:	2300      	movge	r3, #0
 800471a:	46a0      	mov	r8, r4
 800471c:	9312      	str	r3, [sp, #72]	@ 0x48
 800471e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004722:	9316      	str	r3, [sp, #88]	@ 0x58
 8004724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004726:	9805      	ldr	r0, [sp, #20]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	f001 fea3 	bl	8006474 <_Balloc>
 800472e:	4681      	mov	r9, r0
 8004730:	2800      	cmp	r0, #0
 8004732:	f43f aef4 	beq.w	800451e <_strtod_l+0x436>
 8004736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004738:	300c      	adds	r0, #12
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	f103 010c 	add.w	r1, r3, #12
 8004740:	3202      	adds	r2, #2
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	f000 fb5f 	bl	8004e06 <memcpy>
 8004748:	ab1c      	add	r3, sp, #112	@ 0x70
 800474a:	9301      	str	r3, [sp, #4]
 800474c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	4652      	mov	r2, sl
 8004752:	465b      	mov	r3, fp
 8004754:	9805      	ldr	r0, [sp, #20]
 8004756:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800475a:	f002 fa65 	bl	8006c28 <__d2b>
 800475e:	901a      	str	r0, [sp, #104]	@ 0x68
 8004760:	2800      	cmp	r0, #0
 8004762:	f43f aedc 	beq.w	800451e <_strtod_l+0x436>
 8004766:	2101      	movs	r1, #1
 8004768:	9805      	ldr	r0, [sp, #20]
 800476a:	f001 ffc1 	bl	80066f0 <__i2b>
 800476e:	4680      	mov	r8, r0
 8004770:	b948      	cbnz	r0, 8004786 <_strtod_l+0x69e>
 8004772:	f04f 0800 	mov.w	r8, #0
 8004776:	e6d2      	b.n	800451e <_strtod_l+0x436>
 8004778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	ea03 0a0a 	and.w	sl, r3, sl
 8004784:	e7ae      	b.n	80046e4 <_strtod_l+0x5fc>
 8004786:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004788:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800478a:	2d00      	cmp	r5, #0
 800478c:	bfab      	itete	ge
 800478e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004790:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004792:	18ef      	addge	r7, r5, r3
 8004794:	1b5e      	sublt	r6, r3, r5
 8004796:	9b08      	ldr	r3, [sp, #32]
 8004798:	bfa8      	it	ge
 800479a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800479c:	eba5 0503 	sub.w	r5, r5, r3
 80047a0:	4415      	add	r5, r2
 80047a2:	4b67      	ldr	r3, [pc, #412]	@ (8004940 <_strtod_l+0x858>)
 80047a4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80047a8:	bfb8      	it	lt
 80047aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80047ac:	429d      	cmp	r5, r3
 80047ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80047b2:	da50      	bge.n	8004856 <_strtod_l+0x76e>
 80047b4:	1b5b      	subs	r3, r3, r5
 80047b6:	2b1f      	cmp	r3, #31
 80047b8:	f04f 0101 	mov.w	r1, #1
 80047bc:	eba2 0203 	sub.w	r2, r2, r3
 80047c0:	dc3d      	bgt.n	800483e <_strtod_l+0x756>
 80047c2:	fa01 f303 	lsl.w	r3, r1, r3
 80047c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80047c8:	2300      	movs	r3, #0
 80047ca:	9310      	str	r3, [sp, #64]	@ 0x40
 80047cc:	18bd      	adds	r5, r7, r2
 80047ce:	9b08      	ldr	r3, [sp, #32]
 80047d0:	42af      	cmp	r7, r5
 80047d2:	4416      	add	r6, r2
 80047d4:	441e      	add	r6, r3
 80047d6:	463b      	mov	r3, r7
 80047d8:	bfa8      	it	ge
 80047da:	462b      	movge	r3, r5
 80047dc:	42b3      	cmp	r3, r6
 80047de:	bfa8      	it	ge
 80047e0:	4633      	movge	r3, r6
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bfc2      	ittt	gt
 80047e6:	1aed      	subgt	r5, r5, r3
 80047e8:	1af6      	subgt	r6, r6, r3
 80047ea:	1aff      	subgt	r7, r7, r3
 80047ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dd16      	ble.n	8004820 <_strtod_l+0x738>
 80047f2:	4641      	mov	r1, r8
 80047f4:	461a      	mov	r2, r3
 80047f6:	9805      	ldr	r0, [sp, #20]
 80047f8:	f002 f838 	bl	800686c <__pow5mult>
 80047fc:	4680      	mov	r8, r0
 80047fe:	2800      	cmp	r0, #0
 8004800:	d0b7      	beq.n	8004772 <_strtod_l+0x68a>
 8004802:	4601      	mov	r1, r0
 8004804:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004806:	9805      	ldr	r0, [sp, #20]
 8004808:	f001 ff88 	bl	800671c <__multiply>
 800480c:	900e      	str	r0, [sp, #56]	@ 0x38
 800480e:	2800      	cmp	r0, #0
 8004810:	f43f ae85 	beq.w	800451e <_strtod_l+0x436>
 8004814:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004816:	9805      	ldr	r0, [sp, #20]
 8004818:	f001 fe6c 	bl	80064f4 <_Bfree>
 800481c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800481e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004820:	2d00      	cmp	r5, #0
 8004822:	dc1d      	bgt.n	8004860 <_strtod_l+0x778>
 8004824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	dd23      	ble.n	8004872 <_strtod_l+0x78a>
 800482a:	4649      	mov	r1, r9
 800482c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800482e:	9805      	ldr	r0, [sp, #20]
 8004830:	f002 f81c 	bl	800686c <__pow5mult>
 8004834:	4681      	mov	r9, r0
 8004836:	b9e0      	cbnz	r0, 8004872 <_strtod_l+0x78a>
 8004838:	f04f 0900 	mov.w	r9, #0
 800483c:	e66f      	b.n	800451e <_strtod_l+0x436>
 800483e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004842:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004846:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800484a:	35e2      	adds	r5, #226	@ 0xe2
 800484c:	fa01 f305 	lsl.w	r3, r1, r5
 8004850:	9310      	str	r3, [sp, #64]	@ 0x40
 8004852:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004854:	e7ba      	b.n	80047cc <_strtod_l+0x6e4>
 8004856:	2300      	movs	r3, #0
 8004858:	9310      	str	r3, [sp, #64]	@ 0x40
 800485a:	2301      	movs	r3, #1
 800485c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800485e:	e7b5      	b.n	80047cc <_strtod_l+0x6e4>
 8004860:	462a      	mov	r2, r5
 8004862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004864:	9805      	ldr	r0, [sp, #20]
 8004866:	f002 f85b 	bl	8006920 <__lshift>
 800486a:	901a      	str	r0, [sp, #104]	@ 0x68
 800486c:	2800      	cmp	r0, #0
 800486e:	d1d9      	bne.n	8004824 <_strtod_l+0x73c>
 8004870:	e655      	b.n	800451e <_strtod_l+0x436>
 8004872:	2e00      	cmp	r6, #0
 8004874:	dd07      	ble.n	8004886 <_strtod_l+0x79e>
 8004876:	4649      	mov	r1, r9
 8004878:	4632      	mov	r2, r6
 800487a:	9805      	ldr	r0, [sp, #20]
 800487c:	f002 f850 	bl	8006920 <__lshift>
 8004880:	4681      	mov	r9, r0
 8004882:	2800      	cmp	r0, #0
 8004884:	d0d8      	beq.n	8004838 <_strtod_l+0x750>
 8004886:	2f00      	cmp	r7, #0
 8004888:	dd08      	ble.n	800489c <_strtod_l+0x7b4>
 800488a:	4641      	mov	r1, r8
 800488c:	463a      	mov	r2, r7
 800488e:	9805      	ldr	r0, [sp, #20]
 8004890:	f002 f846 	bl	8006920 <__lshift>
 8004894:	4680      	mov	r8, r0
 8004896:	2800      	cmp	r0, #0
 8004898:	f43f ae41 	beq.w	800451e <_strtod_l+0x436>
 800489c:	464a      	mov	r2, r9
 800489e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80048a0:	9805      	ldr	r0, [sp, #20]
 80048a2:	f002 f8c5 	bl	8006a30 <__mdiff>
 80048a6:	4604      	mov	r4, r0
 80048a8:	2800      	cmp	r0, #0
 80048aa:	f43f ae38 	beq.w	800451e <_strtod_l+0x436>
 80048ae:	68c3      	ldr	r3, [r0, #12]
 80048b0:	4641      	mov	r1, r8
 80048b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80048b4:	2300      	movs	r3, #0
 80048b6:	60c3      	str	r3, [r0, #12]
 80048b8:	f002 f89e 	bl	80069f8 <__mcmp>
 80048bc:	2800      	cmp	r0, #0
 80048be:	da45      	bge.n	800494c <_strtod_l+0x864>
 80048c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048c2:	ea53 030a 	orrs.w	r3, r3, sl
 80048c6:	d16b      	bne.n	80049a0 <_strtod_l+0x8b8>
 80048c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d167      	bne.n	80049a0 <_strtod_l+0x8b8>
 80048d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80048d4:	0d1b      	lsrs	r3, r3, #20
 80048d6:	051b      	lsls	r3, r3, #20
 80048d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80048dc:	d960      	bls.n	80049a0 <_strtod_l+0x8b8>
 80048de:	6963      	ldr	r3, [r4, #20]
 80048e0:	b913      	cbnz	r3, 80048e8 <_strtod_l+0x800>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	dd5b      	ble.n	80049a0 <_strtod_l+0x8b8>
 80048e8:	4621      	mov	r1, r4
 80048ea:	2201      	movs	r2, #1
 80048ec:	9805      	ldr	r0, [sp, #20]
 80048ee:	f002 f817 	bl	8006920 <__lshift>
 80048f2:	4641      	mov	r1, r8
 80048f4:	4604      	mov	r4, r0
 80048f6:	f002 f87f 	bl	80069f8 <__mcmp>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	dd50      	ble.n	80049a0 <_strtod_l+0x8b8>
 80048fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004902:	9a08      	ldr	r2, [sp, #32]
 8004904:	0d1b      	lsrs	r3, r3, #20
 8004906:	051b      	lsls	r3, r3, #20
 8004908:	2a00      	cmp	r2, #0
 800490a:	d06a      	beq.n	80049e2 <_strtod_l+0x8fa>
 800490c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004910:	d867      	bhi.n	80049e2 <_strtod_l+0x8fa>
 8004912:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004916:	f67f ae98 	bls.w	800464a <_strtod_l+0x562>
 800491a:	4650      	mov	r0, sl
 800491c:	4659      	mov	r1, fp
 800491e:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <_strtod_l+0x85c>)
 8004920:	2200      	movs	r2, #0
 8004922:	f7fb fe97 	bl	8000654 <__aeabi_dmul>
 8004926:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <_strtod_l+0x860>)
 8004928:	4682      	mov	sl, r0
 800492a:	400b      	ands	r3, r1
 800492c:	468b      	mov	fp, r1
 800492e:	2b00      	cmp	r3, #0
 8004930:	f47f ae00 	bne.w	8004534 <_strtod_l+0x44c>
 8004934:	2322      	movs	r3, #34	@ 0x22
 8004936:	9a05      	ldr	r2, [sp, #20]
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e5fb      	b.n	8004534 <_strtod_l+0x44c>
 800493c:	080077d0 	.word	0x080077d0
 8004940:	fffffc02 	.word	0xfffffc02
 8004944:	39500000 	.word	0x39500000
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004950:	d165      	bne.n	8004a1e <_strtod_l+0x936>
 8004952:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004958:	b35a      	cbz	r2, 80049b2 <_strtod_l+0x8ca>
 800495a:	4a99      	ldr	r2, [pc, #612]	@ (8004bc0 <_strtod_l+0xad8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d12b      	bne.n	80049b8 <_strtod_l+0x8d0>
 8004960:	9b08      	ldr	r3, [sp, #32]
 8004962:	4651      	mov	r1, sl
 8004964:	b303      	cbz	r3, 80049a8 <_strtod_l+0x8c0>
 8004966:	465a      	mov	r2, fp
 8004968:	4b96      	ldr	r3, [pc, #600]	@ (8004bc4 <_strtod_l+0xadc>)
 800496a:	4013      	ands	r3, r2
 800496c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004974:	d81b      	bhi.n	80049ae <_strtod_l+0x8c6>
 8004976:	0d1b      	lsrs	r3, r3, #20
 8004978:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	4299      	cmp	r1, r3
 8004982:	d119      	bne.n	80049b8 <_strtod_l+0x8d0>
 8004984:	4b90      	ldr	r3, [pc, #576]	@ (8004bc8 <_strtod_l+0xae0>)
 8004986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004988:	429a      	cmp	r2, r3
 800498a:	d102      	bne.n	8004992 <_strtod_l+0x8aa>
 800498c:	3101      	adds	r1, #1
 800498e:	f43f adc6 	beq.w	800451e <_strtod_l+0x436>
 8004992:	f04f 0a00 	mov.w	sl, #0
 8004996:	4b8b      	ldr	r3, [pc, #556]	@ (8004bc4 <_strtod_l+0xadc>)
 8004998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800499a:	401a      	ands	r2, r3
 800499c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80049a0:	9b08      	ldr	r3, [sp, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1b9      	bne.n	800491a <_strtod_l+0x832>
 80049a6:	e5c5      	b.n	8004534 <_strtod_l+0x44c>
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049ac:	e7e8      	b.n	8004980 <_strtod_l+0x898>
 80049ae:	4613      	mov	r3, r2
 80049b0:	e7e6      	b.n	8004980 <_strtod_l+0x898>
 80049b2:	ea53 030a 	orrs.w	r3, r3, sl
 80049b6:	d0a2      	beq.n	80048fe <_strtod_l+0x816>
 80049b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80049ba:	b1db      	cbz	r3, 80049f4 <_strtod_l+0x90c>
 80049bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80049be:	4213      	tst	r3, r2
 80049c0:	d0ee      	beq.n	80049a0 <_strtod_l+0x8b8>
 80049c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049c4:	4650      	mov	r0, sl
 80049c6:	4659      	mov	r1, fp
 80049c8:	9a08      	ldr	r2, [sp, #32]
 80049ca:	b1bb      	cbz	r3, 80049fc <_strtod_l+0x914>
 80049cc:	f7ff fb6a 	bl	80040a4 <sulp>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049d8:	f7fb fc86 	bl	80002e8 <__adddf3>
 80049dc:	4682      	mov	sl, r0
 80049de:	468b      	mov	fp, r1
 80049e0:	e7de      	b.n	80049a0 <_strtod_l+0x8b8>
 80049e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80049e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80049ea:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80049ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80049f2:	e7d5      	b.n	80049a0 <_strtod_l+0x8b8>
 80049f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80049f6:	ea13 0f0a 	tst.w	r3, sl
 80049fa:	e7e1      	b.n	80049c0 <_strtod_l+0x8d8>
 80049fc:	f7ff fb52 	bl	80040a4 <sulp>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a08:	f7fb fc6c 	bl	80002e4 <__aeabi_dsub>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4682      	mov	sl, r0
 8004a12:	468b      	mov	fp, r1
 8004a14:	f7fc f886 	bl	8000b24 <__aeabi_dcmpeq>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d0c1      	beq.n	80049a0 <_strtod_l+0x8b8>
 8004a1c:	e615      	b.n	800464a <_strtod_l+0x562>
 8004a1e:	4641      	mov	r1, r8
 8004a20:	4620      	mov	r0, r4
 8004a22:	f002 f959 	bl	8006cd8 <__ratio>
 8004a26:	2200      	movs	r2, #0
 8004a28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	460f      	mov	r7, r1
 8004a30:	f7fc f88c 	bl	8000b4c <__aeabi_dcmple>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d06d      	beq.n	8004b14 <_strtod_l+0xa2c>
 8004a38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d178      	bne.n	8004b30 <_strtod_l+0xa48>
 8004a3e:	f1ba 0f00 	cmp.w	sl, #0
 8004a42:	d156      	bne.n	8004af2 <_strtod_l+0xa0a>
 8004a44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d158      	bne.n	8004b00 <_strtod_l+0xa18>
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	4b5d      	ldr	r3, [pc, #372]	@ (8004bcc <_strtod_l+0xae4>)
 8004a56:	f7fc f86f 	bl	8000b38 <__aeabi_dcmplt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d157      	bne.n	8004b0e <_strtod_l+0xa26>
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	2200      	movs	r2, #0
 8004a64:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd0 <_strtod_l+0xae8>)
 8004a66:	f7fb fdf5 	bl	8000654 <__aeabi_dmul>
 8004a6a:	4606      	mov	r6, r0
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004a72:	9606      	str	r6, [sp, #24]
 8004a74:	9307      	str	r3, [sp, #28]
 8004a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a7a:	4d52      	ldr	r5, [pc, #328]	@ (8004bc4 <_strtod_l+0xadc>)
 8004a7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004a80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a82:	401d      	ands	r5, r3
 8004a84:	4b53      	ldr	r3, [pc, #332]	@ (8004bd4 <_strtod_l+0xaec>)
 8004a86:	429d      	cmp	r5, r3
 8004a88:	f040 80aa 	bne.w	8004be0 <_strtod_l+0xaf8>
 8004a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a8e:	4650      	mov	r0, sl
 8004a90:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004a94:	4659      	mov	r1, fp
 8004a96:	f002 f85f 	bl	8006b58 <__ulp>
 8004a9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a9e:	f7fb fdd9 	bl	8000654 <__aeabi_dmul>
 8004aa2:	4652      	mov	r2, sl
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	f7fb fc1f 	bl	80002e8 <__adddf3>
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4945      	ldr	r1, [pc, #276]	@ (8004bc4 <_strtod_l+0xadc>)
 8004aae:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd8 <_strtod_l+0xaf0>)
 8004ab0:	4019      	ands	r1, r3
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	4682      	mov	sl, r0
 8004ab6:	d942      	bls.n	8004b3e <_strtod_l+0xa56>
 8004ab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004aba:	4b43      	ldr	r3, [pc, #268]	@ (8004bc8 <_strtod_l+0xae0>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d103      	bne.n	8004ac8 <_strtod_l+0x9e0>
 8004ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f43f ad2b 	beq.w	800451e <_strtod_l+0x436>
 8004ac8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004acc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8004bc8 <_strtod_l+0xae0>
 8004ad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ad2:	9805      	ldr	r0, [sp, #20]
 8004ad4:	f001 fd0e 	bl	80064f4 <_Bfree>
 8004ad8:	4649      	mov	r1, r9
 8004ada:	9805      	ldr	r0, [sp, #20]
 8004adc:	f001 fd0a 	bl	80064f4 <_Bfree>
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	9805      	ldr	r0, [sp, #20]
 8004ae4:	f001 fd06 	bl	80064f4 <_Bfree>
 8004ae8:	4621      	mov	r1, r4
 8004aea:	9805      	ldr	r0, [sp, #20]
 8004aec:	f001 fd02 	bl	80064f4 <_Bfree>
 8004af0:	e618      	b.n	8004724 <_strtod_l+0x63c>
 8004af2:	f1ba 0f01 	cmp.w	sl, #1
 8004af6:	d103      	bne.n	8004b00 <_strtod_l+0xa18>
 8004af8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f43f ada5 	beq.w	800464a <_strtod_l+0x562>
 8004b00:	2200      	movs	r2, #0
 8004b02:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <_strtod_l+0xaf4>)
 8004b04:	2600      	movs	r6, #0
 8004b06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b0a:	4f30      	ldr	r7, [pc, #192]	@ (8004bcc <_strtod_l+0xae4>)
 8004b0c:	e7b3      	b.n	8004a76 <_strtod_l+0x98e>
 8004b0e:	2600      	movs	r6, #0
 8004b10:	4f2f      	ldr	r7, [pc, #188]	@ (8004bd0 <_strtod_l+0xae8>)
 8004b12:	e7ac      	b.n	8004a6e <_strtod_l+0x986>
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd0 <_strtod_l+0xae8>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f7fb fd9a 	bl	8000654 <__aeabi_dmul>
 8004b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b22:	4606      	mov	r6, r0
 8004b24:	460f      	mov	r7, r1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0a1      	beq.n	8004a6e <_strtod_l+0x986>
 8004b2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004b2e:	e7a2      	b.n	8004a76 <_strtod_l+0x98e>
 8004b30:	2200      	movs	r2, #0
 8004b32:	4b26      	ldr	r3, [pc, #152]	@ (8004bcc <_strtod_l+0xae4>)
 8004b34:	4616      	mov	r6, r2
 8004b36:	461f      	mov	r7, r3
 8004b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004b3c:	e79b      	b.n	8004a76 <_strtod_l+0x98e>
 8004b3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004b42:	9b08      	ldr	r3, [sp, #32]
 8004b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1c1      	bne.n	8004ad0 <_strtod_l+0x9e8>
 8004b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004b50:	0d1b      	lsrs	r3, r3, #20
 8004b52:	051b      	lsls	r3, r3, #20
 8004b54:	429d      	cmp	r5, r3
 8004b56:	d1bb      	bne.n	8004ad0 <_strtod_l+0x9e8>
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	f7fc f9b2 	bl	8000ec4 <__aeabi_d2lz>
 8004b60:	f7fb fd4a 	bl	80005f8 <__aeabi_l2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4630      	mov	r0, r6
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	f7fb fbba 	bl	80002e4 <__aeabi_dsub>
 8004b70:	460b      	mov	r3, r1
 8004b72:	4602      	mov	r2, r0
 8004b74:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004b78:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b7e:	ea46 060a 	orr.w	r6, r6, sl
 8004b82:	431e      	orrs	r6, r3
 8004b84:	d069      	beq.n	8004c5a <_strtod_l+0xb72>
 8004b86:	a30a      	add	r3, pc, #40	@ (adr r3, 8004bb0 <_strtod_l+0xac8>)
 8004b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8c:	f7fb ffd4 	bl	8000b38 <__aeabi_dcmplt>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	f47f accf 	bne.w	8004534 <_strtod_l+0x44c>
 8004b96:	a308      	add	r3, pc, #32	@ (adr r3, 8004bb8 <_strtod_l+0xad0>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ba0:	f7fb ffe8 	bl	8000b74 <__aeabi_dcmpgt>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d093      	beq.n	8004ad0 <_strtod_l+0x9e8>
 8004ba8:	e4c4      	b.n	8004534 <_strtod_l+0x44c>
 8004baa:	bf00      	nop
 8004bac:	f3af 8000 	nop.w
 8004bb0:	94a03595 	.word	0x94a03595
 8004bb4:	3fdfffff 	.word	0x3fdfffff
 8004bb8:	35afe535 	.word	0x35afe535
 8004bbc:	3fe00000 	.word	0x3fe00000
 8004bc0:	000fffff 	.word	0x000fffff
 8004bc4:	7ff00000 	.word	0x7ff00000
 8004bc8:	7fefffff 	.word	0x7fefffff
 8004bcc:	3ff00000 	.word	0x3ff00000
 8004bd0:	3fe00000 	.word	0x3fe00000
 8004bd4:	7fe00000 	.word	0x7fe00000
 8004bd8:	7c9fffff 	.word	0x7c9fffff
 8004bdc:	bff00000 	.word	0xbff00000
 8004be0:	9b08      	ldr	r3, [sp, #32]
 8004be2:	b323      	cbz	r3, 8004c2e <_strtod_l+0xb46>
 8004be4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8004be8:	d821      	bhi.n	8004c2e <_strtod_l+0xb46>
 8004bea:	a327      	add	r3, pc, #156	@ (adr r3, 8004c88 <_strtod_l+0xba0>)
 8004bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	4639      	mov	r1, r7
 8004bf4:	f7fb ffaa 	bl	8000b4c <__aeabi_dcmple>
 8004bf8:	b1a0      	cbz	r0, 8004c24 <_strtod_l+0xb3c>
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f7fb ffc3 	bl	8000b88 <__aeabi_d2uiz>
 8004c02:	2801      	cmp	r0, #1
 8004c04:	bf38      	it	cc
 8004c06:	2001      	movcc	r0, #1
 8004c08:	f7fb fcaa 	bl	8000560 <__aeabi_ui2d>
 8004c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	b9fb      	cbnz	r3, 8004c54 <_strtod_l+0xb6c>
 8004c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c18:	9014      	str	r0, [sp, #80]	@ 0x50
 8004c1a:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8004c20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004c24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004c26:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8004c2a:	1b5b      	subs	r3, r3, r5
 8004c2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8004c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c32:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8004c36:	f001 ff8f 	bl	8006b58 <__ulp>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4650      	mov	r0, sl
 8004c40:	4659      	mov	r1, fp
 8004c42:	f7fb fd07 	bl	8000654 <__aeabi_dmul>
 8004c46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c4a:	f7fb fb4d 	bl	80002e8 <__adddf3>
 8004c4e:	4682      	mov	sl, r0
 8004c50:	468b      	mov	fp, r1
 8004c52:	e776      	b.n	8004b42 <_strtod_l+0xa5a>
 8004c54:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8004c58:	e7e0      	b.n	8004c1c <_strtod_l+0xb34>
 8004c5a:	a30d      	add	r3, pc, #52	@ (adr r3, 8004c90 <_strtod_l+0xba8>)
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f7fb ff6a 	bl	8000b38 <__aeabi_dcmplt>
 8004c64:	e79e      	b.n	8004ba4 <_strtod_l+0xabc>
 8004c66:	2300      	movs	r3, #0
 8004c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c6c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	f7ff ba77 	b.w	8004162 <_strtod_l+0x7a>
 8004c74:	2a65      	cmp	r2, #101	@ 0x65
 8004c76:	f43f ab6e 	beq.w	8004356 <_strtod_l+0x26e>
 8004c7a:	2a45      	cmp	r2, #69	@ 0x45
 8004c7c:	f43f ab6b 	beq.w	8004356 <_strtod_l+0x26e>
 8004c80:	2301      	movs	r3, #1
 8004c82:	f7ff bba6 	b.w	80043d2 <_strtod_l+0x2ea>
 8004c86:	bf00      	nop
 8004c88:	ffc00000 	.word	0xffc00000
 8004c8c:	41dfffff 	.word	0x41dfffff
 8004c90:	94a03595 	.word	0x94a03595
 8004c94:	3fcfffff 	.word	0x3fcfffff

08004c98 <strtod>:
 8004c98:	460a      	mov	r2, r1
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	4802      	ldr	r0, [pc, #8]	@ (8004ca8 <strtod+0x10>)
 8004c9e:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <strtod+0x14>)
 8004ca0:	6800      	ldr	r0, [r0, #0]
 8004ca2:	f7ff ba21 	b.w	80040e8 <_strtod_l>
 8004ca6:	bf00      	nop
 8004ca8:	20000184 	.word	0x20000184
 8004cac:	20000018 	.word	0x20000018

08004cb0 <_fwalk_sglue>:
 8004cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	4688      	mov	r8, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	2600      	movs	r6, #0
 8004cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc4:	d505      	bpl.n	8004cd2 <_fwalk_sglue+0x22>
 8004cc6:	6824      	ldr	r4, [r4, #0]
 8004cc8:	2c00      	cmp	r4, #0
 8004cca:	d1f7      	bne.n	8004cbc <_fwalk_sglue+0xc>
 8004ccc:	4630      	mov	r0, r6
 8004cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd2:	89ab      	ldrh	r3, [r5, #12]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d907      	bls.n	8004ce8 <_fwalk_sglue+0x38>
 8004cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	d003      	beq.n	8004ce8 <_fwalk_sglue+0x38>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	4306      	orrs	r6, r0
 8004ce8:	3568      	adds	r5, #104	@ 0x68
 8004cea:	e7e9      	b.n	8004cc0 <_fwalk_sglue+0x10>

08004cec <strncmp>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	b16a      	cbz	r2, 8004d0c <strncmp+0x20>
 8004cf0:	3901      	subs	r1, #1
 8004cf2:	1884      	adds	r4, r0, r2
 8004cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d103      	bne.n	8004d08 <strncmp+0x1c>
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d001      	beq.n	8004d08 <strncmp+0x1c>
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	d1f5      	bne.n	8004cf4 <strncmp+0x8>
 8004d08:	1ad0      	subs	r0, r2, r3
 8004d0a:	bd10      	pop	{r4, pc}
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	e7fc      	b.n	8004d0a <strncmp+0x1e>

08004d10 <memset>:
 8004d10:	4603      	mov	r3, r0
 8004d12:	4402      	add	r2, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	2300      	movs	r3, #0
 8004d24:	4d05      	ldr	r5, [pc, #20]	@ (8004d3c <_close_r+0x1c>)
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc feb9 	bl	8001aa2 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000554 	.word	0x20000554

08004d40 <_lseek_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4d05      	ldr	r5, [pc, #20]	@ (8004d60 <_lseek_r+0x20>)
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fecb 	bl	8001aea <_lseek>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_lseek_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_lseek_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000554 	.word	0x20000554

08004d64 <_read_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4d05      	ldr	r5, [pc, #20]	@ (8004d84 <_read_r+0x20>)
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fe5c 	bl	8001a30 <_read>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_read_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_read_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20000554 	.word	0x20000554

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	2200      	movs	r2, #0
 8004d92:	4d05      	ldr	r5, [pc, #20]	@ (8004da8 <_write_r+0x20>)
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fe67 	bl	8001a6a <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20000554 	.word	0x20000554

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	@ (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000184 	.word	0x20000184

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	2600      	movs	r6, #0
 8004dbc:	4d0c      	ldr	r5, [pc, #48]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbe:	4c0d      	ldr	r4, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	f002 fc88 	bl	80076dc <_init>
 8004dcc:	2600      	movs	r6, #0
 8004dce:	4d0a      	ldr	r5, [pc, #40]	@ (8004df8 <__libc_init_array+0x40>)
 8004dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004dfc <__libc_init_array+0x44>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08007b74 	.word	0x08007b74
 8004df4:	08007b74 	.word	0x08007b74
 8004df8:	08007b74 	.word	0x08007b74
 8004dfc:	08007b78 	.word	0x08007b78

08004e00 <__retarget_lock_init_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_acquire_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <__retarget_lock_release_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <memcpy>:
 8004e06:	440a      	add	r2, r1
 8004e08:	4291      	cmp	r1, r2
 8004e0a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e0e:	d100      	bne.n	8004e12 <memcpy+0xc>
 8004e10:	4770      	bx	lr
 8004e12:	b510      	push	{r4, lr}
 8004e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e18:	4291      	cmp	r1, r2
 8004e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1e:	d1f9      	bne.n	8004e14 <memcpy+0xe>
 8004e20:	bd10      	pop	{r4, pc}
	...

08004e24 <nan>:
 8004e24:	2000      	movs	r0, #0
 8004e26:	4901      	ldr	r1, [pc, #4]	@ (8004e2c <nan+0x8>)
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	7ff80000 	.word	0x7ff80000

08004e30 <_free_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4605      	mov	r5, r0
 8004e34:	2900      	cmp	r1, #0
 8004e36:	d040      	beq.n	8004eba <_free_r+0x8a>
 8004e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3c:	1f0c      	subs	r4, r1, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfb8      	it	lt
 8004e42:	18e4      	addlt	r4, r4, r3
 8004e44:	f001 fb0a 	bl	800645c <__malloc_lock>
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <_free_r+0x8c>)
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	b933      	cbnz	r3, 8004e5c <_free_r+0x2c>
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6014      	str	r4, [r2, #0]
 8004e52:	4628      	mov	r0, r5
 8004e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e58:	f001 bb06 	b.w	8006468 <__malloc_unlock>
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d908      	bls.n	8004e72 <_free_r+0x42>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	1821      	adds	r1, r4, r0
 8004e64:	428b      	cmp	r3, r1
 8004e66:	bf01      	itttt	eq
 8004e68:	6819      	ldreq	r1, [r3, #0]
 8004e6a:	685b      	ldreq	r3, [r3, #4]
 8004e6c:	1809      	addeq	r1, r1, r0
 8004e6e:	6021      	streq	r1, [r4, #0]
 8004e70:	e7ed      	b.n	8004e4e <_free_r+0x1e>
 8004e72:	461a      	mov	r2, r3
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b10b      	cbz	r3, 8004e7c <_free_r+0x4c>
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d9fa      	bls.n	8004e72 <_free_r+0x42>
 8004e7c:	6811      	ldr	r1, [r2, #0]
 8004e7e:	1850      	adds	r0, r2, r1
 8004e80:	42a0      	cmp	r0, r4
 8004e82:	d10b      	bne.n	8004e9c <_free_r+0x6c>
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	4401      	add	r1, r0
 8004e88:	1850      	adds	r0, r2, r1
 8004e8a:	4283      	cmp	r3, r0
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	d1e0      	bne.n	8004e52 <_free_r+0x22>
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4408      	add	r0, r1
 8004e96:	6010      	str	r0, [r2, #0]
 8004e98:	6053      	str	r3, [r2, #4]
 8004e9a:	e7da      	b.n	8004e52 <_free_r+0x22>
 8004e9c:	d902      	bls.n	8004ea4 <_free_r+0x74>
 8004e9e:	230c      	movs	r3, #12
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	e7d6      	b.n	8004e52 <_free_r+0x22>
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	1821      	adds	r1, r4, r0
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf01      	itttt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	1809      	addeq	r1, r1, r0
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	6054      	str	r4, [r2, #4]
 8004eb8:	e7cb      	b.n	8004e52 <_free_r+0x22>
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	20000560 	.word	0x20000560

08004ec0 <rshift>:
 8004ec0:	6903      	ldr	r3, [r0, #16]
 8004ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ec6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004eca:	f100 0414 	add.w	r4, r0, #20
 8004ece:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004ed2:	dd46      	ble.n	8004f62 <rshift+0xa2>
 8004ed4:	f011 011f 	ands.w	r1, r1, #31
 8004ed8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004edc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004ee0:	d10c      	bne.n	8004efc <rshift+0x3c>
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	f100 0710 	add.w	r7, r0, #16
 8004ee8:	42b1      	cmp	r1, r6
 8004eea:	d335      	bcc.n	8004f58 <rshift+0x98>
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	1eea      	subs	r2, r5, #3
 8004ef2:	4296      	cmp	r6, r2
 8004ef4:	bf38      	it	cc
 8004ef6:	2300      	movcc	r3, #0
 8004ef8:	4423      	add	r3, r4
 8004efa:	e015      	b.n	8004f28 <rshift+0x68>
 8004efc:	46a1      	mov	r9, r4
 8004efe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004f02:	f1c1 0820 	rsb	r8, r1, #32
 8004f06:	40cf      	lsrs	r7, r1
 8004f08:	f105 0e04 	add.w	lr, r5, #4
 8004f0c:	4576      	cmp	r6, lr
 8004f0e:	46f4      	mov	ip, lr
 8004f10:	d816      	bhi.n	8004f40 <rshift+0x80>
 8004f12:	1a9a      	subs	r2, r3, r2
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	3a04      	subs	r2, #4
 8004f18:	3501      	adds	r5, #1
 8004f1a:	42ae      	cmp	r6, r5
 8004f1c:	bf38      	it	cc
 8004f1e:	2200      	movcc	r2, #0
 8004f20:	18a3      	adds	r3, r4, r2
 8004f22:	50a7      	str	r7, [r4, r2]
 8004f24:	b107      	cbz	r7, 8004f28 <rshift+0x68>
 8004f26:	3304      	adds	r3, #4
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	eba3 0204 	sub.w	r2, r3, r4
 8004f2e:	bf08      	it	eq
 8004f30:	2300      	moveq	r3, #0
 8004f32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004f36:	6102      	str	r2, [r0, #16]
 8004f38:	bf08      	it	eq
 8004f3a:	6143      	streq	r3, [r0, #20]
 8004f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f40:	f8dc c000 	ldr.w	ip, [ip]
 8004f44:	fa0c fc08 	lsl.w	ip, ip, r8
 8004f48:	ea4c 0707 	orr.w	r7, ip, r7
 8004f4c:	f849 7b04 	str.w	r7, [r9], #4
 8004f50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f54:	40cf      	lsrs	r7, r1
 8004f56:	e7d9      	b.n	8004f0c <rshift+0x4c>
 8004f58:	f851 cb04 	ldr.w	ip, [r1], #4
 8004f5c:	f847 cf04 	str.w	ip, [r7, #4]!
 8004f60:	e7c2      	b.n	8004ee8 <rshift+0x28>
 8004f62:	4623      	mov	r3, r4
 8004f64:	e7e0      	b.n	8004f28 <rshift+0x68>

08004f66 <__hexdig_fun>:
 8004f66:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8004f6a:	2b09      	cmp	r3, #9
 8004f6c:	d802      	bhi.n	8004f74 <__hexdig_fun+0xe>
 8004f6e:	3820      	subs	r0, #32
 8004f70:	b2c0      	uxtb	r0, r0
 8004f72:	4770      	bx	lr
 8004f74:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d801      	bhi.n	8004f80 <__hexdig_fun+0x1a>
 8004f7c:	3847      	subs	r0, #71	@ 0x47
 8004f7e:	e7f7      	b.n	8004f70 <__hexdig_fun+0xa>
 8004f80:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d801      	bhi.n	8004f8c <__hexdig_fun+0x26>
 8004f88:	3827      	subs	r0, #39	@ 0x27
 8004f8a:	e7f1      	b.n	8004f70 <__hexdig_fun+0xa>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	4770      	bx	lr

08004f90 <__gethex>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	468a      	mov	sl, r1
 8004f96:	4690      	mov	r8, r2
 8004f98:	b085      	sub	sp, #20
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	680b      	ldr	r3, [r1, #0]
 8004f9e:	9001      	str	r0, [sp, #4]
 8004fa0:	1c9c      	adds	r4, r3, #2
 8004fa2:	46a1      	mov	r9, r4
 8004fa4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004fa8:	2830      	cmp	r0, #48	@ 0x30
 8004faa:	d0fa      	beq.n	8004fa2 <__gethex+0x12>
 8004fac:	eba9 0303 	sub.w	r3, r9, r3
 8004fb0:	f1a3 0b02 	sub.w	fp, r3, #2
 8004fb4:	f7ff ffd7 	bl	8004f66 <__hexdig_fun>
 8004fb8:	4605      	mov	r5, r0
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d168      	bne.n	8005090 <__gethex+0x100>
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4648      	mov	r0, r9
 8004fc2:	499f      	ldr	r1, [pc, #636]	@ (8005240 <__gethex+0x2b0>)
 8004fc4:	f7ff fe92 	bl	8004cec <strncmp>
 8004fc8:	4607      	mov	r7, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d167      	bne.n	800509e <__gethex+0x10e>
 8004fce:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004fd2:	4626      	mov	r6, r4
 8004fd4:	f7ff ffc7 	bl	8004f66 <__hexdig_fun>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d062      	beq.n	80050a2 <__gethex+0x112>
 8004fdc:	4623      	mov	r3, r4
 8004fde:	7818      	ldrb	r0, [r3, #0]
 8004fe0:	4699      	mov	r9, r3
 8004fe2:	2830      	cmp	r0, #48	@ 0x30
 8004fe4:	f103 0301 	add.w	r3, r3, #1
 8004fe8:	d0f9      	beq.n	8004fde <__gethex+0x4e>
 8004fea:	f7ff ffbc 	bl	8004f66 <__hexdig_fun>
 8004fee:	fab0 f580 	clz	r5, r0
 8004ff2:	f04f 0b01 	mov.w	fp, #1
 8004ff6:	096d      	lsrs	r5, r5, #5
 8004ff8:	464a      	mov	r2, r9
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	7830      	ldrb	r0, [r6, #0]
 8004ffe:	3201      	adds	r2, #1
 8005000:	f7ff ffb1 	bl	8004f66 <__hexdig_fun>
 8005004:	2800      	cmp	r0, #0
 8005006:	d1f8      	bne.n	8004ffa <__gethex+0x6a>
 8005008:	2201      	movs	r2, #1
 800500a:	4630      	mov	r0, r6
 800500c:	498c      	ldr	r1, [pc, #560]	@ (8005240 <__gethex+0x2b0>)
 800500e:	f7ff fe6d 	bl	8004cec <strncmp>
 8005012:	2800      	cmp	r0, #0
 8005014:	d13f      	bne.n	8005096 <__gethex+0x106>
 8005016:	b944      	cbnz	r4, 800502a <__gethex+0x9a>
 8005018:	1c74      	adds	r4, r6, #1
 800501a:	4622      	mov	r2, r4
 800501c:	4616      	mov	r6, r2
 800501e:	7830      	ldrb	r0, [r6, #0]
 8005020:	3201      	adds	r2, #1
 8005022:	f7ff ffa0 	bl	8004f66 <__hexdig_fun>
 8005026:	2800      	cmp	r0, #0
 8005028:	d1f8      	bne.n	800501c <__gethex+0x8c>
 800502a:	1ba4      	subs	r4, r4, r6
 800502c:	00a7      	lsls	r7, r4, #2
 800502e:	7833      	ldrb	r3, [r6, #0]
 8005030:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005034:	2b50      	cmp	r3, #80	@ 0x50
 8005036:	d13e      	bne.n	80050b6 <__gethex+0x126>
 8005038:	7873      	ldrb	r3, [r6, #1]
 800503a:	2b2b      	cmp	r3, #43	@ 0x2b
 800503c:	d033      	beq.n	80050a6 <__gethex+0x116>
 800503e:	2b2d      	cmp	r3, #45	@ 0x2d
 8005040:	d034      	beq.n	80050ac <__gethex+0x11c>
 8005042:	2400      	movs	r4, #0
 8005044:	1c71      	adds	r1, r6, #1
 8005046:	7808      	ldrb	r0, [r1, #0]
 8005048:	f7ff ff8d 	bl	8004f66 <__hexdig_fun>
 800504c:	1e43      	subs	r3, r0, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b18      	cmp	r3, #24
 8005052:	d830      	bhi.n	80050b6 <__gethex+0x126>
 8005054:	f1a0 0210 	sub.w	r2, r0, #16
 8005058:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800505c:	f7ff ff83 	bl	8004f66 <__hexdig_fun>
 8005060:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8005064:	fa5f fc8c 	uxtb.w	ip, ip
 8005068:	f1bc 0f18 	cmp.w	ip, #24
 800506c:	f04f 030a 	mov.w	r3, #10
 8005070:	d91e      	bls.n	80050b0 <__gethex+0x120>
 8005072:	b104      	cbz	r4, 8005076 <__gethex+0xe6>
 8005074:	4252      	negs	r2, r2
 8005076:	4417      	add	r7, r2
 8005078:	f8ca 1000 	str.w	r1, [sl]
 800507c:	b1ed      	cbz	r5, 80050ba <__gethex+0x12a>
 800507e:	f1bb 0f00 	cmp.w	fp, #0
 8005082:	bf0c      	ite	eq
 8005084:	2506      	moveq	r5, #6
 8005086:	2500      	movne	r5, #0
 8005088:	4628      	mov	r0, r5
 800508a:	b005      	add	sp, #20
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	2500      	movs	r5, #0
 8005092:	462c      	mov	r4, r5
 8005094:	e7b0      	b.n	8004ff8 <__gethex+0x68>
 8005096:	2c00      	cmp	r4, #0
 8005098:	d1c7      	bne.n	800502a <__gethex+0x9a>
 800509a:	4627      	mov	r7, r4
 800509c:	e7c7      	b.n	800502e <__gethex+0x9e>
 800509e:	464e      	mov	r6, r9
 80050a0:	462f      	mov	r7, r5
 80050a2:	2501      	movs	r5, #1
 80050a4:	e7c3      	b.n	800502e <__gethex+0x9e>
 80050a6:	2400      	movs	r4, #0
 80050a8:	1cb1      	adds	r1, r6, #2
 80050aa:	e7cc      	b.n	8005046 <__gethex+0xb6>
 80050ac:	2401      	movs	r4, #1
 80050ae:	e7fb      	b.n	80050a8 <__gethex+0x118>
 80050b0:	fb03 0002 	mla	r0, r3, r2, r0
 80050b4:	e7ce      	b.n	8005054 <__gethex+0xc4>
 80050b6:	4631      	mov	r1, r6
 80050b8:	e7de      	b.n	8005078 <__gethex+0xe8>
 80050ba:	4629      	mov	r1, r5
 80050bc:	eba6 0309 	sub.w	r3, r6, r9
 80050c0:	3b01      	subs	r3, #1
 80050c2:	2b07      	cmp	r3, #7
 80050c4:	dc0a      	bgt.n	80050dc <__gethex+0x14c>
 80050c6:	9801      	ldr	r0, [sp, #4]
 80050c8:	f001 f9d4 	bl	8006474 <_Balloc>
 80050cc:	4604      	mov	r4, r0
 80050ce:	b940      	cbnz	r0, 80050e2 <__gethex+0x152>
 80050d0:	4602      	mov	r2, r0
 80050d2:	21e4      	movs	r1, #228	@ 0xe4
 80050d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005244 <__gethex+0x2b4>)
 80050d6:	485c      	ldr	r0, [pc, #368]	@ (8005248 <__gethex+0x2b8>)
 80050d8:	f002 f80a 	bl	80070f0 <__assert_func>
 80050dc:	3101      	adds	r1, #1
 80050de:	105b      	asrs	r3, r3, #1
 80050e0:	e7ef      	b.n	80050c2 <__gethex+0x132>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f100 0a14 	add.w	sl, r0, #20
 80050e8:	4655      	mov	r5, sl
 80050ea:	469b      	mov	fp, r3
 80050ec:	45b1      	cmp	r9, r6
 80050ee:	d337      	bcc.n	8005160 <__gethex+0x1d0>
 80050f0:	f845 bb04 	str.w	fp, [r5], #4
 80050f4:	eba5 050a 	sub.w	r5, r5, sl
 80050f8:	10ad      	asrs	r5, r5, #2
 80050fa:	6125      	str	r5, [r4, #16]
 80050fc:	4658      	mov	r0, fp
 80050fe:	f001 faab 	bl	8006658 <__hi0bits>
 8005102:	016d      	lsls	r5, r5, #5
 8005104:	f8d8 6000 	ldr.w	r6, [r8]
 8005108:	1a2d      	subs	r5, r5, r0
 800510a:	42b5      	cmp	r5, r6
 800510c:	dd54      	ble.n	80051b8 <__gethex+0x228>
 800510e:	1bad      	subs	r5, r5, r6
 8005110:	4629      	mov	r1, r5
 8005112:	4620      	mov	r0, r4
 8005114:	f001 fe33 	bl	8006d7e <__any_on>
 8005118:	4681      	mov	r9, r0
 800511a:	b178      	cbz	r0, 800513c <__gethex+0x1ac>
 800511c:	f04f 0901 	mov.w	r9, #1
 8005120:	1e6b      	subs	r3, r5, #1
 8005122:	1159      	asrs	r1, r3, #5
 8005124:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	fa09 f202 	lsl.w	r2, r9, r2
 8005130:	420a      	tst	r2, r1
 8005132:	d003      	beq.n	800513c <__gethex+0x1ac>
 8005134:	454b      	cmp	r3, r9
 8005136:	dc36      	bgt.n	80051a6 <__gethex+0x216>
 8005138:	f04f 0902 	mov.w	r9, #2
 800513c:	4629      	mov	r1, r5
 800513e:	4620      	mov	r0, r4
 8005140:	f7ff febe 	bl	8004ec0 <rshift>
 8005144:	442f      	add	r7, r5
 8005146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800514a:	42bb      	cmp	r3, r7
 800514c:	da42      	bge.n	80051d4 <__gethex+0x244>
 800514e:	4621      	mov	r1, r4
 8005150:	9801      	ldr	r0, [sp, #4]
 8005152:	f001 f9cf 	bl	80064f4 <_Bfree>
 8005156:	2300      	movs	r3, #0
 8005158:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800515a:	25a3      	movs	r5, #163	@ 0xa3
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	e793      	b.n	8005088 <__gethex+0xf8>
 8005160:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005164:	2a2e      	cmp	r2, #46	@ 0x2e
 8005166:	d012      	beq.n	800518e <__gethex+0x1fe>
 8005168:	2b20      	cmp	r3, #32
 800516a:	d104      	bne.n	8005176 <__gethex+0x1e6>
 800516c:	f845 bb04 	str.w	fp, [r5], #4
 8005170:	f04f 0b00 	mov.w	fp, #0
 8005174:	465b      	mov	r3, fp
 8005176:	7830      	ldrb	r0, [r6, #0]
 8005178:	9303      	str	r3, [sp, #12]
 800517a:	f7ff fef4 	bl	8004f66 <__hexdig_fun>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	f000 000f 	and.w	r0, r0, #15
 8005184:	4098      	lsls	r0, r3
 8005186:	ea4b 0b00 	orr.w	fp, fp, r0
 800518a:	3304      	adds	r3, #4
 800518c:	e7ae      	b.n	80050ec <__gethex+0x15c>
 800518e:	45b1      	cmp	r9, r6
 8005190:	d8ea      	bhi.n	8005168 <__gethex+0x1d8>
 8005192:	2201      	movs	r2, #1
 8005194:	4630      	mov	r0, r6
 8005196:	492a      	ldr	r1, [pc, #168]	@ (8005240 <__gethex+0x2b0>)
 8005198:	9303      	str	r3, [sp, #12]
 800519a:	f7ff fda7 	bl	8004cec <strncmp>
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d1e1      	bne.n	8005168 <__gethex+0x1d8>
 80051a4:	e7a2      	b.n	80050ec <__gethex+0x15c>
 80051a6:	4620      	mov	r0, r4
 80051a8:	1ea9      	subs	r1, r5, #2
 80051aa:	f001 fde8 	bl	8006d7e <__any_on>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0c2      	beq.n	8005138 <__gethex+0x1a8>
 80051b2:	f04f 0903 	mov.w	r9, #3
 80051b6:	e7c1      	b.n	800513c <__gethex+0x1ac>
 80051b8:	da09      	bge.n	80051ce <__gethex+0x23e>
 80051ba:	1b75      	subs	r5, r6, r5
 80051bc:	4621      	mov	r1, r4
 80051be:	462a      	mov	r2, r5
 80051c0:	9801      	ldr	r0, [sp, #4]
 80051c2:	f001 fbad 	bl	8006920 <__lshift>
 80051c6:	4604      	mov	r4, r0
 80051c8:	1b7f      	subs	r7, r7, r5
 80051ca:	f100 0a14 	add.w	sl, r0, #20
 80051ce:	f04f 0900 	mov.w	r9, #0
 80051d2:	e7b8      	b.n	8005146 <__gethex+0x1b6>
 80051d4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80051d8:	42bd      	cmp	r5, r7
 80051da:	dd6f      	ble.n	80052bc <__gethex+0x32c>
 80051dc:	1bed      	subs	r5, r5, r7
 80051de:	42ae      	cmp	r6, r5
 80051e0:	dc34      	bgt.n	800524c <__gethex+0x2bc>
 80051e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d022      	beq.n	8005230 <__gethex+0x2a0>
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d024      	beq.n	8005238 <__gethex+0x2a8>
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d115      	bne.n	800521e <__gethex+0x28e>
 80051f2:	42ae      	cmp	r6, r5
 80051f4:	d113      	bne.n	800521e <__gethex+0x28e>
 80051f6:	2e01      	cmp	r6, #1
 80051f8:	d10b      	bne.n	8005212 <__gethex+0x282>
 80051fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80051fe:	9a02      	ldr	r2, [sp, #8]
 8005200:	2562      	movs	r5, #98	@ 0x62
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	2301      	movs	r3, #1
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	f8ca 3000 	str.w	r3, [sl]
 800520c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800520e:	601c      	str	r4, [r3, #0]
 8005210:	e73a      	b.n	8005088 <__gethex+0xf8>
 8005212:	4620      	mov	r0, r4
 8005214:	1e71      	subs	r1, r6, #1
 8005216:	f001 fdb2 	bl	8006d7e <__any_on>
 800521a:	2800      	cmp	r0, #0
 800521c:	d1ed      	bne.n	80051fa <__gethex+0x26a>
 800521e:	4621      	mov	r1, r4
 8005220:	9801      	ldr	r0, [sp, #4]
 8005222:	f001 f967 	bl	80064f4 <_Bfree>
 8005226:	2300      	movs	r3, #0
 8005228:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800522a:	2550      	movs	r5, #80	@ 0x50
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	e72b      	b.n	8005088 <__gethex+0xf8>
 8005230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f3      	bne.n	800521e <__gethex+0x28e>
 8005236:	e7e0      	b.n	80051fa <__gethex+0x26a>
 8005238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1dd      	bne.n	80051fa <__gethex+0x26a>
 800523e:	e7ee      	b.n	800521e <__gethex+0x28e>
 8005240:	0800779a 	.word	0x0800779a
 8005244:	08007901 	.word	0x08007901
 8005248:	08007912 	.word	0x08007912
 800524c:	1e6f      	subs	r7, r5, #1
 800524e:	f1b9 0f00 	cmp.w	r9, #0
 8005252:	d130      	bne.n	80052b6 <__gethex+0x326>
 8005254:	b127      	cbz	r7, 8005260 <__gethex+0x2d0>
 8005256:	4639      	mov	r1, r7
 8005258:	4620      	mov	r0, r4
 800525a:	f001 fd90 	bl	8006d7e <__any_on>
 800525e:	4681      	mov	r9, r0
 8005260:	2301      	movs	r3, #1
 8005262:	4629      	mov	r1, r5
 8005264:	1b76      	subs	r6, r6, r5
 8005266:	2502      	movs	r5, #2
 8005268:	117a      	asrs	r2, r7, #5
 800526a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800526e:	f007 071f 	and.w	r7, r7, #31
 8005272:	40bb      	lsls	r3, r7
 8005274:	4213      	tst	r3, r2
 8005276:	4620      	mov	r0, r4
 8005278:	bf18      	it	ne
 800527a:	f049 0902 	orrne.w	r9, r9, #2
 800527e:	f7ff fe1f 	bl	8004ec0 <rshift>
 8005282:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005286:	f1b9 0f00 	cmp.w	r9, #0
 800528a:	d047      	beq.n	800531c <__gethex+0x38c>
 800528c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d015      	beq.n	80052c0 <__gethex+0x330>
 8005294:	2b03      	cmp	r3, #3
 8005296:	d017      	beq.n	80052c8 <__gethex+0x338>
 8005298:	2b01      	cmp	r3, #1
 800529a:	d109      	bne.n	80052b0 <__gethex+0x320>
 800529c:	f019 0f02 	tst.w	r9, #2
 80052a0:	d006      	beq.n	80052b0 <__gethex+0x320>
 80052a2:	f8da 3000 	ldr.w	r3, [sl]
 80052a6:	ea49 0903 	orr.w	r9, r9, r3
 80052aa:	f019 0f01 	tst.w	r9, #1
 80052ae:	d10e      	bne.n	80052ce <__gethex+0x33e>
 80052b0:	f045 0510 	orr.w	r5, r5, #16
 80052b4:	e032      	b.n	800531c <__gethex+0x38c>
 80052b6:	f04f 0901 	mov.w	r9, #1
 80052ba:	e7d1      	b.n	8005260 <__gethex+0x2d0>
 80052bc:	2501      	movs	r5, #1
 80052be:	e7e2      	b.n	8005286 <__gethex+0x2f6>
 80052c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052c2:	f1c3 0301 	rsb	r3, r3, #1
 80052c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80052c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <__gethex+0x320>
 80052ce:	f04f 0c00 	mov.w	ip, #0
 80052d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80052d6:	f104 0314 	add.w	r3, r4, #20
 80052da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80052de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80052ec:	d01b      	beq.n	8005326 <__gethex+0x396>
 80052ee:	3201      	adds	r2, #1
 80052f0:	6002      	str	r2, [r0, #0]
 80052f2:	2d02      	cmp	r5, #2
 80052f4:	f104 0314 	add.w	r3, r4, #20
 80052f8:	d13c      	bne.n	8005374 <__gethex+0x3e4>
 80052fa:	f8d8 2000 	ldr.w	r2, [r8]
 80052fe:	3a01      	subs	r2, #1
 8005300:	42b2      	cmp	r2, r6
 8005302:	d109      	bne.n	8005318 <__gethex+0x388>
 8005304:	2201      	movs	r2, #1
 8005306:	1171      	asrs	r1, r6, #5
 8005308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800530c:	f006 061f 	and.w	r6, r6, #31
 8005310:	fa02 f606 	lsl.w	r6, r2, r6
 8005314:	421e      	tst	r6, r3
 8005316:	d13a      	bne.n	800538e <__gethex+0x3fe>
 8005318:	f045 0520 	orr.w	r5, r5, #32
 800531c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800531e:	601c      	str	r4, [r3, #0]
 8005320:	9b02      	ldr	r3, [sp, #8]
 8005322:	601f      	str	r7, [r3, #0]
 8005324:	e6b0      	b.n	8005088 <__gethex+0xf8>
 8005326:	4299      	cmp	r1, r3
 8005328:	f843 cc04 	str.w	ip, [r3, #-4]
 800532c:	d8d9      	bhi.n	80052e2 <__gethex+0x352>
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	459b      	cmp	fp, r3
 8005332:	db17      	blt.n	8005364 <__gethex+0x3d4>
 8005334:	6861      	ldr	r1, [r4, #4]
 8005336:	9801      	ldr	r0, [sp, #4]
 8005338:	3101      	adds	r1, #1
 800533a:	f001 f89b 	bl	8006474 <_Balloc>
 800533e:	4681      	mov	r9, r0
 8005340:	b918      	cbnz	r0, 800534a <__gethex+0x3ba>
 8005342:	4602      	mov	r2, r0
 8005344:	2184      	movs	r1, #132	@ 0x84
 8005346:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <__gethex+0x41c>)
 8005348:	e6c5      	b.n	80050d6 <__gethex+0x146>
 800534a:	6922      	ldr	r2, [r4, #16]
 800534c:	f104 010c 	add.w	r1, r4, #12
 8005350:	3202      	adds	r2, #2
 8005352:	0092      	lsls	r2, r2, #2
 8005354:	300c      	adds	r0, #12
 8005356:	f7ff fd56 	bl	8004e06 <memcpy>
 800535a:	4621      	mov	r1, r4
 800535c:	9801      	ldr	r0, [sp, #4]
 800535e:	f001 f8c9 	bl	80064f4 <_Bfree>
 8005362:	464c      	mov	r4, r9
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	6122      	str	r2, [r4, #16]
 800536a:	2201      	movs	r2, #1
 800536c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005370:	615a      	str	r2, [r3, #20]
 8005372:	e7be      	b.n	80052f2 <__gethex+0x362>
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	455a      	cmp	r2, fp
 8005378:	dd0b      	ble.n	8005392 <__gethex+0x402>
 800537a:	2101      	movs	r1, #1
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fd9f 	bl	8004ec0 <rshift>
 8005382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005386:	3701      	adds	r7, #1
 8005388:	42bb      	cmp	r3, r7
 800538a:	f6ff aee0 	blt.w	800514e <__gethex+0x1be>
 800538e:	2501      	movs	r5, #1
 8005390:	e7c2      	b.n	8005318 <__gethex+0x388>
 8005392:	f016 061f 	ands.w	r6, r6, #31
 8005396:	d0fa      	beq.n	800538e <__gethex+0x3fe>
 8005398:	4453      	add	r3, sl
 800539a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800539e:	f001 f95b 	bl	8006658 <__hi0bits>
 80053a2:	f1c6 0620 	rsb	r6, r6, #32
 80053a6:	42b0      	cmp	r0, r6
 80053a8:	dbe7      	blt.n	800537a <__gethex+0x3ea>
 80053aa:	e7f0      	b.n	800538e <__gethex+0x3fe>
 80053ac:	08007901 	.word	0x08007901

080053b0 <L_shift>:
 80053b0:	f1c2 0208 	rsb	r2, r2, #8
 80053b4:	0092      	lsls	r2, r2, #2
 80053b6:	b570      	push	{r4, r5, r6, lr}
 80053b8:	f1c2 0620 	rsb	r6, r2, #32
 80053bc:	6843      	ldr	r3, [r0, #4]
 80053be:	6804      	ldr	r4, [r0, #0]
 80053c0:	fa03 f506 	lsl.w	r5, r3, r6
 80053c4:	432c      	orrs	r4, r5
 80053c6:	40d3      	lsrs	r3, r2
 80053c8:	6004      	str	r4, [r0, #0]
 80053ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80053ce:	4288      	cmp	r0, r1
 80053d0:	d3f4      	bcc.n	80053bc <L_shift+0xc>
 80053d2:	bd70      	pop	{r4, r5, r6, pc}

080053d4 <__match>:
 80053d4:	b530      	push	{r4, r5, lr}
 80053d6:	6803      	ldr	r3, [r0, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053de:	b914      	cbnz	r4, 80053e6 <__match+0x12>
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	2001      	movs	r0, #1
 80053e4:	bd30      	pop	{r4, r5, pc}
 80053e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ea:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80053ee:	2d19      	cmp	r5, #25
 80053f0:	bf98      	it	ls
 80053f2:	3220      	addls	r2, #32
 80053f4:	42a2      	cmp	r2, r4
 80053f6:	d0f0      	beq.n	80053da <__match+0x6>
 80053f8:	2000      	movs	r0, #0
 80053fa:	e7f3      	b.n	80053e4 <__match+0x10>

080053fc <__hexnan>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	2500      	movs	r5, #0
 8005402:	680b      	ldr	r3, [r1, #0]
 8005404:	4682      	mov	sl, r0
 8005406:	115e      	asrs	r6, r3, #5
 8005408:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800540c:	f013 031f 	ands.w	r3, r3, #31
 8005410:	bf18      	it	ne
 8005412:	3604      	addne	r6, #4
 8005414:	1f37      	subs	r7, r6, #4
 8005416:	4690      	mov	r8, r2
 8005418:	46b9      	mov	r9, r7
 800541a:	463c      	mov	r4, r7
 800541c:	46ab      	mov	fp, r5
 800541e:	b087      	sub	sp, #28
 8005420:	6801      	ldr	r1, [r0, #0]
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	f846 5c04 	str.w	r5, [r6, #-4]
 8005428:	9502      	str	r5, [sp, #8]
 800542a:	784a      	ldrb	r2, [r1, #1]
 800542c:	1c4b      	adds	r3, r1, #1
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	b342      	cbz	r2, 8005484 <__hexnan+0x88>
 8005432:	4610      	mov	r0, r2
 8005434:	9105      	str	r1, [sp, #20]
 8005436:	9204      	str	r2, [sp, #16]
 8005438:	f7ff fd95 	bl	8004f66 <__hexdig_fun>
 800543c:	2800      	cmp	r0, #0
 800543e:	d151      	bne.n	80054e4 <__hexnan+0xe8>
 8005440:	9a04      	ldr	r2, [sp, #16]
 8005442:	9905      	ldr	r1, [sp, #20]
 8005444:	2a20      	cmp	r2, #32
 8005446:	d818      	bhi.n	800547a <__hexnan+0x7e>
 8005448:	9b02      	ldr	r3, [sp, #8]
 800544a:	459b      	cmp	fp, r3
 800544c:	dd13      	ble.n	8005476 <__hexnan+0x7a>
 800544e:	454c      	cmp	r4, r9
 8005450:	d206      	bcs.n	8005460 <__hexnan+0x64>
 8005452:	2d07      	cmp	r5, #7
 8005454:	dc04      	bgt.n	8005460 <__hexnan+0x64>
 8005456:	462a      	mov	r2, r5
 8005458:	4649      	mov	r1, r9
 800545a:	4620      	mov	r0, r4
 800545c:	f7ff ffa8 	bl	80053b0 <L_shift>
 8005460:	4544      	cmp	r4, r8
 8005462:	d952      	bls.n	800550a <__hexnan+0x10e>
 8005464:	2300      	movs	r3, #0
 8005466:	f1a4 0904 	sub.w	r9, r4, #4
 800546a:	f844 3c04 	str.w	r3, [r4, #-4]
 800546e:	461d      	mov	r5, r3
 8005470:	464c      	mov	r4, r9
 8005472:	f8cd b008 	str.w	fp, [sp, #8]
 8005476:	9903      	ldr	r1, [sp, #12]
 8005478:	e7d7      	b.n	800542a <__hexnan+0x2e>
 800547a:	2a29      	cmp	r2, #41	@ 0x29
 800547c:	d157      	bne.n	800552e <__hexnan+0x132>
 800547e:	3102      	adds	r1, #2
 8005480:	f8ca 1000 	str.w	r1, [sl]
 8005484:	f1bb 0f00 	cmp.w	fp, #0
 8005488:	d051      	beq.n	800552e <__hexnan+0x132>
 800548a:	454c      	cmp	r4, r9
 800548c:	d206      	bcs.n	800549c <__hexnan+0xa0>
 800548e:	2d07      	cmp	r5, #7
 8005490:	dc04      	bgt.n	800549c <__hexnan+0xa0>
 8005492:	462a      	mov	r2, r5
 8005494:	4649      	mov	r1, r9
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff ff8a 	bl	80053b0 <L_shift>
 800549c:	4544      	cmp	r4, r8
 800549e:	d936      	bls.n	800550e <__hexnan+0x112>
 80054a0:	4623      	mov	r3, r4
 80054a2:	f1a8 0204 	sub.w	r2, r8, #4
 80054a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80054aa:	429f      	cmp	r7, r3
 80054ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80054b0:	d2f9      	bcs.n	80054a6 <__hexnan+0xaa>
 80054b2:	1b3b      	subs	r3, r7, r4
 80054b4:	f023 0303 	bic.w	r3, r3, #3
 80054b8:	3304      	adds	r3, #4
 80054ba:	3401      	adds	r4, #1
 80054bc:	3e03      	subs	r6, #3
 80054be:	42b4      	cmp	r4, r6
 80054c0:	bf88      	it	hi
 80054c2:	2304      	movhi	r3, #4
 80054c4:	2200      	movs	r2, #0
 80054c6:	4443      	add	r3, r8
 80054c8:	f843 2b04 	str.w	r2, [r3], #4
 80054cc:	429f      	cmp	r7, r3
 80054ce:	d2fb      	bcs.n	80054c8 <__hexnan+0xcc>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b91b      	cbnz	r3, 80054dc <__hexnan+0xe0>
 80054d4:	4547      	cmp	r7, r8
 80054d6:	d128      	bne.n	800552a <__hexnan+0x12e>
 80054d8:	2301      	movs	r3, #1
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	2005      	movs	r0, #5
 80054de:	b007      	add	sp, #28
 80054e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	2d08      	cmp	r5, #8
 80054e8:	f10b 0b01 	add.w	fp, fp, #1
 80054ec:	dd06      	ble.n	80054fc <__hexnan+0x100>
 80054ee:	4544      	cmp	r4, r8
 80054f0:	d9c1      	bls.n	8005476 <__hexnan+0x7a>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2501      	movs	r5, #1
 80054f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80054fa:	3c04      	subs	r4, #4
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	f000 000f 	and.w	r0, r0, #15
 8005502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005506:	6020      	str	r0, [r4, #0]
 8005508:	e7b5      	b.n	8005476 <__hexnan+0x7a>
 800550a:	2508      	movs	r5, #8
 800550c:	e7b3      	b.n	8005476 <__hexnan+0x7a>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0dd      	beq.n	80054d0 <__hexnan+0xd4>
 8005514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005518:	f1c3 0320 	rsb	r3, r3, #32
 800551c:	40da      	lsrs	r2, r3
 800551e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005522:	4013      	ands	r3, r2
 8005524:	f846 3c04 	str.w	r3, [r6, #-4]
 8005528:	e7d2      	b.n	80054d0 <__hexnan+0xd4>
 800552a:	3f04      	subs	r7, #4
 800552c:	e7d0      	b.n	80054d0 <__hexnan+0xd4>
 800552e:	2004      	movs	r0, #4
 8005530:	e7d5      	b.n	80054de <__hexnan+0xe2>

08005532 <__ssputs_r>:
 8005532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005536:	461f      	mov	r7, r3
 8005538:	688e      	ldr	r6, [r1, #8]
 800553a:	4682      	mov	sl, r0
 800553c:	42be      	cmp	r6, r7
 800553e:	460c      	mov	r4, r1
 8005540:	4690      	mov	r8, r2
 8005542:	680b      	ldr	r3, [r1, #0]
 8005544:	d82d      	bhi.n	80055a2 <__ssputs_r+0x70>
 8005546:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800554a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800554e:	d026      	beq.n	800559e <__ssputs_r+0x6c>
 8005550:	6965      	ldr	r5, [r4, #20]
 8005552:	6909      	ldr	r1, [r1, #16]
 8005554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005558:	eba3 0901 	sub.w	r9, r3, r1
 800555c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005560:	1c7b      	adds	r3, r7, #1
 8005562:	444b      	add	r3, r9
 8005564:	106d      	asrs	r5, r5, #1
 8005566:	429d      	cmp	r5, r3
 8005568:	bf38      	it	cc
 800556a:	461d      	movcc	r5, r3
 800556c:	0553      	lsls	r3, r2, #21
 800556e:	d527      	bpl.n	80055c0 <__ssputs_r+0x8e>
 8005570:	4629      	mov	r1, r5
 8005572:	f000 fb21 	bl	8005bb8 <_malloc_r>
 8005576:	4606      	mov	r6, r0
 8005578:	b360      	cbz	r0, 80055d4 <__ssputs_r+0xa2>
 800557a:	464a      	mov	r2, r9
 800557c:	6921      	ldr	r1, [r4, #16]
 800557e:	f7ff fc42 	bl	8004e06 <memcpy>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	6126      	str	r6, [r4, #16]
 8005590:	444e      	add	r6, r9
 8005592:	6026      	str	r6, [r4, #0]
 8005594:	463e      	mov	r6, r7
 8005596:	6165      	str	r5, [r4, #20]
 8005598:	eba5 0509 	sub.w	r5, r5, r9
 800559c:	60a5      	str	r5, [r4, #8]
 800559e:	42be      	cmp	r6, r7
 80055a0:	d900      	bls.n	80055a4 <__ssputs_r+0x72>
 80055a2:	463e      	mov	r6, r7
 80055a4:	4632      	mov	r2, r6
 80055a6:	4641      	mov	r1, r8
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	f001 fd68 	bl	800707e <memmove>
 80055ae:	2000      	movs	r0, #0
 80055b0:	68a3      	ldr	r3, [r4, #8]
 80055b2:	1b9b      	subs	r3, r3, r6
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	4433      	add	r3, r6
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c0:	462a      	mov	r2, r5
 80055c2:	f001 fc35 	bl	8006e30 <_realloc_r>
 80055c6:	4606      	mov	r6, r0
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d1e0      	bne.n	800558e <__ssputs_r+0x5c>
 80055cc:	4650      	mov	r0, sl
 80055ce:	6921      	ldr	r1, [r4, #16]
 80055d0:	f7ff fc2e 	bl	8004e30 <_free_r>
 80055d4:	230c      	movs	r3, #12
 80055d6:	f8ca 3000 	str.w	r3, [sl]
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	e7e9      	b.n	80055bc <__ssputs_r+0x8a>

080055e8 <_svfiprintf_r>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	4698      	mov	r8, r3
 80055ee:	898b      	ldrh	r3, [r1, #12]
 80055f0:	4607      	mov	r7, r0
 80055f2:	061b      	lsls	r3, r3, #24
 80055f4:	460d      	mov	r5, r1
 80055f6:	4614      	mov	r4, r2
 80055f8:	b09d      	sub	sp, #116	@ 0x74
 80055fa:	d510      	bpl.n	800561e <_svfiprintf_r+0x36>
 80055fc:	690b      	ldr	r3, [r1, #16]
 80055fe:	b973      	cbnz	r3, 800561e <_svfiprintf_r+0x36>
 8005600:	2140      	movs	r1, #64	@ 0x40
 8005602:	f000 fad9 	bl	8005bb8 <_malloc_r>
 8005606:	6028      	str	r0, [r5, #0]
 8005608:	6128      	str	r0, [r5, #16]
 800560a:	b930      	cbnz	r0, 800561a <_svfiprintf_r+0x32>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005614:	b01d      	add	sp, #116	@ 0x74
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	2340      	movs	r3, #64	@ 0x40
 800561c:	616b      	str	r3, [r5, #20]
 800561e:	2300      	movs	r3, #0
 8005620:	9309      	str	r3, [sp, #36]	@ 0x24
 8005622:	2320      	movs	r3, #32
 8005624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005628:	2330      	movs	r3, #48	@ 0x30
 800562a:	f04f 0901 	mov.w	r9, #1
 800562e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005632:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80057cc <_svfiprintf_r+0x1e4>
 8005636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800563a:	4623      	mov	r3, r4
 800563c:	469a      	mov	sl, r3
 800563e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005642:	b10a      	cbz	r2, 8005648 <_svfiprintf_r+0x60>
 8005644:	2a25      	cmp	r2, #37	@ 0x25
 8005646:	d1f9      	bne.n	800563c <_svfiprintf_r+0x54>
 8005648:	ebba 0b04 	subs.w	fp, sl, r4
 800564c:	d00b      	beq.n	8005666 <_svfiprintf_r+0x7e>
 800564e:	465b      	mov	r3, fp
 8005650:	4622      	mov	r2, r4
 8005652:	4629      	mov	r1, r5
 8005654:	4638      	mov	r0, r7
 8005656:	f7ff ff6c 	bl	8005532 <__ssputs_r>
 800565a:	3001      	adds	r0, #1
 800565c:	f000 80a7 	beq.w	80057ae <_svfiprintf_r+0x1c6>
 8005660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005662:	445a      	add	r2, fp
 8005664:	9209      	str	r2, [sp, #36]	@ 0x24
 8005666:	f89a 3000 	ldrb.w	r3, [sl]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 809f 	beq.w	80057ae <_svfiprintf_r+0x1c6>
 8005670:	2300      	movs	r3, #0
 8005672:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567a:	f10a 0a01 	add.w	sl, sl, #1
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	9307      	str	r3, [sp, #28]
 8005682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005686:	931a      	str	r3, [sp, #104]	@ 0x68
 8005688:	4654      	mov	r4, sl
 800568a:	2205      	movs	r2, #5
 800568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005690:	484e      	ldr	r0, [pc, #312]	@ (80057cc <_svfiprintf_r+0x1e4>)
 8005692:	f001 fd1f 	bl	80070d4 <memchr>
 8005696:	9a04      	ldr	r2, [sp, #16]
 8005698:	b9d8      	cbnz	r0, 80056d2 <_svfiprintf_r+0xea>
 800569a:	06d0      	lsls	r0, r2, #27
 800569c:	bf44      	itt	mi
 800569e:	2320      	movmi	r3, #32
 80056a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056a4:	0711      	lsls	r1, r2, #28
 80056a6:	bf44      	itt	mi
 80056a8:	232b      	movmi	r3, #43	@ 0x2b
 80056aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ae:	f89a 3000 	ldrb.w	r3, [sl]
 80056b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b4:	d015      	beq.n	80056e2 <_svfiprintf_r+0xfa>
 80056b6:	4654      	mov	r4, sl
 80056b8:	2000      	movs	r0, #0
 80056ba:	f04f 0c0a 	mov.w	ip, #10
 80056be:	9a07      	ldr	r2, [sp, #28]
 80056c0:	4621      	mov	r1, r4
 80056c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c6:	3b30      	subs	r3, #48	@ 0x30
 80056c8:	2b09      	cmp	r3, #9
 80056ca:	d94b      	bls.n	8005764 <_svfiprintf_r+0x17c>
 80056cc:	b1b0      	cbz	r0, 80056fc <_svfiprintf_r+0x114>
 80056ce:	9207      	str	r2, [sp, #28]
 80056d0:	e014      	b.n	80056fc <_svfiprintf_r+0x114>
 80056d2:	eba0 0308 	sub.w	r3, r0, r8
 80056d6:	fa09 f303 	lsl.w	r3, r9, r3
 80056da:	4313      	orrs	r3, r2
 80056dc:	46a2      	mov	sl, r4
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	e7d2      	b.n	8005688 <_svfiprintf_r+0xa0>
 80056e2:	9b03      	ldr	r3, [sp, #12]
 80056e4:	1d19      	adds	r1, r3, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	9103      	str	r1, [sp, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfbb      	ittet	lt
 80056ee:	425b      	neglt	r3, r3
 80056f0:	f042 0202 	orrlt.w	r2, r2, #2
 80056f4:	9307      	strge	r3, [sp, #28]
 80056f6:	9307      	strlt	r3, [sp, #28]
 80056f8:	bfb8      	it	lt
 80056fa:	9204      	strlt	r2, [sp, #16]
 80056fc:	7823      	ldrb	r3, [r4, #0]
 80056fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005700:	d10a      	bne.n	8005718 <_svfiprintf_r+0x130>
 8005702:	7863      	ldrb	r3, [r4, #1]
 8005704:	2b2a      	cmp	r3, #42	@ 0x2a
 8005706:	d132      	bne.n	800576e <_svfiprintf_r+0x186>
 8005708:	9b03      	ldr	r3, [sp, #12]
 800570a:	3402      	adds	r4, #2
 800570c:	1d1a      	adds	r2, r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	9203      	str	r2, [sp, #12]
 8005712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80057d0 <_svfiprintf_r+0x1e8>
 800571c:	2203      	movs	r2, #3
 800571e:	4650      	mov	r0, sl
 8005720:	7821      	ldrb	r1, [r4, #0]
 8005722:	f001 fcd7 	bl	80070d4 <memchr>
 8005726:	b138      	cbz	r0, 8005738 <_svfiprintf_r+0x150>
 8005728:	2240      	movs	r2, #64	@ 0x40
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	eba0 000a 	sub.w	r0, r0, sl
 8005730:	4082      	lsls	r2, r0
 8005732:	4313      	orrs	r3, r2
 8005734:	3401      	adds	r4, #1
 8005736:	9304      	str	r3, [sp, #16]
 8005738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573c:	2206      	movs	r2, #6
 800573e:	4825      	ldr	r0, [pc, #148]	@ (80057d4 <_svfiprintf_r+0x1ec>)
 8005740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005744:	f001 fcc6 	bl	80070d4 <memchr>
 8005748:	2800      	cmp	r0, #0
 800574a:	d036      	beq.n	80057ba <_svfiprintf_r+0x1d2>
 800574c:	4b22      	ldr	r3, [pc, #136]	@ (80057d8 <_svfiprintf_r+0x1f0>)
 800574e:	bb1b      	cbnz	r3, 8005798 <_svfiprintf_r+0x1b0>
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	3307      	adds	r3, #7
 8005754:	f023 0307 	bic.w	r3, r3, #7
 8005758:	3308      	adds	r3, #8
 800575a:	9303      	str	r3, [sp, #12]
 800575c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800575e:	4433      	add	r3, r6
 8005760:	9309      	str	r3, [sp, #36]	@ 0x24
 8005762:	e76a      	b.n	800563a <_svfiprintf_r+0x52>
 8005764:	460c      	mov	r4, r1
 8005766:	2001      	movs	r0, #1
 8005768:	fb0c 3202 	mla	r2, ip, r2, r3
 800576c:	e7a8      	b.n	80056c0 <_svfiprintf_r+0xd8>
 800576e:	2300      	movs	r3, #0
 8005770:	f04f 0c0a 	mov.w	ip, #10
 8005774:	4619      	mov	r1, r3
 8005776:	3401      	adds	r4, #1
 8005778:	9305      	str	r3, [sp, #20]
 800577a:	4620      	mov	r0, r4
 800577c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005780:	3a30      	subs	r2, #48	@ 0x30
 8005782:	2a09      	cmp	r2, #9
 8005784:	d903      	bls.n	800578e <_svfiprintf_r+0x1a6>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0c6      	beq.n	8005718 <_svfiprintf_r+0x130>
 800578a:	9105      	str	r1, [sp, #20]
 800578c:	e7c4      	b.n	8005718 <_svfiprintf_r+0x130>
 800578e:	4604      	mov	r4, r0
 8005790:	2301      	movs	r3, #1
 8005792:	fb0c 2101 	mla	r1, ip, r1, r2
 8005796:	e7f0      	b.n	800577a <_svfiprintf_r+0x192>
 8005798:	ab03      	add	r3, sp, #12
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	462a      	mov	r2, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	4b0e      	ldr	r3, [pc, #56]	@ (80057dc <_svfiprintf_r+0x1f4>)
 80057a2:	a904      	add	r1, sp, #16
 80057a4:	f3af 8000 	nop.w
 80057a8:	1c42      	adds	r2, r0, #1
 80057aa:	4606      	mov	r6, r0
 80057ac:	d1d6      	bne.n	800575c <_svfiprintf_r+0x174>
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	065b      	lsls	r3, r3, #25
 80057b2:	f53f af2d 	bmi.w	8005610 <_svfiprintf_r+0x28>
 80057b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057b8:	e72c      	b.n	8005614 <_svfiprintf_r+0x2c>
 80057ba:	ab03      	add	r3, sp, #12
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	462a      	mov	r2, r5
 80057c0:	4638      	mov	r0, r7
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <_svfiprintf_r+0x1f4>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	f000 fafb 	bl	8005dc0 <_printf_i>
 80057ca:	e7ed      	b.n	80057a8 <_svfiprintf_r+0x1c0>
 80057cc:	08007972 	.word	0x08007972
 80057d0:	08007978 	.word	0x08007978
 80057d4:	0800797c 	.word	0x0800797c
 80057d8:	00000000 	.word	0x00000000
 80057dc:	08005533 	.word	0x08005533

080057e0 <_sungetc_r>:
 80057e0:	b538      	push	{r3, r4, r5, lr}
 80057e2:	1c4b      	adds	r3, r1, #1
 80057e4:	4614      	mov	r4, r2
 80057e6:	d103      	bne.n	80057f0 <_sungetc_r+0x10>
 80057e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80057ec:	4628      	mov	r0, r5
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
 80057f0:	8993      	ldrh	r3, [r2, #12]
 80057f2:	b2cd      	uxtb	r5, r1
 80057f4:	f023 0320 	bic.w	r3, r3, #32
 80057f8:	8193      	strh	r3, [r2, #12]
 80057fa:	6853      	ldr	r3, [r2, #4]
 80057fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057fe:	b18a      	cbz	r2, 8005824 <_sungetc_r+0x44>
 8005800:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005802:	429a      	cmp	r2, r3
 8005804:	dd08      	ble.n	8005818 <_sungetc_r+0x38>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	1e5a      	subs	r2, r3, #1
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	3301      	adds	r3, #1
 8005814:	6063      	str	r3, [r4, #4]
 8005816:	e7e9      	b.n	80057ec <_sungetc_r+0xc>
 8005818:	4621      	mov	r1, r4
 800581a:	f001 fad1 	bl	8006dc0 <__submore>
 800581e:	2800      	cmp	r0, #0
 8005820:	d0f1      	beq.n	8005806 <_sungetc_r+0x26>
 8005822:	e7e1      	b.n	80057e8 <_sungetc_r+0x8>
 8005824:	6921      	ldr	r1, [r4, #16]
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	b141      	cbz	r1, 800583c <_sungetc_r+0x5c>
 800582a:	4291      	cmp	r1, r2
 800582c:	d206      	bcs.n	800583c <_sungetc_r+0x5c>
 800582e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005832:	42a9      	cmp	r1, r5
 8005834:	d102      	bne.n	800583c <_sungetc_r+0x5c>
 8005836:	3a01      	subs	r2, #1
 8005838:	6022      	str	r2, [r4, #0]
 800583a:	e7ea      	b.n	8005812 <_sungetc_r+0x32>
 800583c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8005840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005844:	6363      	str	r3, [r4, #52]	@ 0x34
 8005846:	2303      	movs	r3, #3
 8005848:	63a3      	str	r3, [r4, #56]	@ 0x38
 800584a:	4623      	mov	r3, r4
 800584c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	2301      	movs	r3, #1
 8005854:	e7de      	b.n	8005814 <_sungetc_r+0x34>

08005856 <__ssrefill_r>:
 8005856:	b510      	push	{r4, lr}
 8005858:	460c      	mov	r4, r1
 800585a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800585c:	b169      	cbz	r1, 800587a <__ssrefill_r+0x24>
 800585e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005862:	4299      	cmp	r1, r3
 8005864:	d001      	beq.n	800586a <__ssrefill_r+0x14>
 8005866:	f7ff fae3 	bl	8004e30 <_free_r>
 800586a:	2000      	movs	r0, #0
 800586c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800586e:	6360      	str	r0, [r4, #52]	@ 0x34
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	b113      	cbz	r3, 800587a <__ssrefill_r+0x24>
 8005874:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	bd10      	pop	{r4, pc}
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	2300      	movs	r3, #0
 8005884:	6063      	str	r3, [r4, #4]
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0320 	orr.w	r3, r3, #32
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7f3      	b.n	8005878 <__ssrefill_r+0x22>

08005890 <__ssvfiscanf_r>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	460c      	mov	r4, r1
 8005896:	2100      	movs	r1, #0
 8005898:	4606      	mov	r6, r0
 800589a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800589e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80058a2:	49aa      	ldr	r1, [pc, #680]	@ (8005b4c <__ssvfiscanf_r+0x2bc>)
 80058a4:	f10d 0804 	add.w	r8, sp, #4
 80058a8:	91a0      	str	r1, [sp, #640]	@ 0x280
 80058aa:	49a9      	ldr	r1, [pc, #676]	@ (8005b50 <__ssvfiscanf_r+0x2c0>)
 80058ac:	4fa9      	ldr	r7, [pc, #676]	@ (8005b54 <__ssvfiscanf_r+0x2c4>)
 80058ae:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80058b2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	7813      	ldrb	r3, [r2, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8159 	beq.w	8005b70 <__ssvfiscanf_r+0x2e0>
 80058be:	5cf9      	ldrb	r1, [r7, r3]
 80058c0:	1c55      	adds	r5, r2, #1
 80058c2:	f011 0108 	ands.w	r1, r1, #8
 80058c6:	d019      	beq.n	80058fc <__ssvfiscanf_r+0x6c>
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dd0f      	ble.n	80058ee <__ssvfiscanf_r+0x5e>
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	5cba      	ldrb	r2, [r7, r2]
 80058d4:	0712      	lsls	r2, r2, #28
 80058d6:	d401      	bmi.n	80058dc <__ssvfiscanf_r+0x4c>
 80058d8:	462a      	mov	r2, r5
 80058da:	e7ec      	b.n	80058b6 <__ssvfiscanf_r+0x26>
 80058dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80058de:	3301      	adds	r3, #1
 80058e0:	3201      	adds	r2, #1
 80058e2:	9245      	str	r2, [sp, #276]	@ 0x114
 80058e4:	6862      	ldr	r2, [r4, #4]
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	3a01      	subs	r2, #1
 80058ea:	6062      	str	r2, [r4, #4]
 80058ec:	e7ec      	b.n	80058c8 <__ssvfiscanf_r+0x38>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4630      	mov	r0, r6
 80058f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80058f4:	4798      	blx	r3
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d0e9      	beq.n	80058ce <__ssvfiscanf_r+0x3e>
 80058fa:	e7ed      	b.n	80058d8 <__ssvfiscanf_r+0x48>
 80058fc:	2b25      	cmp	r3, #37	@ 0x25
 80058fe:	d012      	beq.n	8005926 <__ssvfiscanf_r+0x96>
 8005900:	4699      	mov	r9, r3
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f340 8094 	ble.w	8005a32 <__ssvfiscanf_r+0x1a2>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	7813      	ldrb	r3, [r2, #0]
 800590e:	454b      	cmp	r3, r9
 8005910:	f040 812e 	bne.w	8005b70 <__ssvfiscanf_r+0x2e0>
 8005914:	6863      	ldr	r3, [r4, #4]
 8005916:	3201      	adds	r2, #1
 8005918:	3b01      	subs	r3, #1
 800591a:	6063      	str	r3, [r4, #4]
 800591c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800591e:	6022      	str	r2, [r4, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	9345      	str	r3, [sp, #276]	@ 0x114
 8005924:	e7d8      	b.n	80058d8 <__ssvfiscanf_r+0x48>
 8005926:	9141      	str	r1, [sp, #260]	@ 0x104
 8005928:	9143      	str	r1, [sp, #268]	@ 0x10c
 800592a:	7853      	ldrb	r3, [r2, #1]
 800592c:	2b2a      	cmp	r3, #42	@ 0x2a
 800592e:	bf04      	itt	eq
 8005930:	2310      	moveq	r3, #16
 8005932:	1c95      	addeq	r5, r2, #2
 8005934:	f04f 020a 	mov.w	r2, #10
 8005938:	bf08      	it	eq
 800593a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800593c:	46a9      	mov	r9, r5
 800593e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005942:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005946:	2b09      	cmp	r3, #9
 8005948:	d91e      	bls.n	8005988 <__ssvfiscanf_r+0xf8>
 800594a:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8005b58 <__ssvfiscanf_r+0x2c8>
 800594e:	2203      	movs	r2, #3
 8005950:	4650      	mov	r0, sl
 8005952:	f001 fbbf 	bl	80070d4 <memchr>
 8005956:	b138      	cbz	r0, 8005968 <__ssvfiscanf_r+0xd8>
 8005958:	2301      	movs	r3, #1
 800595a:	464d      	mov	r5, r9
 800595c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800595e:	eba0 000a 	sub.w	r0, r0, sl
 8005962:	4083      	lsls	r3, r0
 8005964:	4313      	orrs	r3, r2
 8005966:	9341      	str	r3, [sp, #260]	@ 0x104
 8005968:	f815 3b01 	ldrb.w	r3, [r5], #1
 800596c:	2b78      	cmp	r3, #120	@ 0x78
 800596e:	d806      	bhi.n	800597e <__ssvfiscanf_r+0xee>
 8005970:	2b57      	cmp	r3, #87	@ 0x57
 8005972:	d810      	bhi.n	8005996 <__ssvfiscanf_r+0x106>
 8005974:	2b25      	cmp	r3, #37	@ 0x25
 8005976:	d0c3      	beq.n	8005900 <__ssvfiscanf_r+0x70>
 8005978:	d856      	bhi.n	8005a28 <__ssvfiscanf_r+0x198>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d064      	beq.n	8005a48 <__ssvfiscanf_r+0x1b8>
 800597e:	2303      	movs	r3, #3
 8005980:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005982:	230a      	movs	r3, #10
 8005984:	9342      	str	r3, [sp, #264]	@ 0x108
 8005986:	e077      	b.n	8005a78 <__ssvfiscanf_r+0x1e8>
 8005988:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800598a:	464d      	mov	r5, r9
 800598c:	fb02 1103 	mla	r1, r2, r3, r1
 8005990:	3930      	subs	r1, #48	@ 0x30
 8005992:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005994:	e7d2      	b.n	800593c <__ssvfiscanf_r+0xac>
 8005996:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800599a:	2a20      	cmp	r2, #32
 800599c:	d8ef      	bhi.n	800597e <__ssvfiscanf_r+0xee>
 800599e:	a101      	add	r1, pc, #4	@ (adr r1, 80059a4 <__ssvfiscanf_r+0x114>)
 80059a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059a4:	08005a57 	.word	0x08005a57
 80059a8:	0800597f 	.word	0x0800597f
 80059ac:	0800597f 	.word	0x0800597f
 80059b0:	08005ab1 	.word	0x08005ab1
 80059b4:	0800597f 	.word	0x0800597f
 80059b8:	0800597f 	.word	0x0800597f
 80059bc:	0800597f 	.word	0x0800597f
 80059c0:	0800597f 	.word	0x0800597f
 80059c4:	0800597f 	.word	0x0800597f
 80059c8:	0800597f 	.word	0x0800597f
 80059cc:	0800597f 	.word	0x0800597f
 80059d0:	08005ac7 	.word	0x08005ac7
 80059d4:	08005aad 	.word	0x08005aad
 80059d8:	08005a2f 	.word	0x08005a2f
 80059dc:	08005a2f 	.word	0x08005a2f
 80059e0:	08005a2f 	.word	0x08005a2f
 80059e4:	0800597f 	.word	0x0800597f
 80059e8:	08005a69 	.word	0x08005a69
 80059ec:	0800597f 	.word	0x0800597f
 80059f0:	0800597f 	.word	0x0800597f
 80059f4:	0800597f 	.word	0x0800597f
 80059f8:	0800597f 	.word	0x0800597f
 80059fc:	08005ad7 	.word	0x08005ad7
 8005a00:	08005a71 	.word	0x08005a71
 8005a04:	08005a4f 	.word	0x08005a4f
 8005a08:	0800597f 	.word	0x0800597f
 8005a0c:	0800597f 	.word	0x0800597f
 8005a10:	08005ad3 	.word	0x08005ad3
 8005a14:	0800597f 	.word	0x0800597f
 8005a18:	08005aad 	.word	0x08005aad
 8005a1c:	0800597f 	.word	0x0800597f
 8005a20:	0800597f 	.word	0x0800597f
 8005a24:	08005a57 	.word	0x08005a57
 8005a28:	3b45      	subs	r3, #69	@ 0x45
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d8a7      	bhi.n	800597e <__ssvfiscanf_r+0xee>
 8005a2e:	2305      	movs	r3, #5
 8005a30:	e021      	b.n	8005a76 <__ssvfiscanf_r+0x1e6>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4630      	mov	r0, r6
 8005a36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005a38:	4798      	blx	r3
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f43f af65 	beq.w	800590a <__ssvfiscanf_r+0x7a>
 8005a40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f040 808c 	bne.w	8005b60 <__ssvfiscanf_r+0x2d0>
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a4c:	e08c      	b.n	8005b68 <__ssvfiscanf_r+0x2d8>
 8005a4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005a50:	f042 0220 	orr.w	r2, r2, #32
 8005a54:	9241      	str	r2, [sp, #260]	@ 0x104
 8005a56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8005a5e:	2210      	movs	r2, #16
 8005a60:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a62:	9242      	str	r2, [sp, #264]	@ 0x108
 8005a64:	d902      	bls.n	8005a6c <__ssvfiscanf_r+0x1dc>
 8005a66:	e005      	b.n	8005a74 <__ssvfiscanf_r+0x1e4>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e002      	b.n	8005a76 <__ssvfiscanf_r+0x1e6>
 8005a70:	2308      	movs	r3, #8
 8005a72:	9342      	str	r3, [sp, #264]	@ 0x108
 8005a74:	2304      	movs	r3, #4
 8005a76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005a78:	6863      	ldr	r3, [r4, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd39      	ble.n	8005af2 <__ssvfiscanf_r+0x262>
 8005a7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005a80:	0659      	lsls	r1, r3, #25
 8005a82:	d404      	bmi.n	8005a8e <__ssvfiscanf_r+0x1fe>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	781a      	ldrb	r2, [r3, #0]
 8005a88:	5cba      	ldrb	r2, [r7, r2]
 8005a8a:	0712      	lsls	r2, r2, #28
 8005a8c:	d438      	bmi.n	8005b00 <__ssvfiscanf_r+0x270>
 8005a8e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	dc47      	bgt.n	8005b24 <__ssvfiscanf_r+0x294>
 8005a94:	466b      	mov	r3, sp
 8005a96:	4622      	mov	r2, r4
 8005a98:	4630      	mov	r0, r6
 8005a9a:	a941      	add	r1, sp, #260	@ 0x104
 8005a9c:	f000 fab0 	bl	8006000 <_scanf_chars>
 8005aa0:	2801      	cmp	r0, #1
 8005aa2:	d065      	beq.n	8005b70 <__ssvfiscanf_r+0x2e0>
 8005aa4:	2802      	cmp	r0, #2
 8005aa6:	f47f af17 	bne.w	80058d8 <__ssvfiscanf_r+0x48>
 8005aaa:	e7c9      	b.n	8005a40 <__ssvfiscanf_r+0x1b0>
 8005aac:	220a      	movs	r2, #10
 8005aae:	e7d7      	b.n	8005a60 <__ssvfiscanf_r+0x1d0>
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	f000 fbf0 	bl	8006298 <__sccl>
 8005ab8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005aba:	4605      	mov	r5, r0
 8005abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ac0:	9341      	str	r3, [sp, #260]	@ 0x104
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e7d7      	b.n	8005a76 <__ssvfiscanf_r+0x1e6>
 8005ac6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005acc:	9341      	str	r3, [sp, #260]	@ 0x104
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e7d1      	b.n	8005a76 <__ssvfiscanf_r+0x1e6>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e7cf      	b.n	8005a76 <__ssvfiscanf_r+0x1e6>
 8005ad6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005ad8:	06c3      	lsls	r3, r0, #27
 8005ada:	f53f aefd 	bmi.w	80058d8 <__ssvfiscanf_r+0x48>
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005ae2:	1d19      	adds	r1, r3, #4
 8005ae4:	9100      	str	r1, [sp, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	07c0      	lsls	r0, r0, #31
 8005aea:	bf4c      	ite	mi
 8005aec:	801a      	strhmi	r2, [r3, #0]
 8005aee:	601a      	strpl	r2, [r3, #0]
 8005af0:	e6f2      	b.n	80058d8 <__ssvfiscanf_r+0x48>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4630      	mov	r0, r6
 8005af6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005af8:	4798      	blx	r3
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d0bf      	beq.n	8005a7e <__ssvfiscanf_r+0x1ee>
 8005afe:	e79f      	b.n	8005a40 <__ssvfiscanf_r+0x1b0>
 8005b00:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005b02:	3201      	adds	r2, #1
 8005b04:	9245      	str	r2, [sp, #276]	@ 0x114
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	3a01      	subs	r2, #1
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	6062      	str	r2, [r4, #4]
 8005b0e:	dd02      	ble.n	8005b16 <__ssvfiscanf_r+0x286>
 8005b10:	3301      	adds	r3, #1
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	e7b6      	b.n	8005a84 <__ssvfiscanf_r+0x1f4>
 8005b16:	4621      	mov	r1, r4
 8005b18:	4630      	mov	r0, r6
 8005b1a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005b1c:	4798      	blx	r3
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0b0      	beq.n	8005a84 <__ssvfiscanf_r+0x1f4>
 8005b22:	e78d      	b.n	8005a40 <__ssvfiscanf_r+0x1b0>
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	dc06      	bgt.n	8005b36 <__ssvfiscanf_r+0x2a6>
 8005b28:	466b      	mov	r3, sp
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	a941      	add	r1, sp, #260	@ 0x104
 8005b30:	f000 fac0 	bl	80060b4 <_scanf_i>
 8005b34:	e7b4      	b.n	8005aa0 <__ssvfiscanf_r+0x210>
 8005b36:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <__ssvfiscanf_r+0x2cc>)
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f43f aecd 	beq.w	80058d8 <__ssvfiscanf_r+0x48>
 8005b3e:	466b      	mov	r3, sp
 8005b40:	4622      	mov	r2, r4
 8005b42:	4630      	mov	r0, r6
 8005b44:	a941      	add	r1, sp, #260	@ 0x104
 8005b46:	f3af 8000 	nop.w
 8005b4a:	e7a9      	b.n	8005aa0 <__ssvfiscanf_r+0x210>
 8005b4c:	080057e1 	.word	0x080057e1
 8005b50:	08005857 	.word	0x08005857
 8005b54:	08007801 	.word	0x08007801
 8005b58:	08007978 	.word	0x08007978
 8005b5c:	00000000 	.word	0x00000000
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	065b      	lsls	r3, r3, #25
 8005b64:	f53f af70 	bmi.w	8005a48 <__ssvfiscanf_r+0x1b8>
 8005b68:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b70:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005b72:	e7f9      	b.n	8005b68 <__ssvfiscanf_r+0x2d8>

08005b74 <sbrk_aligned>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4e0f      	ldr	r6, [pc, #60]	@ (8005bb4 <sbrk_aligned+0x40>)
 8005b78:	460c      	mov	r4, r1
 8005b7a:	6831      	ldr	r1, [r6, #0]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	b911      	cbnz	r1, 8005b86 <sbrk_aligned+0x12>
 8005b80:	f001 fa98 	bl	80070b4 <_sbrk_r>
 8005b84:	6030      	str	r0, [r6, #0]
 8005b86:	4621      	mov	r1, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f001 fa93 	bl	80070b4 <_sbrk_r>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d103      	bne.n	8005b9a <sbrk_aligned+0x26>
 8005b92:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005b96:	4620      	mov	r0, r4
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	1cc4      	adds	r4, r0, #3
 8005b9c:	f024 0403 	bic.w	r4, r4, #3
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d0f8      	beq.n	8005b96 <sbrk_aligned+0x22>
 8005ba4:	1a21      	subs	r1, r4, r0
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f001 fa84 	bl	80070b4 <_sbrk_r>
 8005bac:	3001      	adds	r0, #1
 8005bae:	d1f2      	bne.n	8005b96 <sbrk_aligned+0x22>
 8005bb0:	e7ef      	b.n	8005b92 <sbrk_aligned+0x1e>
 8005bb2:	bf00      	nop
 8005bb4:	2000055c 	.word	0x2000055c

08005bb8 <_malloc_r>:
 8005bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bbc:	1ccd      	adds	r5, r1, #3
 8005bbe:	f025 0503 	bic.w	r5, r5, #3
 8005bc2:	3508      	adds	r5, #8
 8005bc4:	2d0c      	cmp	r5, #12
 8005bc6:	bf38      	it	cc
 8005bc8:	250c      	movcc	r5, #12
 8005bca:	2d00      	cmp	r5, #0
 8005bcc:	4606      	mov	r6, r0
 8005bce:	db01      	blt.n	8005bd4 <_malloc_r+0x1c>
 8005bd0:	42a9      	cmp	r1, r5
 8005bd2:	d904      	bls.n	8005bde <_malloc_r+0x26>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	6033      	str	r3, [r6, #0]
 8005bd8:	2000      	movs	r0, #0
 8005bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cb4 <_malloc_r+0xfc>
 8005be2:	f000 fc3b 	bl	800645c <__malloc_lock>
 8005be6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bea:	461c      	mov	r4, r3
 8005bec:	bb44      	cbnz	r4, 8005c40 <_malloc_r+0x88>
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff ffbf 	bl	8005b74 <sbrk_aligned>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	d158      	bne.n	8005cae <_malloc_r+0xf6>
 8005bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8005c00:	4627      	mov	r7, r4
 8005c02:	2f00      	cmp	r7, #0
 8005c04:	d143      	bne.n	8005c8e <_malloc_r+0xd6>
 8005c06:	2c00      	cmp	r4, #0
 8005c08:	d04b      	beq.n	8005ca2 <_malloc_r+0xea>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	4630      	mov	r0, r6
 8005c10:	eb04 0903 	add.w	r9, r4, r3
 8005c14:	f001 fa4e 	bl	80070b4 <_sbrk_r>
 8005c18:	4581      	cmp	r9, r0
 8005c1a:	d142      	bne.n	8005ca2 <_malloc_r+0xea>
 8005c1c:	6821      	ldr	r1, [r4, #0]
 8005c1e:	4630      	mov	r0, r6
 8005c20:	1a6d      	subs	r5, r5, r1
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7ff ffa6 	bl	8005b74 <sbrk_aligned>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d03a      	beq.n	8005ca2 <_malloc_r+0xea>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	442b      	add	r3, r5
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	f8d8 3000 	ldr.w	r3, [r8]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	bb62      	cbnz	r2, 8005c94 <_malloc_r+0xdc>
 8005c3a:	f8c8 7000 	str.w	r7, [r8]
 8005c3e:	e00f      	b.n	8005c60 <_malloc_r+0xa8>
 8005c40:	6822      	ldr	r2, [r4, #0]
 8005c42:	1b52      	subs	r2, r2, r5
 8005c44:	d420      	bmi.n	8005c88 <_malloc_r+0xd0>
 8005c46:	2a0b      	cmp	r2, #11
 8005c48:	d917      	bls.n	8005c7a <_malloc_r+0xc2>
 8005c4a:	1961      	adds	r1, r4, r5
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	6025      	str	r5, [r4, #0]
 8005c50:	bf18      	it	ne
 8005c52:	6059      	strne	r1, [r3, #4]
 8005c54:	6863      	ldr	r3, [r4, #4]
 8005c56:	bf08      	it	eq
 8005c58:	f8c8 1000 	streq.w	r1, [r8]
 8005c5c:	5162      	str	r2, [r4, r5]
 8005c5e:	604b      	str	r3, [r1, #4]
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 fc01 	bl	8006468 <__malloc_unlock>
 8005c66:	f104 000b 	add.w	r0, r4, #11
 8005c6a:	1d23      	adds	r3, r4, #4
 8005c6c:	f020 0007 	bic.w	r0, r0, #7
 8005c70:	1ac2      	subs	r2, r0, r3
 8005c72:	bf1c      	itt	ne
 8005c74:	1a1b      	subne	r3, r3, r0
 8005c76:	50a3      	strne	r3, [r4, r2]
 8005c78:	e7af      	b.n	8005bda <_malloc_r+0x22>
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	bf0c      	ite	eq
 8005c80:	f8c8 2000 	streq.w	r2, [r8]
 8005c84:	605a      	strne	r2, [r3, #4]
 8005c86:	e7eb      	b.n	8005c60 <_malloc_r+0xa8>
 8005c88:	4623      	mov	r3, r4
 8005c8a:	6864      	ldr	r4, [r4, #4]
 8005c8c:	e7ae      	b.n	8005bec <_malloc_r+0x34>
 8005c8e:	463c      	mov	r4, r7
 8005c90:	687f      	ldr	r7, [r7, #4]
 8005c92:	e7b6      	b.n	8005c02 <_malloc_r+0x4a>
 8005c94:	461a      	mov	r2, r3
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d1fb      	bne.n	8005c94 <_malloc_r+0xdc>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6053      	str	r3, [r2, #4]
 8005ca0:	e7de      	b.n	8005c60 <_malloc_r+0xa8>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	6033      	str	r3, [r6, #0]
 8005ca8:	f000 fbde 	bl	8006468 <__malloc_unlock>
 8005cac:	e794      	b.n	8005bd8 <_malloc_r+0x20>
 8005cae:	6005      	str	r5, [r0, #0]
 8005cb0:	e7d6      	b.n	8005c60 <_malloc_r+0xa8>
 8005cb2:	bf00      	nop
 8005cb4:	20000560 	.word	0x20000560

08005cb8 <__ascii_mbtowc>:
 8005cb8:	b082      	sub	sp, #8
 8005cba:	b901      	cbnz	r1, 8005cbe <__ascii_mbtowc+0x6>
 8005cbc:	a901      	add	r1, sp, #4
 8005cbe:	b142      	cbz	r2, 8005cd2 <__ascii_mbtowc+0x1a>
 8005cc0:	b14b      	cbz	r3, 8005cd6 <__ascii_mbtowc+0x1e>
 8005cc2:	7813      	ldrb	r3, [r2, #0]
 8005cc4:	600b      	str	r3, [r1, #0]
 8005cc6:	7812      	ldrb	r2, [r2, #0]
 8005cc8:	1e10      	subs	r0, r2, #0
 8005cca:	bf18      	it	ne
 8005ccc:	2001      	movne	r0, #1
 8005cce:	b002      	add	sp, #8
 8005cd0:	4770      	bx	lr
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	e7fb      	b.n	8005cce <__ascii_mbtowc+0x16>
 8005cd6:	f06f 0001 	mvn.w	r0, #1
 8005cda:	e7f8      	b.n	8005cce <__ascii_mbtowc+0x16>

08005cdc <_printf_common>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	4698      	mov	r8, r3
 8005ce4:	688a      	ldr	r2, [r1, #8]
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	4607      	mov	r7, r0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfb8      	it	lt
 8005cee:	4613      	movlt	r3, r2
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cfc:	b10a      	cbz	r2, 8005d02 <_printf_common+0x26>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	0699      	lsls	r1, r3, #26
 8005d06:	bf42      	ittt	mi
 8005d08:	6833      	ldrmi	r3, [r6, #0]
 8005d0a:	3302      	addmi	r3, #2
 8005d0c:	6033      	strmi	r3, [r6, #0]
 8005d0e:	6825      	ldr	r5, [r4, #0]
 8005d10:	f015 0506 	ands.w	r5, r5, #6
 8005d14:	d106      	bne.n	8005d24 <_printf_common+0x48>
 8005d16:	f104 0a19 	add.w	sl, r4, #25
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	6832      	ldr	r2, [r6, #0]
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dc2b      	bgt.n	8005d7c <_printf_common+0xa0>
 8005d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	3b00      	subs	r3, #0
 8005d2c:	bf18      	it	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	0692      	lsls	r2, r2, #26
 8005d32:	d430      	bmi.n	8005d96 <_printf_common+0xba>
 8005d34:	4641      	mov	r1, r8
 8005d36:	4638      	mov	r0, r7
 8005d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d3c:	47c8      	blx	r9
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d023      	beq.n	8005d8a <_printf_common+0xae>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	f003 0306 	and.w	r3, r3, #6
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf14      	ite	ne
 8005d4e:	2500      	movne	r5, #0
 8005d50:	6833      	ldreq	r3, [r6, #0]
 8005d52:	f04f 0600 	mov.w	r6, #0
 8005d56:	bf08      	it	eq
 8005d58:	68e5      	ldreq	r5, [r4, #12]
 8005d5a:	f104 041a 	add.w	r4, r4, #26
 8005d5e:	bf08      	it	eq
 8005d60:	1aed      	subeq	r5, r5, r3
 8005d62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d66:	bf08      	it	eq
 8005d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfc4      	itt	gt
 8005d70:	1a9b      	subgt	r3, r3, r2
 8005d72:	18ed      	addgt	r5, r5, r3
 8005d74:	42b5      	cmp	r5, r6
 8005d76:	d11a      	bne.n	8005dae <_printf_common+0xd2>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e008      	b.n	8005d8e <_printf_common+0xb2>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4652      	mov	r2, sl
 8005d80:	4641      	mov	r1, r8
 8005d82:	4638      	mov	r0, r7
 8005d84:	47c8      	blx	r9
 8005d86:	3001      	adds	r0, #1
 8005d88:	d103      	bne.n	8005d92 <_printf_common+0xb6>
 8005d8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	3501      	adds	r5, #1
 8005d94:	e7c1      	b.n	8005d1a <_printf_common+0x3e>
 8005d96:	2030      	movs	r0, #48	@ 0x30
 8005d98:	18e1      	adds	r1, r4, r3
 8005d9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da4:	4422      	add	r2, r4
 8005da6:	3302      	adds	r3, #2
 8005da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dac:	e7c2      	b.n	8005d34 <_printf_common+0x58>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4622      	mov	r2, r4
 8005db2:	4641      	mov	r1, r8
 8005db4:	4638      	mov	r0, r7
 8005db6:	47c8      	blx	r9
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0e6      	beq.n	8005d8a <_printf_common+0xae>
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	e7d9      	b.n	8005d74 <_printf_common+0x98>

08005dc0 <_printf_i>:
 8005dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc4:	7e0f      	ldrb	r7, [r1, #24]
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	2f78      	cmp	r7, #120	@ 0x78
 8005dca:	4680      	mov	r8, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	469a      	mov	sl, r3
 8005dd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd6:	d807      	bhi.n	8005de8 <_printf_i+0x28>
 8005dd8:	2f62      	cmp	r7, #98	@ 0x62
 8005dda:	d80a      	bhi.n	8005df2 <_printf_i+0x32>
 8005ddc:	2f00      	cmp	r7, #0
 8005dde:	f000 80d3 	beq.w	8005f88 <_printf_i+0x1c8>
 8005de2:	2f58      	cmp	r7, #88	@ 0x58
 8005de4:	f000 80ba 	beq.w	8005f5c <_printf_i+0x19c>
 8005de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005df0:	e03a      	b.n	8005e68 <_printf_i+0xa8>
 8005df2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df6:	2b15      	cmp	r3, #21
 8005df8:	d8f6      	bhi.n	8005de8 <_printf_i+0x28>
 8005dfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005e00 <_printf_i+0x40>)
 8005dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e00:	08005e59 	.word	0x08005e59
 8005e04:	08005e6d 	.word	0x08005e6d
 8005e08:	08005de9 	.word	0x08005de9
 8005e0c:	08005de9 	.word	0x08005de9
 8005e10:	08005de9 	.word	0x08005de9
 8005e14:	08005de9 	.word	0x08005de9
 8005e18:	08005e6d 	.word	0x08005e6d
 8005e1c:	08005de9 	.word	0x08005de9
 8005e20:	08005de9 	.word	0x08005de9
 8005e24:	08005de9 	.word	0x08005de9
 8005e28:	08005de9 	.word	0x08005de9
 8005e2c:	08005f6f 	.word	0x08005f6f
 8005e30:	08005e97 	.word	0x08005e97
 8005e34:	08005f29 	.word	0x08005f29
 8005e38:	08005de9 	.word	0x08005de9
 8005e3c:	08005de9 	.word	0x08005de9
 8005e40:	08005f91 	.word	0x08005f91
 8005e44:	08005de9 	.word	0x08005de9
 8005e48:	08005e97 	.word	0x08005e97
 8005e4c:	08005de9 	.word	0x08005de9
 8005e50:	08005de9 	.word	0x08005de9
 8005e54:	08005f31 	.word	0x08005f31
 8005e58:	6833      	ldr	r3, [r6, #0]
 8005e5a:	1d1a      	adds	r2, r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6032      	str	r2, [r6, #0]
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e09e      	b.n	8005faa <_printf_i+0x1ea>
 8005e6c:	6833      	ldr	r3, [r6, #0]
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1d19      	adds	r1, r3, #4
 8005e72:	6031      	str	r1, [r6, #0]
 8005e74:	0606      	lsls	r6, r0, #24
 8005e76:	d501      	bpl.n	8005e7c <_printf_i+0xbc>
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	e003      	b.n	8005e84 <_printf_i+0xc4>
 8005e7c:	0645      	lsls	r5, r0, #25
 8005e7e:	d5fb      	bpl.n	8005e78 <_printf_i+0xb8>
 8005e80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	da03      	bge.n	8005e90 <_printf_i+0xd0>
 8005e88:	232d      	movs	r3, #45	@ 0x2d
 8005e8a:	426d      	negs	r5, r5
 8005e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e90:	230a      	movs	r3, #10
 8005e92:	4859      	ldr	r0, [pc, #356]	@ (8005ff8 <_printf_i+0x238>)
 8005e94:	e011      	b.n	8005eba <_printf_i+0xfa>
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	0608      	lsls	r0, r1, #24
 8005e9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ea0:	d402      	bmi.n	8005ea8 <_printf_i+0xe8>
 8005ea2:	0649      	lsls	r1, r1, #25
 8005ea4:	bf48      	it	mi
 8005ea6:	b2ad      	uxthmi	r5, r5
 8005ea8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	bf14      	ite	ne
 8005eae:	230a      	movne	r3, #10
 8005eb0:	2308      	moveq	r3, #8
 8005eb2:	4851      	ldr	r0, [pc, #324]	@ (8005ff8 <_printf_i+0x238>)
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eba:	6866      	ldr	r6, [r4, #4]
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	bfa8      	it	ge
 8005ec0:	6821      	ldrge	r1, [r4, #0]
 8005ec2:	60a6      	str	r6, [r4, #8]
 8005ec4:	bfa4      	itt	ge
 8005ec6:	f021 0104 	bicge.w	r1, r1, #4
 8005eca:	6021      	strge	r1, [r4, #0]
 8005ecc:	b90d      	cbnz	r5, 8005ed2 <_printf_i+0x112>
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d04b      	beq.n	8005f6a <_printf_i+0x1aa>
 8005ed2:	4616      	mov	r6, r2
 8005ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8005edc:	5dc7      	ldrb	r7, [r0, r7]
 8005ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ee2:	462f      	mov	r7, r5
 8005ee4:	42bb      	cmp	r3, r7
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	d9f4      	bls.n	8005ed4 <_printf_i+0x114>
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d10b      	bne.n	8005f06 <_printf_i+0x146>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	07df      	lsls	r7, r3, #31
 8005ef2:	d508      	bpl.n	8005f06 <_printf_i+0x146>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	6861      	ldr	r1, [r4, #4]
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	bfde      	ittt	le
 8005efc:	2330      	movle	r3, #48	@ 0x30
 8005efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f02:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f06:	1b92      	subs	r2, r2, r6
 8005f08:	6122      	str	r2, [r4, #16]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f8cd a000 	str.w	sl, [sp]
 8005f14:	aa03      	add	r2, sp, #12
 8005f16:	f7ff fee1 	bl	8005cdc <_printf_common>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d14a      	bne.n	8005fb4 <_printf_i+0x1f4>
 8005f1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f22:	b004      	add	sp, #16
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	f043 0320 	orr.w	r3, r3, #32
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	2778      	movs	r7, #120	@ 0x78
 8005f32:	4832      	ldr	r0, [pc, #200]	@ (8005ffc <_printf_i+0x23c>)
 8005f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	6831      	ldr	r1, [r6, #0]
 8005f3c:	061f      	lsls	r7, r3, #24
 8005f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f42:	d402      	bmi.n	8005f4a <_printf_i+0x18a>
 8005f44:	065f      	lsls	r7, r3, #25
 8005f46:	bf48      	it	mi
 8005f48:	b2ad      	uxthmi	r5, r5
 8005f4a:	6031      	str	r1, [r6, #0]
 8005f4c:	07d9      	lsls	r1, r3, #31
 8005f4e:	bf44      	itt	mi
 8005f50:	f043 0320 	orrmi.w	r3, r3, #32
 8005f54:	6023      	strmi	r3, [r4, #0]
 8005f56:	b11d      	cbz	r5, 8005f60 <_printf_i+0x1a0>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	e7ab      	b.n	8005eb4 <_printf_i+0xf4>
 8005f5c:	4826      	ldr	r0, [pc, #152]	@ (8005ff8 <_printf_i+0x238>)
 8005f5e:	e7e9      	b.n	8005f34 <_printf_i+0x174>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	f023 0320 	bic.w	r3, r3, #32
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	e7f6      	b.n	8005f58 <_printf_i+0x198>
 8005f6a:	4616      	mov	r6, r2
 8005f6c:	e7bd      	b.n	8005eea <_printf_i+0x12a>
 8005f6e:	6833      	ldr	r3, [r6, #0]
 8005f70:	6825      	ldr	r5, [r4, #0]
 8005f72:	1d18      	adds	r0, r3, #4
 8005f74:	6961      	ldr	r1, [r4, #20]
 8005f76:	6030      	str	r0, [r6, #0]
 8005f78:	062e      	lsls	r6, r5, #24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	d501      	bpl.n	8005f82 <_printf_i+0x1c2>
 8005f7e:	6019      	str	r1, [r3, #0]
 8005f80:	e002      	b.n	8005f88 <_printf_i+0x1c8>
 8005f82:	0668      	lsls	r0, r5, #25
 8005f84:	d5fb      	bpl.n	8005f7e <_printf_i+0x1be>
 8005f86:	8019      	strh	r1, [r3, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	e7bc      	b.n	8005f0a <_printf_i+0x14a>
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	2100      	movs	r1, #0
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	6032      	str	r2, [r6, #0]
 8005f98:	681e      	ldr	r6, [r3, #0]
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f001 f899 	bl	80070d4 <memchr>
 8005fa2:	b108      	cbz	r0, 8005fa8 <_printf_i+0x1e8>
 8005fa4:	1b80      	subs	r0, r0, r6
 8005fa6:	6060      	str	r0, [r4, #4]
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	2300      	movs	r3, #0
 8005fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fb2:	e7aa      	b.n	8005f0a <_printf_i+0x14a>
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	47d0      	blx	sl
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0ad      	beq.n	8005f1e <_printf_i+0x15e>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	079b      	lsls	r3, r3, #30
 8005fc6:	d413      	bmi.n	8005ff0 <_printf_i+0x230>
 8005fc8:	68e0      	ldr	r0, [r4, #12]
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	4298      	cmp	r0, r3
 8005fce:	bfb8      	it	lt
 8005fd0:	4618      	movlt	r0, r3
 8005fd2:	e7a6      	b.n	8005f22 <_printf_i+0x162>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	47d0      	blx	sl
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d09d      	beq.n	8005f1e <_printf_i+0x15e>
 8005fe2:	3501      	adds	r5, #1
 8005fe4:	68e3      	ldr	r3, [r4, #12]
 8005fe6:	9903      	ldr	r1, [sp, #12]
 8005fe8:	1a5b      	subs	r3, r3, r1
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	dcf2      	bgt.n	8005fd4 <_printf_i+0x214>
 8005fee:	e7eb      	b.n	8005fc8 <_printf_i+0x208>
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	f104 0619 	add.w	r6, r4, #25
 8005ff6:	e7f5      	b.n	8005fe4 <_printf_i+0x224>
 8005ff8:	08007983 	.word	0x08007983
 8005ffc:	08007994 	.word	0x08007994

08006000 <_scanf_chars>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4615      	mov	r5, r2
 8006006:	688a      	ldr	r2, [r1, #8]
 8006008:	4680      	mov	r8, r0
 800600a:	460c      	mov	r4, r1
 800600c:	b932      	cbnz	r2, 800601c <_scanf_chars+0x1c>
 800600e:	698a      	ldr	r2, [r1, #24]
 8006010:	2a00      	cmp	r2, #0
 8006012:	bf14      	ite	ne
 8006014:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8006018:	2201      	moveq	r2, #1
 800601a:	608a      	str	r2, [r1, #8]
 800601c:	2700      	movs	r7, #0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80060b0 <_scanf_chars+0xb0>
 8006024:	06d1      	lsls	r1, r2, #27
 8006026:	bf5f      	itttt	pl
 8006028:	681a      	ldrpl	r2, [r3, #0]
 800602a:	1d11      	addpl	r1, r2, #4
 800602c:	6019      	strpl	r1, [r3, #0]
 800602e:	6816      	ldrpl	r6, [r2, #0]
 8006030:	69a0      	ldr	r0, [r4, #24]
 8006032:	b188      	cbz	r0, 8006058 <_scanf_chars+0x58>
 8006034:	2801      	cmp	r0, #1
 8006036:	d107      	bne.n	8006048 <_scanf_chars+0x48>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	6963      	ldr	r3, [r4, #20]
 800603e:	5c9b      	ldrb	r3, [r3, r2]
 8006040:	b953      	cbnz	r3, 8006058 <_scanf_chars+0x58>
 8006042:	2f00      	cmp	r7, #0
 8006044:	d031      	beq.n	80060aa <_scanf_chars+0xaa>
 8006046:	e022      	b.n	800608e <_scanf_chars+0x8e>
 8006048:	2802      	cmp	r0, #2
 800604a:	d120      	bne.n	800608e <_scanf_chars+0x8e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006054:	071b      	lsls	r3, r3, #28
 8006056:	d41a      	bmi.n	800608e <_scanf_chars+0x8e>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	3701      	adds	r7, #1
 800605c:	06da      	lsls	r2, r3, #27
 800605e:	bf5e      	ittt	pl
 8006060:	682b      	ldrpl	r3, [r5, #0]
 8006062:	781b      	ldrbpl	r3, [r3, #0]
 8006064:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006068:	682a      	ldr	r2, [r5, #0]
 800606a:	686b      	ldr	r3, [r5, #4]
 800606c:	3201      	adds	r2, #1
 800606e:	602a      	str	r2, [r5, #0]
 8006070:	68a2      	ldr	r2, [r4, #8]
 8006072:	3b01      	subs	r3, #1
 8006074:	3a01      	subs	r2, #1
 8006076:	606b      	str	r3, [r5, #4]
 8006078:	60a2      	str	r2, [r4, #8]
 800607a:	b142      	cbz	r2, 800608e <_scanf_chars+0x8e>
 800607c:	2b00      	cmp	r3, #0
 800607e:	dcd7      	bgt.n	8006030 <_scanf_chars+0x30>
 8006080:	4629      	mov	r1, r5
 8006082:	4640      	mov	r0, r8
 8006084:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006088:	4798      	blx	r3
 800608a:	2800      	cmp	r0, #0
 800608c:	d0d0      	beq.n	8006030 <_scanf_chars+0x30>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	f013 0310 	ands.w	r3, r3, #16
 8006094:	d105      	bne.n	80060a2 <_scanf_chars+0xa2>
 8006096:	68e2      	ldr	r2, [r4, #12]
 8006098:	3201      	adds	r2, #1
 800609a:	60e2      	str	r2, [r4, #12]
 800609c:	69a2      	ldr	r2, [r4, #24]
 800609e:	b102      	cbz	r2, 80060a2 <_scanf_chars+0xa2>
 80060a0:	7033      	strb	r3, [r6, #0]
 80060a2:	2000      	movs	r0, #0
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	443b      	add	r3, r7
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	bf00      	nop
 80060b0:	08007801 	.word	0x08007801

080060b4 <_scanf_i>:
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	4698      	mov	r8, r3
 80060bc:	4b72      	ldr	r3, [pc, #456]	@ (8006288 <_scanf_i+0x1d4>)
 80060be:	b087      	sub	sp, #28
 80060c0:	4682      	mov	sl, r0
 80060c2:	4616      	mov	r6, r2
 80060c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060c8:	ab03      	add	r3, sp, #12
 80060ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80060ce:	4b6f      	ldr	r3, [pc, #444]	@ (800628c <_scanf_i+0x1d8>)
 80060d0:	69a1      	ldr	r1, [r4, #24]
 80060d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006290 <_scanf_i+0x1dc>)
 80060d4:	4627      	mov	r7, r4
 80060d6:	2903      	cmp	r1, #3
 80060d8:	bf08      	it	eq
 80060da:	461a      	moveq	r2, r3
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	9201      	str	r2, [sp, #4]
 80060e0:	1e5a      	subs	r2, r3, #1
 80060e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80060e6:	bf81      	itttt	hi
 80060e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80060ec:	eb03 0905 	addhi.w	r9, r3, r5
 80060f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060f4:	60a3      	strhi	r3, [r4, #8]
 80060f6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80060fa:	bf98      	it	ls
 80060fc:	f04f 0900 	movls.w	r9, #0
 8006100:	463d      	mov	r5, r7
 8006102:	f04f 0b00 	mov.w	fp, #0
 8006106:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	6831      	ldr	r1, [r6, #0]
 800610e:	ab03      	add	r3, sp, #12
 8006110:	2202      	movs	r2, #2
 8006112:	7809      	ldrb	r1, [r1, #0]
 8006114:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006118:	f000 ffdc 	bl	80070d4 <memchr>
 800611c:	b328      	cbz	r0, 800616a <_scanf_i+0xb6>
 800611e:	f1bb 0f01 	cmp.w	fp, #1
 8006122:	d159      	bne.n	80061d8 <_scanf_i+0x124>
 8006124:	6862      	ldr	r2, [r4, #4]
 8006126:	b92a      	cbnz	r2, 8006134 <_scanf_i+0x80>
 8006128:	2108      	movs	r1, #8
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	6061      	str	r1, [r4, #4]
 800612e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006132:	6022      	str	r2, [r4, #0]
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	68a2      	ldr	r2, [r4, #8]
 800613e:	1e51      	subs	r1, r2, #1
 8006140:	60a1      	str	r1, [r4, #8]
 8006142:	b192      	cbz	r2, 800616a <_scanf_i+0xb6>
 8006144:	6832      	ldr	r2, [r6, #0]
 8006146:	1c51      	adds	r1, r2, #1
 8006148:	6031      	str	r1, [r6, #0]
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	f805 2b01 	strb.w	r2, [r5], #1
 8006150:	6872      	ldr	r2, [r6, #4]
 8006152:	3a01      	subs	r2, #1
 8006154:	2a00      	cmp	r2, #0
 8006156:	6072      	str	r2, [r6, #4]
 8006158:	dc07      	bgt.n	800616a <_scanf_i+0xb6>
 800615a:	4631      	mov	r1, r6
 800615c:	4650      	mov	r0, sl
 800615e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006162:	4790      	blx	r2
 8006164:	2800      	cmp	r0, #0
 8006166:	f040 8085 	bne.w	8006274 <_scanf_i+0x1c0>
 800616a:	f10b 0b01 	add.w	fp, fp, #1
 800616e:	f1bb 0f03 	cmp.w	fp, #3
 8006172:	d1cb      	bne.n	800610c <_scanf_i+0x58>
 8006174:	6863      	ldr	r3, [r4, #4]
 8006176:	b90b      	cbnz	r3, 800617c <_scanf_i+0xc8>
 8006178:	230a      	movs	r3, #10
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	4945      	ldr	r1, [pc, #276]	@ (8006294 <_scanf_i+0x1e0>)
 8006180:	6960      	ldr	r0, [r4, #20]
 8006182:	1ac9      	subs	r1, r1, r3
 8006184:	f000 f888 	bl	8006298 <__sccl>
 8006188:	f04f 0b00 	mov.w	fp, #0
 800618c:	68a3      	ldr	r3, [r4, #8]
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d03d      	beq.n	8006210 <_scanf_i+0x15c>
 8006194:	6831      	ldr	r1, [r6, #0]
 8006196:	6960      	ldr	r0, [r4, #20]
 8006198:	f891 c000 	ldrb.w	ip, [r1]
 800619c:	f810 000c 	ldrb.w	r0, [r0, ip]
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d035      	beq.n	8006210 <_scanf_i+0x15c>
 80061a4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80061a8:	d124      	bne.n	80061f4 <_scanf_i+0x140>
 80061aa:	0510      	lsls	r0, r2, #20
 80061ac:	d522      	bpl.n	80061f4 <_scanf_i+0x140>
 80061ae:	f10b 0b01 	add.w	fp, fp, #1
 80061b2:	f1b9 0f00 	cmp.w	r9, #0
 80061b6:	d003      	beq.n	80061c0 <_scanf_i+0x10c>
 80061b8:	3301      	adds	r3, #1
 80061ba:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80061be:	60a3      	str	r3, [r4, #8]
 80061c0:	6873      	ldr	r3, [r6, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	6073      	str	r3, [r6, #4]
 80061c8:	dd1b      	ble.n	8006202 <_scanf_i+0x14e>
 80061ca:	6833      	ldr	r3, [r6, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	6033      	str	r3, [r6, #0]
 80061d0:	68a3      	ldr	r3, [r4, #8]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	60a3      	str	r3, [r4, #8]
 80061d6:	e7d9      	b.n	800618c <_scanf_i+0xd8>
 80061d8:	f1bb 0f02 	cmp.w	fp, #2
 80061dc:	d1ae      	bne.n	800613c <_scanf_i+0x88>
 80061de:	6822      	ldr	r2, [r4, #0]
 80061e0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80061e4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80061e8:	d1bf      	bne.n	800616a <_scanf_i+0xb6>
 80061ea:	2110      	movs	r1, #16
 80061ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061f0:	6061      	str	r1, [r4, #4]
 80061f2:	e7a2      	b.n	800613a <_scanf_i+0x86>
 80061f4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80061f8:	6022      	str	r2, [r4, #0]
 80061fa:	780b      	ldrb	r3, [r1, #0]
 80061fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006200:	e7de      	b.n	80061c0 <_scanf_i+0x10c>
 8006202:	4631      	mov	r1, r6
 8006204:	4650      	mov	r0, sl
 8006206:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800620a:	4798      	blx	r3
 800620c:	2800      	cmp	r0, #0
 800620e:	d0df      	beq.n	80061d0 <_scanf_i+0x11c>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	05d9      	lsls	r1, r3, #23
 8006214:	d50d      	bpl.n	8006232 <_scanf_i+0x17e>
 8006216:	42bd      	cmp	r5, r7
 8006218:	d909      	bls.n	800622e <_scanf_i+0x17a>
 800621a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800621e:	4632      	mov	r2, r6
 8006220:	4650      	mov	r0, sl
 8006222:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006226:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800622a:	4798      	blx	r3
 800622c:	464d      	mov	r5, r9
 800622e:	42bd      	cmp	r5, r7
 8006230:	d028      	beq.n	8006284 <_scanf_i+0x1d0>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	f012 0210 	ands.w	r2, r2, #16
 8006238:	d113      	bne.n	8006262 <_scanf_i+0x1ae>
 800623a:	702a      	strb	r2, [r5, #0]
 800623c:	4639      	mov	r1, r7
 800623e:	6863      	ldr	r3, [r4, #4]
 8006240:	4650      	mov	r0, sl
 8006242:	9e01      	ldr	r6, [sp, #4]
 8006244:	47b0      	blx	r6
 8006246:	f8d8 3000 	ldr.w	r3, [r8]
 800624a:	6821      	ldr	r1, [r4, #0]
 800624c:	1d1a      	adds	r2, r3, #4
 800624e:	f8c8 2000 	str.w	r2, [r8]
 8006252:	f011 0f20 	tst.w	r1, #32
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	d00f      	beq.n	800627a <_scanf_i+0x1c6>
 800625a:	6018      	str	r0, [r3, #0]
 800625c:	68e3      	ldr	r3, [r4, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60e3      	str	r3, [r4, #12]
 8006262:	2000      	movs	r0, #0
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	1bed      	subs	r5, r5, r7
 8006268:	445d      	add	r5, fp
 800626a:	442b      	add	r3, r5
 800626c:	6123      	str	r3, [r4, #16]
 800626e:	b007      	add	sp, #28
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	e7ca      	b.n	8006210 <_scanf_i+0x15c>
 800627a:	07ca      	lsls	r2, r1, #31
 800627c:	bf4c      	ite	mi
 800627e:	8018      	strhmi	r0, [r3, #0]
 8006280:	6018      	strpl	r0, [r3, #0]
 8006282:	e7eb      	b.n	800625c <_scanf_i+0x1a8>
 8006284:	2001      	movs	r0, #1
 8006286:	e7f2      	b.n	800626e <_scanf_i+0x1ba>
 8006288:	08007764 	.word	0x08007764
 800628c:	08006f81 	.word	0x08006f81
 8006290:	08007061 	.word	0x08007061
 8006294:	080079b5 	.word	0x080079b5

08006298 <__sccl>:
 8006298:	b570      	push	{r4, r5, r6, lr}
 800629a:	780b      	ldrb	r3, [r1, #0]
 800629c:	4604      	mov	r4, r0
 800629e:	2b5e      	cmp	r3, #94	@ 0x5e
 80062a0:	bf0b      	itete	eq
 80062a2:	784b      	ldrbeq	r3, [r1, #1]
 80062a4:	1c4a      	addne	r2, r1, #1
 80062a6:	1c8a      	addeq	r2, r1, #2
 80062a8:	2100      	movne	r1, #0
 80062aa:	bf08      	it	eq
 80062ac:	2101      	moveq	r1, #1
 80062ae:	3801      	subs	r0, #1
 80062b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80062b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80062b8:	42a8      	cmp	r0, r5
 80062ba:	d1fb      	bne.n	80062b4 <__sccl+0x1c>
 80062bc:	b90b      	cbnz	r3, 80062c2 <__sccl+0x2a>
 80062be:	1e50      	subs	r0, r2, #1
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	f081 0101 	eor.w	r1, r1, #1
 80062c6:	4610      	mov	r0, r2
 80062c8:	54e1      	strb	r1, [r4, r3]
 80062ca:	4602      	mov	r2, r0
 80062cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80062d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80062d2:	d005      	beq.n	80062e0 <__sccl+0x48>
 80062d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80062d6:	d016      	beq.n	8006306 <__sccl+0x6e>
 80062d8:	2d00      	cmp	r5, #0
 80062da:	d0f1      	beq.n	80062c0 <__sccl+0x28>
 80062dc:	462b      	mov	r3, r5
 80062de:	e7f2      	b.n	80062c6 <__sccl+0x2e>
 80062e0:	7846      	ldrb	r6, [r0, #1]
 80062e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80062e4:	d0fa      	beq.n	80062dc <__sccl+0x44>
 80062e6:	42b3      	cmp	r3, r6
 80062e8:	dcf8      	bgt.n	80062dc <__sccl+0x44>
 80062ea:	461a      	mov	r2, r3
 80062ec:	3002      	adds	r0, #2
 80062ee:	3201      	adds	r2, #1
 80062f0:	4296      	cmp	r6, r2
 80062f2:	54a1      	strb	r1, [r4, r2]
 80062f4:	dcfb      	bgt.n	80062ee <__sccl+0x56>
 80062f6:	1af2      	subs	r2, r6, r3
 80062f8:	3a01      	subs	r2, #1
 80062fa:	42b3      	cmp	r3, r6
 80062fc:	bfa8      	it	ge
 80062fe:	2200      	movge	r2, #0
 8006300:	1c5d      	adds	r5, r3, #1
 8006302:	18ab      	adds	r3, r5, r2
 8006304:	e7e1      	b.n	80062ca <__sccl+0x32>
 8006306:	4610      	mov	r0, r2
 8006308:	e7da      	b.n	80062c0 <__sccl+0x28>
	...

0800630c <__sflush_r>:
 800630c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006312:	0716      	lsls	r6, r2, #28
 8006314:	4605      	mov	r5, r0
 8006316:	460c      	mov	r4, r1
 8006318:	d454      	bmi.n	80063c4 <__sflush_r+0xb8>
 800631a:	684b      	ldr	r3, [r1, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	dc02      	bgt.n	8006326 <__sflush_r+0x1a>
 8006320:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	dd48      	ble.n	80063b8 <__sflush_r+0xac>
 8006326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006328:	2e00      	cmp	r6, #0
 800632a:	d045      	beq.n	80063b8 <__sflush_r+0xac>
 800632c:	2300      	movs	r3, #0
 800632e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006332:	682f      	ldr	r7, [r5, #0]
 8006334:	6a21      	ldr	r1, [r4, #32]
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	d030      	beq.n	800639c <__sflush_r+0x90>
 800633a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800633c:	89a3      	ldrh	r3, [r4, #12]
 800633e:	0759      	lsls	r1, r3, #29
 8006340:	d505      	bpl.n	800634e <__sflush_r+0x42>
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006348:	b10b      	cbz	r3, 800634e <__sflush_r+0x42>
 800634a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	4628      	mov	r0, r5
 8006352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006354:	6a21      	ldr	r1, [r4, #32]
 8006356:	47b0      	blx	r6
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	d106      	bne.n	800636c <__sflush_r+0x60>
 800635e:	6829      	ldr	r1, [r5, #0]
 8006360:	291d      	cmp	r1, #29
 8006362:	d82b      	bhi.n	80063bc <__sflush_r+0xb0>
 8006364:	4a28      	ldr	r2, [pc, #160]	@ (8006408 <__sflush_r+0xfc>)
 8006366:	410a      	asrs	r2, r1
 8006368:	07d6      	lsls	r6, r2, #31
 800636a:	d427      	bmi.n	80063bc <__sflush_r+0xb0>
 800636c:	2200      	movs	r2, #0
 800636e:	6062      	str	r2, [r4, #4]
 8006370:	6922      	ldr	r2, [r4, #16]
 8006372:	04d9      	lsls	r1, r3, #19
 8006374:	6022      	str	r2, [r4, #0]
 8006376:	d504      	bpl.n	8006382 <__sflush_r+0x76>
 8006378:	1c42      	adds	r2, r0, #1
 800637a:	d101      	bne.n	8006380 <__sflush_r+0x74>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b903      	cbnz	r3, 8006382 <__sflush_r+0x76>
 8006380:	6560      	str	r0, [r4, #84]	@ 0x54
 8006382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006384:	602f      	str	r7, [r5, #0]
 8006386:	b1b9      	cbz	r1, 80063b8 <__sflush_r+0xac>
 8006388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800638c:	4299      	cmp	r1, r3
 800638e:	d002      	beq.n	8006396 <__sflush_r+0x8a>
 8006390:	4628      	mov	r0, r5
 8006392:	f7fe fd4d 	bl	8004e30 <_free_r>
 8006396:	2300      	movs	r3, #0
 8006398:	6363      	str	r3, [r4, #52]	@ 0x34
 800639a:	e00d      	b.n	80063b8 <__sflush_r+0xac>
 800639c:	2301      	movs	r3, #1
 800639e:	4628      	mov	r0, r5
 80063a0:	47b0      	blx	r6
 80063a2:	4602      	mov	r2, r0
 80063a4:	1c50      	adds	r0, r2, #1
 80063a6:	d1c9      	bne.n	800633c <__sflush_r+0x30>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0c6      	beq.n	800633c <__sflush_r+0x30>
 80063ae:	2b1d      	cmp	r3, #29
 80063b0:	d001      	beq.n	80063b6 <__sflush_r+0xaa>
 80063b2:	2b16      	cmp	r3, #22
 80063b4:	d11d      	bne.n	80063f2 <__sflush_r+0xe6>
 80063b6:	602f      	str	r7, [r5, #0]
 80063b8:	2000      	movs	r0, #0
 80063ba:	e021      	b.n	8006400 <__sflush_r+0xf4>
 80063bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	e01a      	b.n	80063fa <__sflush_r+0xee>
 80063c4:	690f      	ldr	r7, [r1, #16]
 80063c6:	2f00      	cmp	r7, #0
 80063c8:	d0f6      	beq.n	80063b8 <__sflush_r+0xac>
 80063ca:	0793      	lsls	r3, r2, #30
 80063cc:	bf18      	it	ne
 80063ce:	2300      	movne	r3, #0
 80063d0:	680e      	ldr	r6, [r1, #0]
 80063d2:	bf08      	it	eq
 80063d4:	694b      	ldreq	r3, [r1, #20]
 80063d6:	1bf6      	subs	r6, r6, r7
 80063d8:	600f      	str	r7, [r1, #0]
 80063da:	608b      	str	r3, [r1, #8]
 80063dc:	2e00      	cmp	r6, #0
 80063de:	ddeb      	ble.n	80063b8 <__sflush_r+0xac>
 80063e0:	4633      	mov	r3, r6
 80063e2:	463a      	mov	r2, r7
 80063e4:	4628      	mov	r0, r5
 80063e6:	6a21      	ldr	r1, [r4, #32]
 80063e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80063ec:	47e0      	blx	ip
 80063ee:	2800      	cmp	r0, #0
 80063f0:	dc07      	bgt.n	8006402 <__sflush_r+0xf6>
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063fe:	81a3      	strh	r3, [r4, #12]
 8006400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006402:	4407      	add	r7, r0
 8006404:	1a36      	subs	r6, r6, r0
 8006406:	e7e9      	b.n	80063dc <__sflush_r+0xd0>
 8006408:	dfbffffe 	.word	0xdfbffffe

0800640c <_fflush_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	690b      	ldr	r3, [r1, #16]
 8006410:	4605      	mov	r5, r0
 8006412:	460c      	mov	r4, r1
 8006414:	b913      	cbnz	r3, 800641c <_fflush_r+0x10>
 8006416:	2500      	movs	r5, #0
 8006418:	4628      	mov	r0, r5
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	b118      	cbz	r0, 8006426 <_fflush_r+0x1a>
 800641e:	6a03      	ldr	r3, [r0, #32]
 8006420:	b90b      	cbnz	r3, 8006426 <_fflush_r+0x1a>
 8006422:	f7fd fe27 	bl	8004074 <__sinit>
 8006426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f3      	beq.n	8006416 <_fflush_r+0xa>
 800642e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006430:	07d0      	lsls	r0, r2, #31
 8006432:	d404      	bmi.n	800643e <_fflush_r+0x32>
 8006434:	0599      	lsls	r1, r3, #22
 8006436:	d402      	bmi.n	800643e <_fflush_r+0x32>
 8006438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800643a:	f7fe fce2 	bl	8004e02 <__retarget_lock_acquire_recursive>
 800643e:	4628      	mov	r0, r5
 8006440:	4621      	mov	r1, r4
 8006442:	f7ff ff63 	bl	800630c <__sflush_r>
 8006446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006448:	4605      	mov	r5, r0
 800644a:	07da      	lsls	r2, r3, #31
 800644c:	d4e4      	bmi.n	8006418 <_fflush_r+0xc>
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	059b      	lsls	r3, r3, #22
 8006452:	d4e1      	bmi.n	8006418 <_fflush_r+0xc>
 8006454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006456:	f7fe fcd5 	bl	8004e04 <__retarget_lock_release_recursive>
 800645a:	e7dd      	b.n	8006418 <_fflush_r+0xc>

0800645c <__malloc_lock>:
 800645c:	4801      	ldr	r0, [pc, #4]	@ (8006464 <__malloc_lock+0x8>)
 800645e:	f7fe bcd0 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8006462:	bf00      	nop
 8006464:	20000558 	.word	0x20000558

08006468 <__malloc_unlock>:
 8006468:	4801      	ldr	r0, [pc, #4]	@ (8006470 <__malloc_unlock+0x8>)
 800646a:	f7fe bccb 	b.w	8004e04 <__retarget_lock_release_recursive>
 800646e:	bf00      	nop
 8006470:	20000558 	.word	0x20000558

08006474 <_Balloc>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	69c6      	ldr	r6, [r0, #28]
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	b976      	cbnz	r6, 800649c <_Balloc+0x28>
 800647e:	2010      	movs	r0, #16
 8006480:	f000 fe68 	bl	8007154 <malloc>
 8006484:	4602      	mov	r2, r0
 8006486:	61e0      	str	r0, [r4, #28]
 8006488:	b920      	cbnz	r0, 8006494 <_Balloc+0x20>
 800648a:	216b      	movs	r1, #107	@ 0x6b
 800648c:	4b17      	ldr	r3, [pc, #92]	@ (80064ec <_Balloc+0x78>)
 800648e:	4818      	ldr	r0, [pc, #96]	@ (80064f0 <_Balloc+0x7c>)
 8006490:	f000 fe2e 	bl	80070f0 <__assert_func>
 8006494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006498:	6006      	str	r6, [r0, #0]
 800649a:	60c6      	str	r6, [r0, #12]
 800649c:	69e6      	ldr	r6, [r4, #28]
 800649e:	68f3      	ldr	r3, [r6, #12]
 80064a0:	b183      	cbz	r3, 80064c4 <_Balloc+0x50>
 80064a2:	69e3      	ldr	r3, [r4, #28]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064aa:	b9b8      	cbnz	r0, 80064dc <_Balloc+0x68>
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f605 	lsl.w	r6, r1, r5
 80064b2:	1d72      	adds	r2, r6, #5
 80064b4:	4620      	mov	r0, r4
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	f000 fe38 	bl	800712c <_calloc_r>
 80064bc:	b160      	cbz	r0, 80064d8 <_Balloc+0x64>
 80064be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064c2:	e00e      	b.n	80064e2 <_Balloc+0x6e>
 80064c4:	2221      	movs	r2, #33	@ 0x21
 80064c6:	2104      	movs	r1, #4
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fe2f 	bl	800712c <_calloc_r>
 80064ce:	69e3      	ldr	r3, [r4, #28]
 80064d0:	60f0      	str	r0, [r6, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e4      	bne.n	80064a2 <_Balloc+0x2e>
 80064d8:	2000      	movs	r0, #0
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064e2:	2300      	movs	r3, #0
 80064e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e8:	e7f7      	b.n	80064da <_Balloc+0x66>
 80064ea:	bf00      	nop
 80064ec:	080079c0 	.word	0x080079c0
 80064f0:	080079d7 	.word	0x080079d7

080064f4 <_Bfree>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	69c6      	ldr	r6, [r0, #28]
 80064f8:	4605      	mov	r5, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b976      	cbnz	r6, 800651c <_Bfree+0x28>
 80064fe:	2010      	movs	r0, #16
 8006500:	f000 fe28 	bl	8007154 <malloc>
 8006504:	4602      	mov	r2, r0
 8006506:	61e8      	str	r0, [r5, #28]
 8006508:	b920      	cbnz	r0, 8006514 <_Bfree+0x20>
 800650a:	218f      	movs	r1, #143	@ 0x8f
 800650c:	4b08      	ldr	r3, [pc, #32]	@ (8006530 <_Bfree+0x3c>)
 800650e:	4809      	ldr	r0, [pc, #36]	@ (8006534 <_Bfree+0x40>)
 8006510:	f000 fdee 	bl	80070f0 <__assert_func>
 8006514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006518:	6006      	str	r6, [r0, #0]
 800651a:	60c6      	str	r6, [r0, #12]
 800651c:	b13c      	cbz	r4, 800652e <_Bfree+0x3a>
 800651e:	69eb      	ldr	r3, [r5, #28]
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006528:	6021      	str	r1, [r4, #0]
 800652a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	080079c0 	.word	0x080079c0
 8006534:	080079d7 	.word	0x080079d7

08006538 <__multadd>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	4607      	mov	r7, r0
 800653e:	460c      	mov	r4, r1
 8006540:	461e      	mov	r6, r3
 8006542:	2000      	movs	r0, #0
 8006544:	690d      	ldr	r5, [r1, #16]
 8006546:	f101 0c14 	add.w	ip, r1, #20
 800654a:	f8dc 3000 	ldr.w	r3, [ip]
 800654e:	3001      	adds	r0, #1
 8006550:	b299      	uxth	r1, r3
 8006552:	fb02 6101 	mla	r1, r2, r1, r6
 8006556:	0c1e      	lsrs	r6, r3, #16
 8006558:	0c0b      	lsrs	r3, r1, #16
 800655a:	fb02 3306 	mla	r3, r2, r6, r3
 800655e:	b289      	uxth	r1, r1
 8006560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006564:	4285      	cmp	r5, r0
 8006566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800656a:	f84c 1b04 	str.w	r1, [ip], #4
 800656e:	dcec      	bgt.n	800654a <__multadd+0x12>
 8006570:	b30e      	cbz	r6, 80065b6 <__multadd+0x7e>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc19      	bgt.n	80065ac <__multadd+0x74>
 8006578:	6861      	ldr	r1, [r4, #4]
 800657a:	4638      	mov	r0, r7
 800657c:	3101      	adds	r1, #1
 800657e:	f7ff ff79 	bl	8006474 <_Balloc>
 8006582:	4680      	mov	r8, r0
 8006584:	b928      	cbnz	r0, 8006592 <__multadd+0x5a>
 8006586:	4602      	mov	r2, r0
 8006588:	21ba      	movs	r1, #186	@ 0xba
 800658a:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <__multadd+0x84>)
 800658c:	480c      	ldr	r0, [pc, #48]	@ (80065c0 <__multadd+0x88>)
 800658e:	f000 fdaf 	bl	80070f0 <__assert_func>
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	f104 010c 	add.w	r1, r4, #12
 8006598:	3202      	adds	r2, #2
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	300c      	adds	r0, #12
 800659e:	f7fe fc32 	bl	8004e06 <memcpy>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff ffa5 	bl	80064f4 <_Bfree>
 80065aa:	4644      	mov	r4, r8
 80065ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065b0:	3501      	adds	r5, #1
 80065b2:	615e      	str	r6, [r3, #20]
 80065b4:	6125      	str	r5, [r4, #16]
 80065b6:	4620      	mov	r0, r4
 80065b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065bc:	08007901 	.word	0x08007901
 80065c0:	080079d7 	.word	0x080079d7

080065c4 <__s2b>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	4615      	mov	r5, r2
 80065ca:	2209      	movs	r2, #9
 80065cc:	461f      	mov	r7, r3
 80065ce:	3308      	adds	r3, #8
 80065d0:	460c      	mov	r4, r1
 80065d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d6:	4606      	mov	r6, r0
 80065d8:	2201      	movs	r2, #1
 80065da:	2100      	movs	r1, #0
 80065dc:	429a      	cmp	r2, r3
 80065de:	db09      	blt.n	80065f4 <__s2b+0x30>
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff ff47 	bl	8006474 <_Balloc>
 80065e6:	b940      	cbnz	r0, 80065fa <__s2b+0x36>
 80065e8:	4602      	mov	r2, r0
 80065ea:	21d3      	movs	r1, #211	@ 0xd3
 80065ec:	4b18      	ldr	r3, [pc, #96]	@ (8006650 <__s2b+0x8c>)
 80065ee:	4819      	ldr	r0, [pc, #100]	@ (8006654 <__s2b+0x90>)
 80065f0:	f000 fd7e 	bl	80070f0 <__assert_func>
 80065f4:	0052      	lsls	r2, r2, #1
 80065f6:	3101      	adds	r1, #1
 80065f8:	e7f0      	b.n	80065dc <__s2b+0x18>
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	2d09      	cmp	r5, #9
 80065fe:	6143      	str	r3, [r0, #20]
 8006600:	f04f 0301 	mov.w	r3, #1
 8006604:	6103      	str	r3, [r0, #16]
 8006606:	dd16      	ble.n	8006636 <__s2b+0x72>
 8006608:	f104 0909 	add.w	r9, r4, #9
 800660c:	46c8      	mov	r8, r9
 800660e:	442c      	add	r4, r5
 8006610:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006614:	4601      	mov	r1, r0
 8006616:	220a      	movs	r2, #10
 8006618:	4630      	mov	r0, r6
 800661a:	3b30      	subs	r3, #48	@ 0x30
 800661c:	f7ff ff8c 	bl	8006538 <__multadd>
 8006620:	45a0      	cmp	r8, r4
 8006622:	d1f5      	bne.n	8006610 <__s2b+0x4c>
 8006624:	f1a5 0408 	sub.w	r4, r5, #8
 8006628:	444c      	add	r4, r9
 800662a:	1b2d      	subs	r5, r5, r4
 800662c:	1963      	adds	r3, r4, r5
 800662e:	42bb      	cmp	r3, r7
 8006630:	db04      	blt.n	800663c <__s2b+0x78>
 8006632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006636:	2509      	movs	r5, #9
 8006638:	340a      	adds	r4, #10
 800663a:	e7f6      	b.n	800662a <__s2b+0x66>
 800663c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006640:	4601      	mov	r1, r0
 8006642:	220a      	movs	r2, #10
 8006644:	4630      	mov	r0, r6
 8006646:	3b30      	subs	r3, #48	@ 0x30
 8006648:	f7ff ff76 	bl	8006538 <__multadd>
 800664c:	e7ee      	b.n	800662c <__s2b+0x68>
 800664e:	bf00      	nop
 8006650:	08007901 	.word	0x08007901
 8006654:	080079d7 	.word	0x080079d7

08006658 <__hi0bits>:
 8006658:	4603      	mov	r3, r0
 800665a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800665e:	bf3a      	itte	cc
 8006660:	0403      	lslcc	r3, r0, #16
 8006662:	2010      	movcc	r0, #16
 8006664:	2000      	movcs	r0, #0
 8006666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800666a:	bf3c      	itt	cc
 800666c:	021b      	lslcc	r3, r3, #8
 800666e:	3008      	addcc	r0, #8
 8006670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006674:	bf3c      	itt	cc
 8006676:	011b      	lslcc	r3, r3, #4
 8006678:	3004      	addcc	r0, #4
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667e:	bf3c      	itt	cc
 8006680:	009b      	lslcc	r3, r3, #2
 8006682:	3002      	addcc	r0, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	db05      	blt.n	8006694 <__hi0bits+0x3c>
 8006688:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800668c:	f100 0001 	add.w	r0, r0, #1
 8006690:	bf08      	it	eq
 8006692:	2020      	moveq	r0, #32
 8006694:	4770      	bx	lr

08006696 <__lo0bits>:
 8006696:	6803      	ldr	r3, [r0, #0]
 8006698:	4602      	mov	r2, r0
 800669a:	f013 0007 	ands.w	r0, r3, #7
 800669e:	d00b      	beq.n	80066b8 <__lo0bits+0x22>
 80066a0:	07d9      	lsls	r1, r3, #31
 80066a2:	d421      	bmi.n	80066e8 <__lo0bits+0x52>
 80066a4:	0798      	lsls	r0, r3, #30
 80066a6:	bf49      	itett	mi
 80066a8:	085b      	lsrmi	r3, r3, #1
 80066aa:	089b      	lsrpl	r3, r3, #2
 80066ac:	2001      	movmi	r0, #1
 80066ae:	6013      	strmi	r3, [r2, #0]
 80066b0:	bf5c      	itt	pl
 80066b2:	2002      	movpl	r0, #2
 80066b4:	6013      	strpl	r3, [r2, #0]
 80066b6:	4770      	bx	lr
 80066b8:	b299      	uxth	r1, r3
 80066ba:	b909      	cbnz	r1, 80066c0 <__lo0bits+0x2a>
 80066bc:	2010      	movs	r0, #16
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	b2d9      	uxtb	r1, r3
 80066c2:	b909      	cbnz	r1, 80066c8 <__lo0bits+0x32>
 80066c4:	3008      	adds	r0, #8
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	0719      	lsls	r1, r3, #28
 80066ca:	bf04      	itt	eq
 80066cc:	091b      	lsreq	r3, r3, #4
 80066ce:	3004      	addeq	r0, #4
 80066d0:	0799      	lsls	r1, r3, #30
 80066d2:	bf04      	itt	eq
 80066d4:	089b      	lsreq	r3, r3, #2
 80066d6:	3002      	addeq	r0, #2
 80066d8:	07d9      	lsls	r1, r3, #31
 80066da:	d403      	bmi.n	80066e4 <__lo0bits+0x4e>
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	f100 0001 	add.w	r0, r0, #1
 80066e2:	d003      	beq.n	80066ec <__lo0bits+0x56>
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4770      	bx	lr
 80066e8:	2000      	movs	r0, #0
 80066ea:	4770      	bx	lr
 80066ec:	2020      	movs	r0, #32
 80066ee:	4770      	bx	lr

080066f0 <__i2b>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	2101      	movs	r1, #1
 80066f6:	f7ff febd 	bl	8006474 <_Balloc>
 80066fa:	4602      	mov	r2, r0
 80066fc:	b928      	cbnz	r0, 800670a <__i2b+0x1a>
 80066fe:	f240 1145 	movw	r1, #325	@ 0x145
 8006702:	4b04      	ldr	r3, [pc, #16]	@ (8006714 <__i2b+0x24>)
 8006704:	4804      	ldr	r0, [pc, #16]	@ (8006718 <__i2b+0x28>)
 8006706:	f000 fcf3 	bl	80070f0 <__assert_func>
 800670a:	2301      	movs	r3, #1
 800670c:	6144      	str	r4, [r0, #20]
 800670e:	6103      	str	r3, [r0, #16]
 8006710:	bd10      	pop	{r4, pc}
 8006712:	bf00      	nop
 8006714:	08007901 	.word	0x08007901
 8006718:	080079d7 	.word	0x080079d7

0800671c <__multiply>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	4614      	mov	r4, r2
 8006722:	690a      	ldr	r2, [r1, #16]
 8006724:	6923      	ldr	r3, [r4, #16]
 8006726:	460f      	mov	r7, r1
 8006728:	429a      	cmp	r2, r3
 800672a:	bfa2      	ittt	ge
 800672c:	4623      	movge	r3, r4
 800672e:	460c      	movge	r4, r1
 8006730:	461f      	movge	r7, r3
 8006732:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006736:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800673a:	68a3      	ldr	r3, [r4, #8]
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	eb0a 0609 	add.w	r6, sl, r9
 8006742:	42b3      	cmp	r3, r6
 8006744:	b085      	sub	sp, #20
 8006746:	bfb8      	it	lt
 8006748:	3101      	addlt	r1, #1
 800674a:	f7ff fe93 	bl	8006474 <_Balloc>
 800674e:	b930      	cbnz	r0, 800675e <__multiply+0x42>
 8006750:	4602      	mov	r2, r0
 8006752:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006756:	4b43      	ldr	r3, [pc, #268]	@ (8006864 <__multiply+0x148>)
 8006758:	4843      	ldr	r0, [pc, #268]	@ (8006868 <__multiply+0x14c>)
 800675a:	f000 fcc9 	bl	80070f0 <__assert_func>
 800675e:	f100 0514 	add.w	r5, r0, #20
 8006762:	462b      	mov	r3, r5
 8006764:	2200      	movs	r2, #0
 8006766:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800676a:	4543      	cmp	r3, r8
 800676c:	d321      	bcc.n	80067b2 <__multiply+0x96>
 800676e:	f107 0114 	add.w	r1, r7, #20
 8006772:	f104 0214 	add.w	r2, r4, #20
 8006776:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800677a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800677e:	9302      	str	r3, [sp, #8]
 8006780:	1b13      	subs	r3, r2, r4
 8006782:	3b15      	subs	r3, #21
 8006784:	f023 0303 	bic.w	r3, r3, #3
 8006788:	3304      	adds	r3, #4
 800678a:	f104 0715 	add.w	r7, r4, #21
 800678e:	42ba      	cmp	r2, r7
 8006790:	bf38      	it	cc
 8006792:	2304      	movcc	r3, #4
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	9b02      	ldr	r3, [sp, #8]
 8006798:	9103      	str	r1, [sp, #12]
 800679a:	428b      	cmp	r3, r1
 800679c:	d80c      	bhi.n	80067b8 <__multiply+0x9c>
 800679e:	2e00      	cmp	r6, #0
 80067a0:	dd03      	ble.n	80067aa <__multiply+0x8e>
 80067a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d05a      	beq.n	8006860 <__multiply+0x144>
 80067aa:	6106      	str	r6, [r0, #16]
 80067ac:	b005      	add	sp, #20
 80067ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b2:	f843 2b04 	str.w	r2, [r3], #4
 80067b6:	e7d8      	b.n	800676a <__multiply+0x4e>
 80067b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80067bc:	f1ba 0f00 	cmp.w	sl, #0
 80067c0:	d023      	beq.n	800680a <__multiply+0xee>
 80067c2:	46a9      	mov	r9, r5
 80067c4:	f04f 0c00 	mov.w	ip, #0
 80067c8:	f104 0e14 	add.w	lr, r4, #20
 80067cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80067d0:	f8d9 3000 	ldr.w	r3, [r9]
 80067d4:	fa1f fb87 	uxth.w	fp, r7
 80067d8:	b29b      	uxth	r3, r3
 80067da:	fb0a 330b 	mla	r3, sl, fp, r3
 80067de:	4463      	add	r3, ip
 80067e0:	f8d9 c000 	ldr.w	ip, [r9]
 80067e4:	0c3f      	lsrs	r7, r7, #16
 80067e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80067ea:	fb0a c707 	mla	r7, sl, r7, ip
 80067ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80067f8:	4572      	cmp	r2, lr
 80067fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80067fe:	f849 3b04 	str.w	r3, [r9], #4
 8006802:	d8e3      	bhi.n	80067cc <__multiply+0xb0>
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	f845 c003 	str.w	ip, [r5, r3]
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	3104      	adds	r1, #4
 800680e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	d021      	beq.n	800685c <__multiply+0x140>
 8006818:	46ae      	mov	lr, r5
 800681a:	f04f 0a00 	mov.w	sl, #0
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	f104 0c14 	add.w	ip, r4, #20
 8006824:	f8bc b000 	ldrh.w	fp, [ip]
 8006828:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800682c:	b29b      	uxth	r3, r3
 800682e:	fb09 770b 	mla	r7, r9, fp, r7
 8006832:	4457      	add	r7, sl
 8006834:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006838:	f84e 3b04 	str.w	r3, [lr], #4
 800683c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006840:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006844:	f8be 3000 	ldrh.w	r3, [lr]
 8006848:	4562      	cmp	r2, ip
 800684a:	fb09 330a 	mla	r3, r9, sl, r3
 800684e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006856:	d8e5      	bhi.n	8006824 <__multiply+0x108>
 8006858:	9f01      	ldr	r7, [sp, #4]
 800685a:	51eb      	str	r3, [r5, r7]
 800685c:	3504      	adds	r5, #4
 800685e:	e79a      	b.n	8006796 <__multiply+0x7a>
 8006860:	3e01      	subs	r6, #1
 8006862:	e79c      	b.n	800679e <__multiply+0x82>
 8006864:	08007901 	.word	0x08007901
 8006868:	080079d7 	.word	0x080079d7

0800686c <__pow5mult>:
 800686c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006870:	4615      	mov	r5, r2
 8006872:	f012 0203 	ands.w	r2, r2, #3
 8006876:	4607      	mov	r7, r0
 8006878:	460e      	mov	r6, r1
 800687a:	d007      	beq.n	800688c <__pow5mult+0x20>
 800687c:	4c25      	ldr	r4, [pc, #148]	@ (8006914 <__pow5mult+0xa8>)
 800687e:	3a01      	subs	r2, #1
 8006880:	2300      	movs	r3, #0
 8006882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006886:	f7ff fe57 	bl	8006538 <__multadd>
 800688a:	4606      	mov	r6, r0
 800688c:	10ad      	asrs	r5, r5, #2
 800688e:	d03d      	beq.n	800690c <__pow5mult+0xa0>
 8006890:	69fc      	ldr	r4, [r7, #28]
 8006892:	b97c      	cbnz	r4, 80068b4 <__pow5mult+0x48>
 8006894:	2010      	movs	r0, #16
 8006896:	f000 fc5d 	bl	8007154 <malloc>
 800689a:	4602      	mov	r2, r0
 800689c:	61f8      	str	r0, [r7, #28]
 800689e:	b928      	cbnz	r0, 80068ac <__pow5mult+0x40>
 80068a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006918 <__pow5mult+0xac>)
 80068a6:	481d      	ldr	r0, [pc, #116]	@ (800691c <__pow5mult+0xb0>)
 80068a8:	f000 fc22 	bl	80070f0 <__assert_func>
 80068ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068b0:	6004      	str	r4, [r0, #0]
 80068b2:	60c4      	str	r4, [r0, #12]
 80068b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068bc:	b94c      	cbnz	r4, 80068d2 <__pow5mult+0x66>
 80068be:	f240 2171 	movw	r1, #625	@ 0x271
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ff14 	bl	80066f0 <__i2b>
 80068c8:	2300      	movs	r3, #0
 80068ca:	4604      	mov	r4, r0
 80068cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d0:	6003      	str	r3, [r0, #0]
 80068d2:	f04f 0900 	mov.w	r9, #0
 80068d6:	07eb      	lsls	r3, r5, #31
 80068d8:	d50a      	bpl.n	80068f0 <__pow5mult+0x84>
 80068da:	4631      	mov	r1, r6
 80068dc:	4622      	mov	r2, r4
 80068de:	4638      	mov	r0, r7
 80068e0:	f7ff ff1c 	bl	800671c <__multiply>
 80068e4:	4680      	mov	r8, r0
 80068e6:	4631      	mov	r1, r6
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff fe03 	bl	80064f4 <_Bfree>
 80068ee:	4646      	mov	r6, r8
 80068f0:	106d      	asrs	r5, r5, #1
 80068f2:	d00b      	beq.n	800690c <__pow5mult+0xa0>
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	b938      	cbnz	r0, 8006908 <__pow5mult+0x9c>
 80068f8:	4622      	mov	r2, r4
 80068fa:	4621      	mov	r1, r4
 80068fc:	4638      	mov	r0, r7
 80068fe:	f7ff ff0d 	bl	800671c <__multiply>
 8006902:	6020      	str	r0, [r4, #0]
 8006904:	f8c0 9000 	str.w	r9, [r0]
 8006908:	4604      	mov	r4, r0
 800690a:	e7e4      	b.n	80068d6 <__pow5mult+0x6a>
 800690c:	4630      	mov	r0, r6
 800690e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006912:	bf00      	nop
 8006914:	08007a30 	.word	0x08007a30
 8006918:	080079c0 	.word	0x080079c0
 800691c:	080079d7 	.word	0x080079d7

08006920 <__lshift>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	460c      	mov	r4, r1
 8006926:	4607      	mov	r7, r0
 8006928:	4691      	mov	r9, r2
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6849      	ldr	r1, [r1, #4]
 800692e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006938:	f108 0601 	add.w	r6, r8, #1
 800693c:	42b3      	cmp	r3, r6
 800693e:	db0b      	blt.n	8006958 <__lshift+0x38>
 8006940:	4638      	mov	r0, r7
 8006942:	f7ff fd97 	bl	8006474 <_Balloc>
 8006946:	4605      	mov	r5, r0
 8006948:	b948      	cbnz	r0, 800695e <__lshift+0x3e>
 800694a:	4602      	mov	r2, r0
 800694c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006950:	4b27      	ldr	r3, [pc, #156]	@ (80069f0 <__lshift+0xd0>)
 8006952:	4828      	ldr	r0, [pc, #160]	@ (80069f4 <__lshift+0xd4>)
 8006954:	f000 fbcc 	bl	80070f0 <__assert_func>
 8006958:	3101      	adds	r1, #1
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	e7ee      	b.n	800693c <__lshift+0x1c>
 800695e:	2300      	movs	r3, #0
 8006960:	f100 0114 	add.w	r1, r0, #20
 8006964:	f100 0210 	add.w	r2, r0, #16
 8006968:	4618      	mov	r0, r3
 800696a:	4553      	cmp	r3, sl
 800696c:	db33      	blt.n	80069d6 <__lshift+0xb6>
 800696e:	6920      	ldr	r0, [r4, #16]
 8006970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006974:	f104 0314 	add.w	r3, r4, #20
 8006978:	f019 091f 	ands.w	r9, r9, #31
 800697c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006984:	d02b      	beq.n	80069de <__lshift+0xbe>
 8006986:	468a      	mov	sl, r1
 8006988:	2200      	movs	r2, #0
 800698a:	f1c9 0e20 	rsb	lr, r9, #32
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	fa00 f009 	lsl.w	r0, r0, r9
 8006994:	4310      	orrs	r0, r2
 8006996:	f84a 0b04 	str.w	r0, [sl], #4
 800699a:	f853 2b04 	ldr.w	r2, [r3], #4
 800699e:	459c      	cmp	ip, r3
 80069a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80069a4:	d8f3      	bhi.n	800698e <__lshift+0x6e>
 80069a6:	ebac 0304 	sub.w	r3, ip, r4
 80069aa:	3b15      	subs	r3, #21
 80069ac:	f023 0303 	bic.w	r3, r3, #3
 80069b0:	3304      	adds	r3, #4
 80069b2:	f104 0015 	add.w	r0, r4, #21
 80069b6:	4584      	cmp	ip, r0
 80069b8:	bf38      	it	cc
 80069ba:	2304      	movcc	r3, #4
 80069bc:	50ca      	str	r2, [r1, r3]
 80069be:	b10a      	cbz	r2, 80069c4 <__lshift+0xa4>
 80069c0:	f108 0602 	add.w	r6, r8, #2
 80069c4:	3e01      	subs	r6, #1
 80069c6:	4638      	mov	r0, r7
 80069c8:	4621      	mov	r1, r4
 80069ca:	612e      	str	r6, [r5, #16]
 80069cc:	f7ff fd92 	bl	80064f4 <_Bfree>
 80069d0:	4628      	mov	r0, r5
 80069d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80069da:	3301      	adds	r3, #1
 80069dc:	e7c5      	b.n	800696a <__lshift+0x4a>
 80069de:	3904      	subs	r1, #4
 80069e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e4:	459c      	cmp	ip, r3
 80069e6:	f841 2f04 	str.w	r2, [r1, #4]!
 80069ea:	d8f9      	bhi.n	80069e0 <__lshift+0xc0>
 80069ec:	e7ea      	b.n	80069c4 <__lshift+0xa4>
 80069ee:	bf00      	nop
 80069f0:	08007901 	.word	0x08007901
 80069f4:	080079d7 	.word	0x080079d7

080069f8 <__mcmp>:
 80069f8:	4603      	mov	r3, r0
 80069fa:	690a      	ldr	r2, [r1, #16]
 80069fc:	6900      	ldr	r0, [r0, #16]
 80069fe:	b530      	push	{r4, r5, lr}
 8006a00:	1a80      	subs	r0, r0, r2
 8006a02:	d10e      	bne.n	8006a22 <__mcmp+0x2a>
 8006a04:	3314      	adds	r3, #20
 8006a06:	3114      	adds	r1, #20
 8006a08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a18:	4295      	cmp	r5, r2
 8006a1a:	d003      	beq.n	8006a24 <__mcmp+0x2c>
 8006a1c:	d205      	bcs.n	8006a2a <__mcmp+0x32>
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a22:	bd30      	pop	{r4, r5, pc}
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d3f3      	bcc.n	8006a10 <__mcmp+0x18>
 8006a28:	e7fb      	b.n	8006a22 <__mcmp+0x2a>
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	e7f9      	b.n	8006a22 <__mcmp+0x2a>
	...

08006a30 <__mdiff>:
 8006a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	4689      	mov	r9, r1
 8006a36:	4606      	mov	r6, r0
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4648      	mov	r0, r9
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	f7ff ffdb 	bl	80069f8 <__mcmp>
 8006a42:	1e05      	subs	r5, r0, #0
 8006a44:	d112      	bne.n	8006a6c <__mdiff+0x3c>
 8006a46:	4629      	mov	r1, r5
 8006a48:	4630      	mov	r0, r6
 8006a4a:	f7ff fd13 	bl	8006474 <_Balloc>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	b928      	cbnz	r0, 8006a5e <__mdiff+0x2e>
 8006a52:	f240 2137 	movw	r1, #567	@ 0x237
 8006a56:	4b3e      	ldr	r3, [pc, #248]	@ (8006b50 <__mdiff+0x120>)
 8006a58:	483e      	ldr	r0, [pc, #248]	@ (8006b54 <__mdiff+0x124>)
 8006a5a:	f000 fb49 	bl	80070f0 <__assert_func>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a64:	4610      	mov	r0, r2
 8006a66:	b003      	add	sp, #12
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	bfbc      	itt	lt
 8006a6e:	464b      	movlt	r3, r9
 8006a70:	46a1      	movlt	r9, r4
 8006a72:	4630      	mov	r0, r6
 8006a74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a78:	bfba      	itte	lt
 8006a7a:	461c      	movlt	r4, r3
 8006a7c:	2501      	movlt	r5, #1
 8006a7e:	2500      	movge	r5, #0
 8006a80:	f7ff fcf8 	bl	8006474 <_Balloc>
 8006a84:	4602      	mov	r2, r0
 8006a86:	b918      	cbnz	r0, 8006a90 <__mdiff+0x60>
 8006a88:	f240 2145 	movw	r1, #581	@ 0x245
 8006a8c:	4b30      	ldr	r3, [pc, #192]	@ (8006b50 <__mdiff+0x120>)
 8006a8e:	e7e3      	b.n	8006a58 <__mdiff+0x28>
 8006a90:	f100 0b14 	add.w	fp, r0, #20
 8006a94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a98:	f109 0310 	add.w	r3, r9, #16
 8006a9c:	60c5      	str	r5, [r0, #12]
 8006a9e:	f04f 0c00 	mov.w	ip, #0
 8006aa2:	f109 0514 	add.w	r5, r9, #20
 8006aa6:	46d9      	mov	r9, fp
 8006aa8:	6926      	ldr	r6, [r4, #16]
 8006aaa:	f104 0e14 	add.w	lr, r4, #20
 8006aae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ab2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	9b01      	ldr	r3, [sp, #4]
 8006aba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006abe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ac2:	b281      	uxth	r1, r0
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	fa1f f38a 	uxth.w	r3, sl
 8006aca:	1a5b      	subs	r3, r3, r1
 8006acc:	0c00      	lsrs	r0, r0, #16
 8006ace:	4463      	add	r3, ip
 8006ad0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ad4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ade:	4576      	cmp	r6, lr
 8006ae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ae4:	f849 3b04 	str.w	r3, [r9], #4
 8006ae8:	d8e6      	bhi.n	8006ab8 <__mdiff+0x88>
 8006aea:	1b33      	subs	r3, r6, r4
 8006aec:	3b15      	subs	r3, #21
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	3415      	adds	r4, #21
 8006af4:	3304      	adds	r3, #4
 8006af6:	42a6      	cmp	r6, r4
 8006af8:	bf38      	it	cc
 8006afa:	2304      	movcc	r3, #4
 8006afc:	441d      	add	r5, r3
 8006afe:	445b      	add	r3, fp
 8006b00:	461e      	mov	r6, r3
 8006b02:	462c      	mov	r4, r5
 8006b04:	4544      	cmp	r4, r8
 8006b06:	d30e      	bcc.n	8006b26 <__mdiff+0xf6>
 8006b08:	f108 0103 	add.w	r1, r8, #3
 8006b0c:	1b49      	subs	r1, r1, r5
 8006b0e:	f021 0103 	bic.w	r1, r1, #3
 8006b12:	3d03      	subs	r5, #3
 8006b14:	45a8      	cmp	r8, r5
 8006b16:	bf38      	it	cc
 8006b18:	2100      	movcc	r1, #0
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b20:	b199      	cbz	r1, 8006b4a <__mdiff+0x11a>
 8006b22:	6117      	str	r7, [r2, #16]
 8006b24:	e79e      	b.n	8006a64 <__mdiff+0x34>
 8006b26:	46e6      	mov	lr, ip
 8006b28:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b2c:	fa1f fc81 	uxth.w	ip, r1
 8006b30:	44f4      	add	ip, lr
 8006b32:	0c08      	lsrs	r0, r1, #16
 8006b34:	4471      	add	r1, lr
 8006b36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b3a:	b289      	uxth	r1, r1
 8006b3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b44:	f846 1b04 	str.w	r1, [r6], #4
 8006b48:	e7dc      	b.n	8006b04 <__mdiff+0xd4>
 8006b4a:	3f01      	subs	r7, #1
 8006b4c:	e7e6      	b.n	8006b1c <__mdiff+0xec>
 8006b4e:	bf00      	nop
 8006b50:	08007901 	.word	0x08007901
 8006b54:	080079d7 	.word	0x080079d7

08006b58 <__ulp>:
 8006b58:	4b0e      	ldr	r3, [pc, #56]	@ (8006b94 <__ulp+0x3c>)
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	dc08      	bgt.n	8006b76 <__ulp+0x1e>
 8006b64:	425b      	negs	r3, r3
 8006b66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b6e:	da04      	bge.n	8006b7a <__ulp+0x22>
 8006b70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b74:	4113      	asrs	r3, r2
 8006b76:	2200      	movs	r2, #0
 8006b78:	e008      	b.n	8006b8c <__ulp+0x34>
 8006b7a:	f1a2 0314 	sub.w	r3, r2, #20
 8006b7e:	2b1e      	cmp	r3, #30
 8006b80:	bfd6      	itet	le
 8006b82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006b86:	2201      	movgt	r2, #1
 8006b88:	40da      	lsrle	r2, r3
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	7ff00000 	.word	0x7ff00000

08006b98 <__b2d>:
 8006b98:	6902      	ldr	r2, [r0, #16]
 8006b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9c:	f100 0614 	add.w	r6, r0, #20
 8006ba0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006ba4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006ba8:	4f1e      	ldr	r7, [pc, #120]	@ (8006c24 <__b2d+0x8c>)
 8006baa:	4620      	mov	r0, r4
 8006bac:	f7ff fd54 	bl	8006658 <__hi0bits>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f1c0 0020 	rsb	r0, r0, #32
 8006bb6:	2b0a      	cmp	r3, #10
 8006bb8:	f1a2 0504 	sub.w	r5, r2, #4
 8006bbc:	6008      	str	r0, [r1, #0]
 8006bbe:	dc12      	bgt.n	8006be6 <__b2d+0x4e>
 8006bc0:	42ae      	cmp	r6, r5
 8006bc2:	bf2c      	ite	cs
 8006bc4:	2200      	movcs	r2, #0
 8006bc6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bca:	f1c3 0c0b 	rsb	ip, r3, #11
 8006bce:	3315      	adds	r3, #21
 8006bd0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006bd4:	fa04 f303 	lsl.w	r3, r4, r3
 8006bd8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006bdc:	ea4e 0107 	orr.w	r1, lr, r7
 8006be0:	431a      	orrs	r2, r3
 8006be2:	4610      	mov	r0, r2
 8006be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be6:	42ae      	cmp	r6, r5
 8006be8:	bf36      	itet	cc
 8006bea:	f1a2 0508 	subcc.w	r5, r2, #8
 8006bee:	2200      	movcs	r2, #0
 8006bf0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006bf4:	3b0b      	subs	r3, #11
 8006bf6:	d012      	beq.n	8006c1e <__b2d+0x86>
 8006bf8:	f1c3 0720 	rsb	r7, r3, #32
 8006bfc:	fa22 f107 	lsr.w	r1, r2, r7
 8006c00:	409c      	lsls	r4, r3
 8006c02:	430c      	orrs	r4, r1
 8006c04:	42b5      	cmp	r5, r6
 8006c06:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006c0a:	bf94      	ite	ls
 8006c0c:	2400      	movls	r4, #0
 8006c0e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006c12:	409a      	lsls	r2, r3
 8006c14:	40fc      	lsrs	r4, r7
 8006c16:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006c1a:	4322      	orrs	r2, r4
 8006c1c:	e7e1      	b.n	8006be2 <__b2d+0x4a>
 8006c1e:	ea44 0107 	orr.w	r1, r4, r7
 8006c22:	e7de      	b.n	8006be2 <__b2d+0x4a>
 8006c24:	3ff00000 	.word	0x3ff00000

08006c28 <__d2b>:
 8006c28:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4690      	mov	r8, r2
 8006c30:	4699      	mov	r9, r3
 8006c32:	9e08      	ldr	r6, [sp, #32]
 8006c34:	f7ff fc1e 	bl	8006474 <_Balloc>
 8006c38:	4604      	mov	r4, r0
 8006c3a:	b930      	cbnz	r0, 8006c4a <__d2b+0x22>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c42:	4b23      	ldr	r3, [pc, #140]	@ (8006cd0 <__d2b+0xa8>)
 8006c44:	4823      	ldr	r0, [pc, #140]	@ (8006cd4 <__d2b+0xac>)
 8006c46:	f000 fa53 	bl	80070f0 <__assert_func>
 8006c4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c52:	b10d      	cbz	r5, 8006c58 <__d2b+0x30>
 8006c54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	f1b8 0300 	subs.w	r3, r8, #0
 8006c5e:	d024      	beq.n	8006caa <__d2b+0x82>
 8006c60:	4668      	mov	r0, sp
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	f7ff fd17 	bl	8006696 <__lo0bits>
 8006c68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c6c:	b1d8      	cbz	r0, 8006ca6 <__d2b+0x7e>
 8006c6e:	f1c0 0320 	rsb	r3, r0, #32
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	430b      	orrs	r3, r1
 8006c78:	40c2      	lsrs	r2, r0
 8006c7a:	6163      	str	r3, [r4, #20]
 8006c7c:	9201      	str	r2, [sp, #4]
 8006c7e:	9b01      	ldr	r3, [sp, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf0c      	ite	eq
 8006c84:	2201      	moveq	r2, #1
 8006c86:	2202      	movne	r2, #2
 8006c88:	61a3      	str	r3, [r4, #24]
 8006c8a:	6122      	str	r2, [r4, #16]
 8006c8c:	b1ad      	cbz	r5, 8006cba <__d2b+0x92>
 8006c8e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c92:	4405      	add	r5, r0
 8006c94:	6035      	str	r5, [r6, #0]
 8006c96:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c9c:	6018      	str	r0, [r3, #0]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	b002      	add	sp, #8
 8006ca2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ca6:	6161      	str	r1, [r4, #20]
 8006ca8:	e7e9      	b.n	8006c7e <__d2b+0x56>
 8006caa:	a801      	add	r0, sp, #4
 8006cac:	f7ff fcf3 	bl	8006696 <__lo0bits>
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	6163      	str	r3, [r4, #20]
 8006cb6:	3020      	adds	r0, #32
 8006cb8:	e7e7      	b.n	8006c8a <__d2b+0x62>
 8006cba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006cbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cc2:	6030      	str	r0, [r6, #0]
 8006cc4:	6918      	ldr	r0, [r3, #16]
 8006cc6:	f7ff fcc7 	bl	8006658 <__hi0bits>
 8006cca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cce:	e7e4      	b.n	8006c9a <__d2b+0x72>
 8006cd0:	08007901 	.word	0x08007901
 8006cd4:	080079d7 	.word	0x080079d7

08006cd8 <__ratio>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	e9cd 1000 	strd	r1, r0, [sp]
 8006ce2:	a902      	add	r1, sp, #8
 8006ce4:	f7ff ff58 	bl	8006b98 <__b2d>
 8006ce8:	468b      	mov	fp, r1
 8006cea:	4606      	mov	r6, r0
 8006cec:	460f      	mov	r7, r1
 8006cee:	9800      	ldr	r0, [sp, #0]
 8006cf0:	a903      	add	r1, sp, #12
 8006cf2:	f7ff ff51 	bl	8006b98 <__b2d>
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	4689      	mov	r9, r1
 8006cfc:	6919      	ldr	r1, [r3, #16]
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	4604      	mov	r4, r0
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	4630      	mov	r0, r6
 8006d06:	1ac9      	subs	r1, r1, r3
 8006d08:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bfcd      	iteet	gt
 8006d16:	463a      	movgt	r2, r7
 8006d18:	462a      	movle	r2, r5
 8006d1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d1e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006d22:	bfd8      	it	le
 8006d24:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006d28:	464b      	mov	r3, r9
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4659      	mov	r1, fp
 8006d2e:	f7f9 fdbb 	bl	80008a8 <__aeabi_ddiv>
 8006d32:	b005      	add	sp, #20
 8006d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d38 <__copybits>:
 8006d38:	3901      	subs	r1, #1
 8006d3a:	b570      	push	{r4, r5, r6, lr}
 8006d3c:	1149      	asrs	r1, r1, #5
 8006d3e:	6914      	ldr	r4, [r2, #16]
 8006d40:	3101      	adds	r1, #1
 8006d42:	f102 0314 	add.w	r3, r2, #20
 8006d46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d4e:	1f05      	subs	r5, r0, #4
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d30c      	bcc.n	8006d6e <__copybits+0x36>
 8006d54:	1aa3      	subs	r3, r4, r2
 8006d56:	3b11      	subs	r3, #17
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	3211      	adds	r2, #17
 8006d5e:	42a2      	cmp	r2, r4
 8006d60:	bf88      	it	hi
 8006d62:	2300      	movhi	r3, #0
 8006d64:	4418      	add	r0, r3
 8006d66:	2300      	movs	r3, #0
 8006d68:	4288      	cmp	r0, r1
 8006d6a:	d305      	bcc.n	8006d78 <__copybits+0x40>
 8006d6c:	bd70      	pop	{r4, r5, r6, pc}
 8006d6e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d72:	f845 6f04 	str.w	r6, [r5, #4]!
 8006d76:	e7eb      	b.n	8006d50 <__copybits+0x18>
 8006d78:	f840 3b04 	str.w	r3, [r0], #4
 8006d7c:	e7f4      	b.n	8006d68 <__copybits+0x30>

08006d7e <__any_on>:
 8006d7e:	f100 0214 	add.w	r2, r0, #20
 8006d82:	6900      	ldr	r0, [r0, #16]
 8006d84:	114b      	asrs	r3, r1, #5
 8006d86:	4298      	cmp	r0, r3
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	db11      	blt.n	8006db0 <__any_on+0x32>
 8006d8c:	dd0a      	ble.n	8006da4 <__any_on+0x26>
 8006d8e:	f011 011f 	ands.w	r1, r1, #31
 8006d92:	d007      	beq.n	8006da4 <__any_on+0x26>
 8006d94:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006d98:	fa24 f001 	lsr.w	r0, r4, r1
 8006d9c:	fa00 f101 	lsl.w	r1, r0, r1
 8006da0:	428c      	cmp	r4, r1
 8006da2:	d10b      	bne.n	8006dbc <__any_on+0x3e>
 8006da4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d803      	bhi.n	8006db4 <__any_on+0x36>
 8006dac:	2000      	movs	r0, #0
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	4603      	mov	r3, r0
 8006db2:	e7f7      	b.n	8006da4 <__any_on+0x26>
 8006db4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d0f5      	beq.n	8006da8 <__any_on+0x2a>
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	e7f6      	b.n	8006dae <__any_on+0x30>

08006dc0 <__submore>:
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dcc:	4299      	cmp	r1, r3
 8006dce:	d11b      	bne.n	8006e08 <__submore+0x48>
 8006dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006dd4:	f7fe fef0 	bl	8005bb8 <_malloc_r>
 8006dd8:	b918      	cbnz	r0, 8006de2 <__submore+0x22>
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006de6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006de8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006dec:	6360      	str	r0, [r4, #52]	@ 0x34
 8006dee:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006df2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006df6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006dfa:	7043      	strb	r3, [r0, #1]
 8006dfc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006e00:	7003      	strb	r3, [r0, #0]
 8006e02:	6020      	str	r0, [r4, #0]
 8006e04:	2000      	movs	r0, #0
 8006e06:	e7ea      	b.n	8006dde <__submore+0x1e>
 8006e08:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006e0a:	0077      	lsls	r7, r6, #1
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	f000 f80f 	bl	8006e30 <_realloc_r>
 8006e12:	4605      	mov	r5, r0
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d0e0      	beq.n	8006dda <__submore+0x1a>
 8006e18:	eb00 0806 	add.w	r8, r0, r6
 8006e1c:	4601      	mov	r1, r0
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4640      	mov	r0, r8
 8006e22:	f7fd fff0 	bl	8004e06 <memcpy>
 8006e26:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006e2a:	f8c4 8000 	str.w	r8, [r4]
 8006e2e:	e7e9      	b.n	8006e04 <__submore+0x44>

08006e30 <_realloc_r>:
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	4680      	mov	r8, r0
 8006e36:	4615      	mov	r5, r2
 8006e38:	460c      	mov	r4, r1
 8006e3a:	b921      	cbnz	r1, 8006e46 <_realloc_r+0x16>
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e42:	f7fe beb9 	b.w	8005bb8 <_malloc_r>
 8006e46:	b92a      	cbnz	r2, 8006e54 <_realloc_r+0x24>
 8006e48:	f7fd fff2 	bl	8004e30 <_free_r>
 8006e4c:	2400      	movs	r4, #0
 8006e4e:	4620      	mov	r0, r4
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	f000 f986 	bl	8007164 <_malloc_usable_size_r>
 8006e58:	4285      	cmp	r5, r0
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	d802      	bhi.n	8006e64 <_realloc_r+0x34>
 8006e5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006e62:	d8f4      	bhi.n	8006e4e <_realloc_r+0x1e>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4640      	mov	r0, r8
 8006e68:	f7fe fea6 	bl	8005bb8 <_malloc_r>
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d0ec      	beq.n	8006e4c <_realloc_r+0x1c>
 8006e72:	42b5      	cmp	r5, r6
 8006e74:	462a      	mov	r2, r5
 8006e76:	4621      	mov	r1, r4
 8006e78:	bf28      	it	cs
 8006e7a:	4632      	movcs	r2, r6
 8006e7c:	f7fd ffc3 	bl	8004e06 <memcpy>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4640      	mov	r0, r8
 8006e84:	f7fd ffd4 	bl	8004e30 <_free_r>
 8006e88:	463c      	mov	r4, r7
 8006e8a:	e7e0      	b.n	8006e4e <_realloc_r+0x1e>

08006e8c <_strtol_l.constprop.0>:
 8006e8c:	2b24      	cmp	r3, #36	@ 0x24
 8006e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e92:	4686      	mov	lr, r0
 8006e94:	4690      	mov	r8, r2
 8006e96:	d801      	bhi.n	8006e9c <_strtol_l.constprop.0+0x10>
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <_strtol_l.constprop.0+0x1e>
 8006e9c:	f7fd ff86 	bl	8004dac <__errno>
 8006ea0:	2316      	movs	r3, #22
 8006ea2:	6003      	str	r3, [r0, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	460d      	mov	r5, r1
 8006eac:	4833      	ldr	r0, [pc, #204]	@ (8006f7c <_strtol_l.constprop.0+0xf0>)
 8006eae:	462a      	mov	r2, r5
 8006eb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eb4:	5d06      	ldrb	r6, [r0, r4]
 8006eb6:	f016 0608 	ands.w	r6, r6, #8
 8006eba:	d1f8      	bne.n	8006eae <_strtol_l.constprop.0+0x22>
 8006ebc:	2c2d      	cmp	r4, #45	@ 0x2d
 8006ebe:	d12d      	bne.n	8006f1c <_strtol_l.constprop.0+0x90>
 8006ec0:	2601      	movs	r6, #1
 8006ec2:	782c      	ldrb	r4, [r5, #0]
 8006ec4:	1c95      	adds	r5, r2, #2
 8006ec6:	f033 0210 	bics.w	r2, r3, #16
 8006eca:	d109      	bne.n	8006ee0 <_strtol_l.constprop.0+0x54>
 8006ecc:	2c30      	cmp	r4, #48	@ 0x30
 8006ece:	d12a      	bne.n	8006f26 <_strtol_l.constprop.0+0x9a>
 8006ed0:	782a      	ldrb	r2, [r5, #0]
 8006ed2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006ed6:	2a58      	cmp	r2, #88	@ 0x58
 8006ed8:	d125      	bne.n	8006f26 <_strtol_l.constprop.0+0x9a>
 8006eda:	2310      	movs	r3, #16
 8006edc:	786c      	ldrb	r4, [r5, #1]
 8006ede:	3502      	adds	r5, #2
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ee6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8006eea:	fbbc f9f3 	udiv	r9, ip, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ef4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006ef8:	2f09      	cmp	r7, #9
 8006efa:	d81b      	bhi.n	8006f34 <_strtol_l.constprop.0+0xa8>
 8006efc:	463c      	mov	r4, r7
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	dd27      	ble.n	8006f52 <_strtol_l.constprop.0+0xc6>
 8006f02:	1c57      	adds	r7, r2, #1
 8006f04:	d007      	beq.n	8006f16 <_strtol_l.constprop.0+0x8a>
 8006f06:	4581      	cmp	r9, r0
 8006f08:	d320      	bcc.n	8006f4c <_strtol_l.constprop.0+0xc0>
 8006f0a:	d101      	bne.n	8006f10 <_strtol_l.constprop.0+0x84>
 8006f0c:	45a2      	cmp	sl, r4
 8006f0e:	db1d      	blt.n	8006f4c <_strtol_l.constprop.0+0xc0>
 8006f10:	2201      	movs	r2, #1
 8006f12:	fb00 4003 	mla	r0, r0, r3, r4
 8006f16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f1a:	e7eb      	b.n	8006ef4 <_strtol_l.constprop.0+0x68>
 8006f1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006f1e:	bf04      	itt	eq
 8006f20:	782c      	ldrbeq	r4, [r5, #0]
 8006f22:	1c95      	addeq	r5, r2, #2
 8006f24:	e7cf      	b.n	8006ec6 <_strtol_l.constprop.0+0x3a>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1da      	bne.n	8006ee0 <_strtol_l.constprop.0+0x54>
 8006f2a:	2c30      	cmp	r4, #48	@ 0x30
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2308      	moveq	r3, #8
 8006f30:	230a      	movne	r3, #10
 8006f32:	e7d5      	b.n	8006ee0 <_strtol_l.constprop.0+0x54>
 8006f34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006f38:	2f19      	cmp	r7, #25
 8006f3a:	d801      	bhi.n	8006f40 <_strtol_l.constprop.0+0xb4>
 8006f3c:	3c37      	subs	r4, #55	@ 0x37
 8006f3e:	e7de      	b.n	8006efe <_strtol_l.constprop.0+0x72>
 8006f40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006f44:	2f19      	cmp	r7, #25
 8006f46:	d804      	bhi.n	8006f52 <_strtol_l.constprop.0+0xc6>
 8006f48:	3c57      	subs	r4, #87	@ 0x57
 8006f4a:	e7d8      	b.n	8006efe <_strtol_l.constprop.0+0x72>
 8006f4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f50:	e7e1      	b.n	8006f16 <_strtol_l.constprop.0+0x8a>
 8006f52:	1c53      	adds	r3, r2, #1
 8006f54:	d108      	bne.n	8006f68 <_strtol_l.constprop.0+0xdc>
 8006f56:	2322      	movs	r3, #34	@ 0x22
 8006f58:	4660      	mov	r0, ip
 8006f5a:	f8ce 3000 	str.w	r3, [lr]
 8006f5e:	f1b8 0f00 	cmp.w	r8, #0
 8006f62:	d0a0      	beq.n	8006ea6 <_strtol_l.constprop.0+0x1a>
 8006f64:	1e69      	subs	r1, r5, #1
 8006f66:	e006      	b.n	8006f76 <_strtol_l.constprop.0+0xea>
 8006f68:	b106      	cbz	r6, 8006f6c <_strtol_l.constprop.0+0xe0>
 8006f6a:	4240      	negs	r0, r0
 8006f6c:	f1b8 0f00 	cmp.w	r8, #0
 8006f70:	d099      	beq.n	8006ea6 <_strtol_l.constprop.0+0x1a>
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	d1f6      	bne.n	8006f64 <_strtol_l.constprop.0+0xd8>
 8006f76:	f8c8 1000 	str.w	r1, [r8]
 8006f7a:	e794      	b.n	8006ea6 <_strtol_l.constprop.0+0x1a>
 8006f7c:	08007801 	.word	0x08007801

08006f80 <_strtol_r>:
 8006f80:	f7ff bf84 	b.w	8006e8c <_strtol_l.constprop.0>

08006f84 <_strtoul_l.constprop.0>:
 8006f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f88:	4686      	mov	lr, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	4e33      	ldr	r6, [pc, #204]	@ (800705c <_strtoul_l.constprop.0+0xd8>)
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f94:	5d37      	ldrb	r7, [r6, r4]
 8006f96:	f017 0708 	ands.w	r7, r7, #8
 8006f9a:	d1f8      	bne.n	8006f8e <_strtoul_l.constprop.0+0xa>
 8006f9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8006f9e:	d12f      	bne.n	8007000 <_strtoul_l.constprop.0+0x7c>
 8006fa0:	2701      	movs	r7, #1
 8006fa2:	782c      	ldrb	r4, [r5, #0]
 8006fa4:	1c85      	adds	r5, r0, #2
 8006fa6:	f033 0010 	bics.w	r0, r3, #16
 8006faa:	d109      	bne.n	8006fc0 <_strtoul_l.constprop.0+0x3c>
 8006fac:	2c30      	cmp	r4, #48	@ 0x30
 8006fae:	d12c      	bne.n	800700a <_strtoul_l.constprop.0+0x86>
 8006fb0:	7828      	ldrb	r0, [r5, #0]
 8006fb2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006fb6:	2858      	cmp	r0, #88	@ 0x58
 8006fb8:	d127      	bne.n	800700a <_strtoul_l.constprop.0+0x86>
 8006fba:	2310      	movs	r3, #16
 8006fbc:	786c      	ldrb	r4, [r5, #1]
 8006fbe:	3502      	adds	r5, #2
 8006fc0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006fc4:	fbb8 f8f3 	udiv	r8, r8, r3
 8006fc8:	2600      	movs	r6, #0
 8006fca:	fb03 f908 	mul.w	r9, r3, r8
 8006fce:	4630      	mov	r0, r6
 8006fd0:	ea6f 0909 	mvn.w	r9, r9
 8006fd4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006fd8:	f1bc 0f09 	cmp.w	ip, #9
 8006fdc:	d81c      	bhi.n	8007018 <_strtoul_l.constprop.0+0x94>
 8006fde:	4664      	mov	r4, ip
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	dd2a      	ble.n	800703a <_strtoul_l.constprop.0+0xb6>
 8006fe4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8006fe8:	d007      	beq.n	8006ffa <_strtoul_l.constprop.0+0x76>
 8006fea:	4580      	cmp	r8, r0
 8006fec:	d322      	bcc.n	8007034 <_strtoul_l.constprop.0+0xb0>
 8006fee:	d101      	bne.n	8006ff4 <_strtoul_l.constprop.0+0x70>
 8006ff0:	45a1      	cmp	r9, r4
 8006ff2:	db1f      	blt.n	8007034 <_strtoul_l.constprop.0+0xb0>
 8006ff4:	2601      	movs	r6, #1
 8006ff6:	fb00 4003 	mla	r0, r0, r3, r4
 8006ffa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ffe:	e7e9      	b.n	8006fd4 <_strtoul_l.constprop.0+0x50>
 8007000:	2c2b      	cmp	r4, #43	@ 0x2b
 8007002:	bf04      	itt	eq
 8007004:	782c      	ldrbeq	r4, [r5, #0]
 8007006:	1c85      	addeq	r5, r0, #2
 8007008:	e7cd      	b.n	8006fa6 <_strtoul_l.constprop.0+0x22>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1d8      	bne.n	8006fc0 <_strtoul_l.constprop.0+0x3c>
 800700e:	2c30      	cmp	r4, #48	@ 0x30
 8007010:	bf0c      	ite	eq
 8007012:	2308      	moveq	r3, #8
 8007014:	230a      	movne	r3, #10
 8007016:	e7d3      	b.n	8006fc0 <_strtoul_l.constprop.0+0x3c>
 8007018:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800701c:	f1bc 0f19 	cmp.w	ip, #25
 8007020:	d801      	bhi.n	8007026 <_strtoul_l.constprop.0+0xa2>
 8007022:	3c37      	subs	r4, #55	@ 0x37
 8007024:	e7dc      	b.n	8006fe0 <_strtoul_l.constprop.0+0x5c>
 8007026:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800702a:	f1bc 0f19 	cmp.w	ip, #25
 800702e:	d804      	bhi.n	800703a <_strtoul_l.constprop.0+0xb6>
 8007030:	3c57      	subs	r4, #87	@ 0x57
 8007032:	e7d5      	b.n	8006fe0 <_strtoul_l.constprop.0+0x5c>
 8007034:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8007038:	e7df      	b.n	8006ffa <_strtoul_l.constprop.0+0x76>
 800703a:	1c73      	adds	r3, r6, #1
 800703c:	d106      	bne.n	800704c <_strtoul_l.constprop.0+0xc8>
 800703e:	2322      	movs	r3, #34	@ 0x22
 8007040:	4630      	mov	r0, r6
 8007042:	f8ce 3000 	str.w	r3, [lr]
 8007046:	b932      	cbnz	r2, 8007056 <_strtoul_l.constprop.0+0xd2>
 8007048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800704c:	b107      	cbz	r7, 8007050 <_strtoul_l.constprop.0+0xcc>
 800704e:	4240      	negs	r0, r0
 8007050:	2a00      	cmp	r2, #0
 8007052:	d0f9      	beq.n	8007048 <_strtoul_l.constprop.0+0xc4>
 8007054:	b106      	cbz	r6, 8007058 <_strtoul_l.constprop.0+0xd4>
 8007056:	1e69      	subs	r1, r5, #1
 8007058:	6011      	str	r1, [r2, #0]
 800705a:	e7f5      	b.n	8007048 <_strtoul_l.constprop.0+0xc4>
 800705c:	08007801 	.word	0x08007801

08007060 <_strtoul_r>:
 8007060:	f7ff bf90 	b.w	8006f84 <_strtoul_l.constprop.0>

08007064 <__ascii_wctomb>:
 8007064:	4603      	mov	r3, r0
 8007066:	4608      	mov	r0, r1
 8007068:	b141      	cbz	r1, 800707c <__ascii_wctomb+0x18>
 800706a:	2aff      	cmp	r2, #255	@ 0xff
 800706c:	d904      	bls.n	8007078 <__ascii_wctomb+0x14>
 800706e:	228a      	movs	r2, #138	@ 0x8a
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	4770      	bx	lr
 8007078:	2001      	movs	r0, #1
 800707a:	700a      	strb	r2, [r1, #0]
 800707c:	4770      	bx	lr

0800707e <memmove>:
 800707e:	4288      	cmp	r0, r1
 8007080:	b510      	push	{r4, lr}
 8007082:	eb01 0402 	add.w	r4, r1, r2
 8007086:	d902      	bls.n	800708e <memmove+0x10>
 8007088:	4284      	cmp	r4, r0
 800708a:	4623      	mov	r3, r4
 800708c:	d807      	bhi.n	800709e <memmove+0x20>
 800708e:	1e43      	subs	r3, r0, #1
 8007090:	42a1      	cmp	r1, r4
 8007092:	d008      	beq.n	80070a6 <memmove+0x28>
 8007094:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007098:	f803 2f01 	strb.w	r2, [r3, #1]!
 800709c:	e7f8      	b.n	8007090 <memmove+0x12>
 800709e:	4601      	mov	r1, r0
 80070a0:	4402      	add	r2, r0
 80070a2:	428a      	cmp	r2, r1
 80070a4:	d100      	bne.n	80070a8 <memmove+0x2a>
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b0:	e7f7      	b.n	80070a2 <memmove+0x24>
	...

080070b4 <_sbrk_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	2300      	movs	r3, #0
 80070b8:	4d05      	ldr	r5, [pc, #20]	@ (80070d0 <_sbrk_r+0x1c>)
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	f7fa fd20 	bl	8001b04 <_sbrk>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_sbrk_r+0x1a>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_sbrk_r+0x1a>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20000554 	.word	0x20000554

080070d4 <memchr>:
 80070d4:	4603      	mov	r3, r0
 80070d6:	b510      	push	{r4, lr}
 80070d8:	b2c9      	uxtb	r1, r1
 80070da:	4402      	add	r2, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	d101      	bne.n	80070e6 <memchr+0x12>
 80070e2:	2000      	movs	r0, #0
 80070e4:	e003      	b.n	80070ee <memchr+0x1a>
 80070e6:	7804      	ldrb	r4, [r0, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	428c      	cmp	r4, r1
 80070ec:	d1f6      	bne.n	80070dc <memchr+0x8>
 80070ee:	bd10      	pop	{r4, pc}

080070f0 <__assert_func>:
 80070f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070f2:	4614      	mov	r4, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b09      	ldr	r3, [pc, #36]	@ (800711c <__assert_func+0x2c>)
 80070f8:	4605      	mov	r5, r0
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68d8      	ldr	r0, [r3, #12]
 80070fe:	b954      	cbnz	r4, 8007116 <__assert_func+0x26>
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <__assert_func+0x30>)
 8007102:	461c      	mov	r4, r3
 8007104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007108:	9100      	str	r1, [sp, #0]
 800710a:	462b      	mov	r3, r5
 800710c:	4905      	ldr	r1, [pc, #20]	@ (8007124 <__assert_func+0x34>)
 800710e:	f000 f831 	bl	8007174 <fiprintf>
 8007112:	f000 f841 	bl	8007198 <abort>
 8007116:	4b04      	ldr	r3, [pc, #16]	@ (8007128 <__assert_func+0x38>)
 8007118:	e7f4      	b.n	8007104 <__assert_func+0x14>
 800711a:	bf00      	nop
 800711c:	20000184 	.word	0x20000184
 8007120:	08007b6b 	.word	0x08007b6b
 8007124:	08007b3d 	.word	0x08007b3d
 8007128:	08007b30 	.word	0x08007b30

0800712c <_calloc_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	fba1 5402 	umull	r5, r4, r1, r2
 8007132:	b93c      	cbnz	r4, 8007144 <_calloc_r+0x18>
 8007134:	4629      	mov	r1, r5
 8007136:	f7fe fd3f 	bl	8005bb8 <_malloc_r>
 800713a:	4606      	mov	r6, r0
 800713c:	b928      	cbnz	r0, 800714a <_calloc_r+0x1e>
 800713e:	2600      	movs	r6, #0
 8007140:	4630      	mov	r0, r6
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	220c      	movs	r2, #12
 8007146:	6002      	str	r2, [r0, #0]
 8007148:	e7f9      	b.n	800713e <_calloc_r+0x12>
 800714a:	462a      	mov	r2, r5
 800714c:	4621      	mov	r1, r4
 800714e:	f7fd fddf 	bl	8004d10 <memset>
 8007152:	e7f5      	b.n	8007140 <_calloc_r+0x14>

08007154 <malloc>:
 8007154:	4b02      	ldr	r3, [pc, #8]	@ (8007160 <malloc+0xc>)
 8007156:	4601      	mov	r1, r0
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	f7fe bd2d 	b.w	8005bb8 <_malloc_r>
 800715e:	bf00      	nop
 8007160:	20000184 	.word	0x20000184

08007164 <_malloc_usable_size_r>:
 8007164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007168:	1f18      	subs	r0, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	bfbc      	itt	lt
 800716e:	580b      	ldrlt	r3, [r1, r0]
 8007170:	18c0      	addlt	r0, r0, r3
 8007172:	4770      	bx	lr

08007174 <fiprintf>:
 8007174:	b40e      	push	{r1, r2, r3}
 8007176:	b503      	push	{r0, r1, lr}
 8007178:	4601      	mov	r1, r0
 800717a:	ab03      	add	r3, sp, #12
 800717c:	4805      	ldr	r0, [pc, #20]	@ (8007194 <fiprintf+0x20>)
 800717e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007182:	6800      	ldr	r0, [r0, #0]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	f000 f835 	bl	80071f4 <_vfiprintf_r>
 800718a:	b002      	add	sp, #8
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000184 	.word	0x20000184

08007198 <abort>:
 8007198:	2006      	movs	r0, #6
 800719a:	b508      	push	{r3, lr}
 800719c:	f000 fa82 	bl	80076a4 <raise>
 80071a0:	2001      	movs	r0, #1
 80071a2:	f7fa fc3a 	bl	8001a1a <_exit>

080071a6 <__sfputc_r>:
 80071a6:	6893      	ldr	r3, [r2, #8]
 80071a8:	b410      	push	{r4}
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	6093      	str	r3, [r2, #8]
 80071b0:	da07      	bge.n	80071c2 <__sfputc_r+0x1c>
 80071b2:	6994      	ldr	r4, [r2, #24]
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	db01      	blt.n	80071bc <__sfputc_r+0x16>
 80071b8:	290a      	cmp	r1, #10
 80071ba:	d102      	bne.n	80071c2 <__sfputc_r+0x1c>
 80071bc:	bc10      	pop	{r4}
 80071be:	f000 b931 	b.w	8007424 <__swbuf_r>
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	1c58      	adds	r0, r3, #1
 80071c6:	6010      	str	r0, [r2, #0]
 80071c8:	7019      	strb	r1, [r3, #0]
 80071ca:	4608      	mov	r0, r1
 80071cc:	bc10      	pop	{r4}
 80071ce:	4770      	bx	lr

080071d0 <__sfputs_r>:
 80071d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	18d5      	adds	r5, r2, r3
 80071da:	42ac      	cmp	r4, r5
 80071dc:	d101      	bne.n	80071e2 <__sfputs_r+0x12>
 80071de:	2000      	movs	r0, #0
 80071e0:	e007      	b.n	80071f2 <__sfputs_r+0x22>
 80071e2:	463a      	mov	r2, r7
 80071e4:	4630      	mov	r0, r6
 80071e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ea:	f7ff ffdc 	bl	80071a6 <__sfputc_r>
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	d1f3      	bne.n	80071da <__sfputs_r+0xa>
 80071f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071f4 <_vfiprintf_r>:
 80071f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	460d      	mov	r5, r1
 80071fa:	4614      	mov	r4, r2
 80071fc:	4698      	mov	r8, r3
 80071fe:	4606      	mov	r6, r0
 8007200:	b09d      	sub	sp, #116	@ 0x74
 8007202:	b118      	cbz	r0, 800720c <_vfiprintf_r+0x18>
 8007204:	6a03      	ldr	r3, [r0, #32]
 8007206:	b90b      	cbnz	r3, 800720c <_vfiprintf_r+0x18>
 8007208:	f7fc ff34 	bl	8004074 <__sinit>
 800720c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800720e:	07d9      	lsls	r1, r3, #31
 8007210:	d405      	bmi.n	800721e <_vfiprintf_r+0x2a>
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	059a      	lsls	r2, r3, #22
 8007216:	d402      	bmi.n	800721e <_vfiprintf_r+0x2a>
 8007218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800721a:	f7fd fdf2 	bl	8004e02 <__retarget_lock_acquire_recursive>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	d501      	bpl.n	8007228 <_vfiprintf_r+0x34>
 8007224:	692b      	ldr	r3, [r5, #16]
 8007226:	b99b      	cbnz	r3, 8007250 <_vfiprintf_r+0x5c>
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f000 f938 	bl	80074a0 <__swsetup_r>
 8007230:	b170      	cbz	r0, 8007250 <_vfiprintf_r+0x5c>
 8007232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007234:	07dc      	lsls	r4, r3, #31
 8007236:	d504      	bpl.n	8007242 <_vfiprintf_r+0x4e>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800723c:	b01d      	add	sp, #116	@ 0x74
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	89ab      	ldrh	r3, [r5, #12]
 8007244:	0598      	lsls	r0, r3, #22
 8007246:	d4f7      	bmi.n	8007238 <_vfiprintf_r+0x44>
 8007248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800724a:	f7fd fddb 	bl	8004e04 <__retarget_lock_release_recursive>
 800724e:	e7f3      	b.n	8007238 <_vfiprintf_r+0x44>
 8007250:	2300      	movs	r3, #0
 8007252:	9309      	str	r3, [sp, #36]	@ 0x24
 8007254:	2320      	movs	r3, #32
 8007256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800725a:	2330      	movs	r3, #48	@ 0x30
 800725c:	f04f 0901 	mov.w	r9, #1
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007410 <_vfiprintf_r+0x21c>
 8007268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800726c:	4623      	mov	r3, r4
 800726e:	469a      	mov	sl, r3
 8007270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007274:	b10a      	cbz	r2, 800727a <_vfiprintf_r+0x86>
 8007276:	2a25      	cmp	r2, #37	@ 0x25
 8007278:	d1f9      	bne.n	800726e <_vfiprintf_r+0x7a>
 800727a:	ebba 0b04 	subs.w	fp, sl, r4
 800727e:	d00b      	beq.n	8007298 <_vfiprintf_r+0xa4>
 8007280:	465b      	mov	r3, fp
 8007282:	4622      	mov	r2, r4
 8007284:	4629      	mov	r1, r5
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff ffa2 	bl	80071d0 <__sfputs_r>
 800728c:	3001      	adds	r0, #1
 800728e:	f000 80a7 	beq.w	80073e0 <_vfiprintf_r+0x1ec>
 8007292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007294:	445a      	add	r2, fp
 8007296:	9209      	str	r2, [sp, #36]	@ 0x24
 8007298:	f89a 3000 	ldrb.w	r3, [sl]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 809f 	beq.w	80073e0 <_vfiprintf_r+0x1ec>
 80072a2:	2300      	movs	r3, #0
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ac:	f10a 0a01 	add.w	sl, sl, #1
 80072b0:	9304      	str	r3, [sp, #16]
 80072b2:	9307      	str	r3, [sp, #28]
 80072b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ba:	4654      	mov	r4, sl
 80072bc:	2205      	movs	r2, #5
 80072be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c2:	4853      	ldr	r0, [pc, #332]	@ (8007410 <_vfiprintf_r+0x21c>)
 80072c4:	f7ff ff06 	bl	80070d4 <memchr>
 80072c8:	9a04      	ldr	r2, [sp, #16]
 80072ca:	b9d8      	cbnz	r0, 8007304 <_vfiprintf_r+0x110>
 80072cc:	06d1      	lsls	r1, r2, #27
 80072ce:	bf44      	itt	mi
 80072d0:	2320      	movmi	r3, #32
 80072d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d6:	0713      	lsls	r3, r2, #28
 80072d8:	bf44      	itt	mi
 80072da:	232b      	movmi	r3, #43	@ 0x2b
 80072dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e0:	f89a 3000 	ldrb.w	r3, [sl]
 80072e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e6:	d015      	beq.n	8007314 <_vfiprintf_r+0x120>
 80072e8:	4654      	mov	r4, sl
 80072ea:	2000      	movs	r0, #0
 80072ec:	f04f 0c0a 	mov.w	ip, #10
 80072f0:	9a07      	ldr	r2, [sp, #28]
 80072f2:	4621      	mov	r1, r4
 80072f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f8:	3b30      	subs	r3, #48	@ 0x30
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	d94b      	bls.n	8007396 <_vfiprintf_r+0x1a2>
 80072fe:	b1b0      	cbz	r0, 800732e <_vfiprintf_r+0x13a>
 8007300:	9207      	str	r2, [sp, #28]
 8007302:	e014      	b.n	800732e <_vfiprintf_r+0x13a>
 8007304:	eba0 0308 	sub.w	r3, r0, r8
 8007308:	fa09 f303 	lsl.w	r3, r9, r3
 800730c:	4313      	orrs	r3, r2
 800730e:	46a2      	mov	sl, r4
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	e7d2      	b.n	80072ba <_vfiprintf_r+0xc6>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	1d19      	adds	r1, r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	9103      	str	r1, [sp, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	bfbb      	ittet	lt
 8007320:	425b      	neglt	r3, r3
 8007322:	f042 0202 	orrlt.w	r2, r2, #2
 8007326:	9307      	strge	r3, [sp, #28]
 8007328:	9307      	strlt	r3, [sp, #28]
 800732a:	bfb8      	it	lt
 800732c:	9204      	strlt	r2, [sp, #16]
 800732e:	7823      	ldrb	r3, [r4, #0]
 8007330:	2b2e      	cmp	r3, #46	@ 0x2e
 8007332:	d10a      	bne.n	800734a <_vfiprintf_r+0x156>
 8007334:	7863      	ldrb	r3, [r4, #1]
 8007336:	2b2a      	cmp	r3, #42	@ 0x2a
 8007338:	d132      	bne.n	80073a0 <_vfiprintf_r+0x1ac>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	3402      	adds	r4, #2
 800733e:	1d1a      	adds	r2, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9203      	str	r2, [sp, #12]
 8007344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007348:	9305      	str	r3, [sp, #20]
 800734a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007414 <_vfiprintf_r+0x220>
 800734e:	2203      	movs	r2, #3
 8007350:	4650      	mov	r0, sl
 8007352:	7821      	ldrb	r1, [r4, #0]
 8007354:	f7ff febe 	bl	80070d4 <memchr>
 8007358:	b138      	cbz	r0, 800736a <_vfiprintf_r+0x176>
 800735a:	2240      	movs	r2, #64	@ 0x40
 800735c:	9b04      	ldr	r3, [sp, #16]
 800735e:	eba0 000a 	sub.w	r0, r0, sl
 8007362:	4082      	lsls	r2, r0
 8007364:	4313      	orrs	r3, r2
 8007366:	3401      	adds	r4, #1
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736e:	2206      	movs	r2, #6
 8007370:	4829      	ldr	r0, [pc, #164]	@ (8007418 <_vfiprintf_r+0x224>)
 8007372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007376:	f7ff fead 	bl	80070d4 <memchr>
 800737a:	2800      	cmp	r0, #0
 800737c:	d03f      	beq.n	80073fe <_vfiprintf_r+0x20a>
 800737e:	4b27      	ldr	r3, [pc, #156]	@ (800741c <_vfiprintf_r+0x228>)
 8007380:	bb1b      	cbnz	r3, 80073ca <_vfiprintf_r+0x1d6>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	3307      	adds	r3, #7
 8007386:	f023 0307 	bic.w	r3, r3, #7
 800738a:	3308      	adds	r3, #8
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007390:	443b      	add	r3, r7
 8007392:	9309      	str	r3, [sp, #36]	@ 0x24
 8007394:	e76a      	b.n	800726c <_vfiprintf_r+0x78>
 8007396:	460c      	mov	r4, r1
 8007398:	2001      	movs	r0, #1
 800739a:	fb0c 3202 	mla	r2, ip, r2, r3
 800739e:	e7a8      	b.n	80072f2 <_vfiprintf_r+0xfe>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f04f 0c0a 	mov.w	ip, #10
 80073a6:	4619      	mov	r1, r3
 80073a8:	3401      	adds	r4, #1
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b2:	3a30      	subs	r2, #48	@ 0x30
 80073b4:	2a09      	cmp	r2, #9
 80073b6:	d903      	bls.n	80073c0 <_vfiprintf_r+0x1cc>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0c6      	beq.n	800734a <_vfiprintf_r+0x156>
 80073bc:	9105      	str	r1, [sp, #20]
 80073be:	e7c4      	b.n	800734a <_vfiprintf_r+0x156>
 80073c0:	4604      	mov	r4, r0
 80073c2:	2301      	movs	r3, #1
 80073c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c8:	e7f0      	b.n	80073ac <_vfiprintf_r+0x1b8>
 80073ca:	ab03      	add	r3, sp, #12
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	462a      	mov	r2, r5
 80073d0:	4630      	mov	r0, r6
 80073d2:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <_vfiprintf_r+0x22c>)
 80073d4:	a904      	add	r1, sp, #16
 80073d6:	f3af 8000 	nop.w
 80073da:	4607      	mov	r7, r0
 80073dc:	1c78      	adds	r0, r7, #1
 80073de:	d1d6      	bne.n	800738e <_vfiprintf_r+0x19a>
 80073e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d405      	bmi.n	80073f2 <_vfiprintf_r+0x1fe>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	059a      	lsls	r2, r3, #22
 80073ea:	d402      	bmi.n	80073f2 <_vfiprintf_r+0x1fe>
 80073ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ee:	f7fd fd09 	bl	8004e04 <__retarget_lock_release_recursive>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	065b      	lsls	r3, r3, #25
 80073f6:	f53f af1f 	bmi.w	8007238 <_vfiprintf_r+0x44>
 80073fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073fc:	e71e      	b.n	800723c <_vfiprintf_r+0x48>
 80073fe:	ab03      	add	r3, sp, #12
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	462a      	mov	r2, r5
 8007404:	4630      	mov	r0, r6
 8007406:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <_vfiprintf_r+0x22c>)
 8007408:	a904      	add	r1, sp, #16
 800740a:	f7fe fcd9 	bl	8005dc0 <_printf_i>
 800740e:	e7e4      	b.n	80073da <_vfiprintf_r+0x1e6>
 8007410:	08007972 	.word	0x08007972
 8007414:	08007978 	.word	0x08007978
 8007418:	0800797c 	.word	0x0800797c
 800741c:	00000000 	.word	0x00000000
 8007420:	080071d1 	.word	0x080071d1

08007424 <__swbuf_r>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	460e      	mov	r6, r1
 8007428:	4614      	mov	r4, r2
 800742a:	4605      	mov	r5, r0
 800742c:	b118      	cbz	r0, 8007436 <__swbuf_r+0x12>
 800742e:	6a03      	ldr	r3, [r0, #32]
 8007430:	b90b      	cbnz	r3, 8007436 <__swbuf_r+0x12>
 8007432:	f7fc fe1f 	bl	8004074 <__sinit>
 8007436:	69a3      	ldr	r3, [r4, #24]
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	071a      	lsls	r2, r3, #28
 800743e:	d501      	bpl.n	8007444 <__swbuf_r+0x20>
 8007440:	6923      	ldr	r3, [r4, #16]
 8007442:	b943      	cbnz	r3, 8007456 <__swbuf_r+0x32>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f82a 	bl	80074a0 <__swsetup_r>
 800744c:	b118      	cbz	r0, 8007456 <__swbuf_r+0x32>
 800744e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007452:	4638      	mov	r0, r7
 8007454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	6922      	ldr	r2, [r4, #16]
 800745a:	b2f6      	uxtb	r6, r6
 800745c:	1a98      	subs	r0, r3, r2
 800745e:	6963      	ldr	r3, [r4, #20]
 8007460:	4637      	mov	r7, r6
 8007462:	4283      	cmp	r3, r0
 8007464:	dc05      	bgt.n	8007472 <__swbuf_r+0x4e>
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f7fe ffcf 	bl	800640c <_fflush_r>
 800746e:	2800      	cmp	r0, #0
 8007470:	d1ed      	bne.n	800744e <__swbuf_r+0x2a>
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	3b01      	subs	r3, #1
 8007476:	60a3      	str	r3, [r4, #8]
 8007478:	6823      	ldr	r3, [r4, #0]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	6022      	str	r2, [r4, #0]
 800747e:	701e      	strb	r6, [r3, #0]
 8007480:	6962      	ldr	r2, [r4, #20]
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d004      	beq.n	8007492 <__swbuf_r+0x6e>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d5e1      	bpl.n	8007452 <__swbuf_r+0x2e>
 800748e:	2e0a      	cmp	r6, #10
 8007490:	d1df      	bne.n	8007452 <__swbuf_r+0x2e>
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f7fe ffb9 	bl	800640c <_fflush_r>
 800749a:	2800      	cmp	r0, #0
 800749c:	d0d9      	beq.n	8007452 <__swbuf_r+0x2e>
 800749e:	e7d6      	b.n	800744e <__swbuf_r+0x2a>

080074a0 <__swsetup_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <__swsetup_r+0xa8>)
 80074a4:	4605      	mov	r5, r0
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	460c      	mov	r4, r1
 80074aa:	b118      	cbz	r0, 80074b4 <__swsetup_r+0x14>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <__swsetup_r+0x14>
 80074b0:	f7fc fde0 	bl	8004074 <__sinit>
 80074b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074b8:	0719      	lsls	r1, r3, #28
 80074ba:	d422      	bmi.n	8007502 <__swsetup_r+0x62>
 80074bc:	06da      	lsls	r2, r3, #27
 80074be:	d407      	bmi.n	80074d0 <__swsetup_r+0x30>
 80074c0:	2209      	movs	r2, #9
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e033      	b.n	8007538 <__swsetup_r+0x98>
 80074d0:	0758      	lsls	r0, r3, #29
 80074d2:	d512      	bpl.n	80074fa <__swsetup_r+0x5a>
 80074d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074d6:	b141      	cbz	r1, 80074ea <__swsetup_r+0x4a>
 80074d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074dc:	4299      	cmp	r1, r3
 80074de:	d002      	beq.n	80074e6 <__swsetup_r+0x46>
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7fd fca5 	bl	8004e30 <_free_r>
 80074e6:	2300      	movs	r3, #0
 80074e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f043 0308 	orr.w	r3, r3, #8
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	6923      	ldr	r3, [r4, #16]
 8007504:	b94b      	cbnz	r3, 800751a <__swsetup_r+0x7a>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d003      	beq.n	800751a <__swsetup_r+0x7a>
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f83e 	bl	8007596 <__smakebuf_r>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	f013 0201 	ands.w	r2, r3, #1
 8007522:	d00a      	beq.n	800753a <__swsetup_r+0x9a>
 8007524:	2200      	movs	r2, #0
 8007526:	60a2      	str	r2, [r4, #8]
 8007528:	6962      	ldr	r2, [r4, #20]
 800752a:	4252      	negs	r2, r2
 800752c:	61a2      	str	r2, [r4, #24]
 800752e:	6922      	ldr	r2, [r4, #16]
 8007530:	b942      	cbnz	r2, 8007544 <__swsetup_r+0xa4>
 8007532:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007536:	d1c5      	bne.n	80074c4 <__swsetup_r+0x24>
 8007538:	bd38      	pop	{r3, r4, r5, pc}
 800753a:	0799      	lsls	r1, r3, #30
 800753c:	bf58      	it	pl
 800753e:	6962      	ldrpl	r2, [r4, #20]
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	e7f4      	b.n	800752e <__swsetup_r+0x8e>
 8007544:	2000      	movs	r0, #0
 8007546:	e7f7      	b.n	8007538 <__swsetup_r+0x98>
 8007548:	20000184 	.word	0x20000184

0800754c <__swhatbuf_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	460c      	mov	r4, r1
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	4615      	mov	r5, r2
 8007556:	2900      	cmp	r1, #0
 8007558:	461e      	mov	r6, r3
 800755a:	b096      	sub	sp, #88	@ 0x58
 800755c:	da0c      	bge.n	8007578 <__swhatbuf_r+0x2c>
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	2100      	movs	r1, #0
 8007562:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007566:	bf14      	ite	ne
 8007568:	2340      	movne	r3, #64	@ 0x40
 800756a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800756e:	2000      	movs	r0, #0
 8007570:	6031      	str	r1, [r6, #0]
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	b016      	add	sp, #88	@ 0x58
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	466a      	mov	r2, sp
 800757a:	f000 f849 	bl	8007610 <_fstat_r>
 800757e:	2800      	cmp	r0, #0
 8007580:	dbed      	blt.n	800755e <__swhatbuf_r+0x12>
 8007582:	9901      	ldr	r1, [sp, #4]
 8007584:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007588:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800758c:	4259      	negs	r1, r3
 800758e:	4159      	adcs	r1, r3
 8007590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007594:	e7eb      	b.n	800756e <__swhatbuf_r+0x22>

08007596 <__smakebuf_r>:
 8007596:	898b      	ldrh	r3, [r1, #12]
 8007598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800759a:	079d      	lsls	r5, r3, #30
 800759c:	4606      	mov	r6, r0
 800759e:	460c      	mov	r4, r1
 80075a0:	d507      	bpl.n	80075b2 <__smakebuf_r+0x1c>
 80075a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	2301      	movs	r3, #1
 80075ac:	6163      	str	r3, [r4, #20]
 80075ae:	b003      	add	sp, #12
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b2:	466a      	mov	r2, sp
 80075b4:	ab01      	add	r3, sp, #4
 80075b6:	f7ff ffc9 	bl	800754c <__swhatbuf_r>
 80075ba:	9f00      	ldr	r7, [sp, #0]
 80075bc:	4605      	mov	r5, r0
 80075be:	4639      	mov	r1, r7
 80075c0:	4630      	mov	r0, r6
 80075c2:	f7fe faf9 	bl	8005bb8 <_malloc_r>
 80075c6:	b948      	cbnz	r0, 80075dc <__smakebuf_r+0x46>
 80075c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075cc:	059a      	lsls	r2, r3, #22
 80075ce:	d4ee      	bmi.n	80075ae <__smakebuf_r+0x18>
 80075d0:	f023 0303 	bic.w	r3, r3, #3
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	e7e2      	b.n	80075a2 <__smakebuf_r+0xc>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	6020      	str	r0, [r4, #0]
 80075ec:	b15b      	cbz	r3, 8007606 <__smakebuf_r+0x70>
 80075ee:	4630      	mov	r0, r6
 80075f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f4:	f000 f81e 	bl	8007634 <_isatty_r>
 80075f8:	b128      	cbz	r0, 8007606 <__smakebuf_r+0x70>
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	81a3      	strh	r3, [r4, #12]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	431d      	orrs	r5, r3
 800760a:	81a5      	strh	r5, [r4, #12]
 800760c:	e7cf      	b.n	80075ae <__smakebuf_r+0x18>
	...

08007610 <_fstat_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	2300      	movs	r3, #0
 8007614:	4d06      	ldr	r5, [pc, #24]	@ (8007630 <_fstat_r+0x20>)
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	4611      	mov	r1, r2
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	f7fa fa4b 	bl	8001ab8 <_fstat>
 8007622:	1c43      	adds	r3, r0, #1
 8007624:	d102      	bne.n	800762c <_fstat_r+0x1c>
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	b103      	cbz	r3, 800762c <_fstat_r+0x1c>
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20000554 	.word	0x20000554

08007634 <_isatty_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	2300      	movs	r3, #0
 8007638:	4d05      	ldr	r5, [pc, #20]	@ (8007650 <_isatty_r+0x1c>)
 800763a:	4604      	mov	r4, r0
 800763c:	4608      	mov	r0, r1
 800763e:	602b      	str	r3, [r5, #0]
 8007640:	f7fa fa49 	bl	8001ad6 <_isatty>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_isatty_r+0x1a>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_isatty_r+0x1a>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20000554 	.word	0x20000554

08007654 <_raise_r>:
 8007654:	291f      	cmp	r1, #31
 8007656:	b538      	push	{r3, r4, r5, lr}
 8007658:	4605      	mov	r5, r0
 800765a:	460c      	mov	r4, r1
 800765c:	d904      	bls.n	8007668 <_raise_r+0x14>
 800765e:	2316      	movs	r3, #22
 8007660:	6003      	str	r3, [r0, #0]
 8007662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800766a:	b112      	cbz	r2, 8007672 <_raise_r+0x1e>
 800766c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007670:	b94b      	cbnz	r3, 8007686 <_raise_r+0x32>
 8007672:	4628      	mov	r0, r5
 8007674:	f000 f830 	bl	80076d8 <_getpid_r>
 8007678:	4622      	mov	r2, r4
 800767a:	4601      	mov	r1, r0
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007682:	f000 b817 	b.w	80076b4 <_kill_r>
 8007686:	2b01      	cmp	r3, #1
 8007688:	d00a      	beq.n	80076a0 <_raise_r+0x4c>
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	d103      	bne.n	8007696 <_raise_r+0x42>
 800768e:	2316      	movs	r3, #22
 8007690:	6003      	str	r3, [r0, #0]
 8007692:	2001      	movs	r0, #1
 8007694:	e7e7      	b.n	8007666 <_raise_r+0x12>
 8007696:	2100      	movs	r1, #0
 8007698:	4620      	mov	r0, r4
 800769a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800769e:	4798      	blx	r3
 80076a0:	2000      	movs	r0, #0
 80076a2:	e7e0      	b.n	8007666 <_raise_r+0x12>

080076a4 <raise>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	@ (80076b0 <raise+0xc>)
 80076a6:	4601      	mov	r1, r0
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	f7ff bfd3 	b.w	8007654 <_raise_r>
 80076ae:	bf00      	nop
 80076b0:	20000184 	.word	0x20000184

080076b4 <_kill_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	2300      	movs	r3, #0
 80076b8:	4d06      	ldr	r5, [pc, #24]	@ (80076d4 <_kill_r+0x20>)
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	4611      	mov	r1, r2
 80076c0:	602b      	str	r3, [r5, #0]
 80076c2:	f7fa f99a 	bl	80019fa <_kill>
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	d102      	bne.n	80076d0 <_kill_r+0x1c>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	b103      	cbz	r3, 80076d0 <_kill_r+0x1c>
 80076ce:	6023      	str	r3, [r4, #0]
 80076d0:	bd38      	pop	{r3, r4, r5, pc}
 80076d2:	bf00      	nop
 80076d4:	20000554 	.word	0x20000554

080076d8 <_getpid_r>:
 80076d8:	f7fa b988 	b.w	80019ec <_getpid>

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
