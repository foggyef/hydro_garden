
Hydrogarden Lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080067b8  080067b8  000077b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd4  08006bd4  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd4  08006bd4  00007bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bdc  08006bdc  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006be4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001d4  08006db8  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08006db8  00008438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b369  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3d  00000000  00000000  00013566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00014fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096e  00000000  00000000  00015bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018542  00000000  00000000  00016526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce5b  00000000  00000000  0002ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bef9  00000000  00000000  0003b8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c77bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  000c7800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000cbf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800679c 	.word	0x0800679c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800679c 	.word	0x0800679c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2uiz>:
 8000b74:	004a      	lsls	r2, r1, #1
 8000b76:	d211      	bcs.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d211      	bcs.n	8000ba2 <__aeabi_d2uiz+0x2e>
 8000b7e:	d50d      	bpl.n	8000b9c <__aeabi_d2uiz+0x28>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d40e      	bmi.n	8000ba8 <__aeabi_d2uiz+0x34>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_d2uiz+0x3a>
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0000 	mov.w	r0, #0
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_f2uiz>:
 8000e70:	0042      	lsls	r2, r0, #1
 8000e72:	d20e      	bcs.n	8000e92 <__aeabi_f2uiz+0x22>
 8000e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e78:	d30b      	bcc.n	8000e92 <__aeabi_f2uiz+0x22>
 8000e7a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e82:	d409      	bmi.n	8000e98 <__aeabi_f2uiz+0x28>
 8000e84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e90:	4770      	bx	lr
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	4770      	bx	lr
 8000e98:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_f2uiz+0x32>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d102      	bne.n	8000ea8 <__aeabi_f2uiz+0x38>
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea6:	4770      	bx	lr
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <__aeabi_d2lz>:
 8000eb0:	b538      	push	{r3, r4, r5, lr}
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	460d      	mov	r5, r1
 8000eba:	f7ff fe33 	bl	8000b24 <__aeabi_dcmplt>
 8000ebe:	b928      	cbnz	r0, 8000ecc <__aeabi_d2lz+0x1c>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec8:	f000 b80a 	b.w	8000ee0 <__aeabi_d2ulz>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ed2:	f000 f805 	bl	8000ee0 <__aeabi_d2ulz>
 8000ed6:	4240      	negs	r0, r0
 8000ed8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
 8000ede:	bf00      	nop

08000ee0 <__aeabi_d2ulz>:
 8000ee0:	b5d0      	push	{r4, r6, r7, lr}
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <__aeabi_d2ulz+0x34>)
 8000ee6:	4606      	mov	r6, r0
 8000ee8:	460f      	mov	r7, r1
 8000eea:	f7ff fba9 	bl	8000640 <__aeabi_dmul>
 8000eee:	f7ff fe41 	bl	8000b74 <__aeabi_d2uiz>
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	f7ff fb2a 	bl	800054c <__aeabi_ui2d>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <__aeabi_d2ulz+0x38>)
 8000efc:	f7ff fba0 	bl	8000640 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4630      	mov	r0, r6
 8000f06:	4639      	mov	r1, r7
 8000f08:	f7ff f9e2 	bl	80002d0 <__aeabi_dsub>
 8000f0c:	f7ff fe32 	bl	8000b74 <__aeabi_d2uiz>
 8000f10:	4621      	mov	r1, r4
 8000f12:	bdd0      	pop	{r4, r6, r7, pc}
 8000f14:	3df00000 	.word	0x3df00000
 8000f18:	41f00000 	.word	0x41f00000

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	@ 0x50
 8000f20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f22:	f000 fc27 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f26:	f000 f8d3 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2a:	f000 f9af 	bl	800128c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f2e:	f000 f983 	bl	8001238 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f32:	f000 f913 	bl	800115c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Start PWM for TIM3 Channel 1 (blue), Channel 2 (red), and Channel 3 (green)
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK ||
 8000f36:	2100      	movs	r1, #0
 8000f38:	4861      	ldr	r0, [pc, #388]	@ (80010c0 <main+0x1a4>)
 8000f3a:	f001 fb5d 	bl	80025f8 <HAL_TIM_PWM_Start>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10d      	bne.n	8000f60 <main+0x44>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK ||
 8000f44:	2104      	movs	r1, #4
 8000f46:	485e      	ldr	r0, [pc, #376]	@ (80010c0 <main+0x1a4>)
 8000f48:	f001 fb56 	bl	80025f8 <HAL_TIM_PWM_Start>
 8000f4c:	4603      	mov	r3, r0
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK ||
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d106      	bne.n	8000f60 <main+0x44>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 8000f52:	2108      	movs	r1, #8
 8000f54:	485a      	ldr	r0, [pc, #360]	@ (80010c0 <main+0x1a4>)
 8000f56:	f001 fb4f 	bl	80025f8 <HAL_TIM_PWM_Start>
 8000f5a:	4603      	mov	r3, r0
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK ||
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <main+0x48>
  {
      Error_Handler();
 8000f60:	f000 fa00 	bl	8001364 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    int idx = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t ch;

	// Clear buffer
	memset(rxBuffer, 0, sizeof(rxBuffer));
 8000f68:	2264      	movs	r2, #100	@ 0x64
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4855      	ldr	r0, [pc, #340]	@ (80010c4 <main+0x1a8>)
 8000f6e:	f003 f89f 	bl	80040b0 <memset>

	// Read one byte at a time until newline or buffer full
	while (HAL_UART_Receive(&huart3, &ch, 1, 1000) == HAL_OK) {
 8000f72:	e00d      	b.n	8000f90 <main+0x74>
		rxBuffer[idx++] = ch;
 8000f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	647a      	str	r2, [r7, #68]	@ 0x44
 8000f7a:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8000f7e:	4a51      	ldr	r2, [pc, #324]	@ (80010c4 <main+0x1a8>)
 8000f80:	54d1      	strb	r1, [r2, r3]
		if(ch == '\n' || idx >= sizeof(rxBuffer) - 1) {
 8000f82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d00d      	beq.n	8000fa6 <main+0x8a>
 8000f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f8c:	2b62      	cmp	r3, #98	@ 0x62
 8000f8e:	d80a      	bhi.n	8000fa6 <main+0x8a>
	while (HAL_UART_Receive(&huart3, &ch, 1, 1000) == HAL_OK) {
 8000f90:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8000f94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f98:	2201      	movs	r2, #1
 8000f9a:	484b      	ldr	r0, [pc, #300]	@ (80010c8 <main+0x1ac>)
 8000f9c:	f001 ff58 	bl	8002e50 <HAL_UART_Receive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0e6      	beq.n	8000f74 <main+0x58>
			break;
		}
	}
	// Null-terminate the string
	rxBuffer[idx] = '\0';
 8000fa6:	4a47      	ldr	r2, [pc, #284]	@ (80010c4 <main+0x1a8>)
 8000fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000faa:	4413      	add	r3, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

	// Remove any trailing newline/carriage return
	for (char *p = (char *)rxBuffer; *p != '\0'; p++) {
 8000fb0:	4b44      	ldr	r3, [pc, #272]	@ (80010c4 <main+0x1a8>)
 8000fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fb4:	e00e      	b.n	8000fd4 <main+0xb8>
	  if (*p == '\n' || *p == '\r') {
 8000fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b0a      	cmp	r3, #10
 8000fbc:	d003      	beq.n	8000fc6 <main+0xaa>
 8000fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b0d      	cmp	r3, #13
 8000fc4:	d103      	bne.n	8000fce <main+0xb2>
		  *p = '\0';
 8000fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
		  break;
 8000fcc:	e006      	b.n	8000fdc <main+0xc0>
	for (char *p = (char *)rxBuffer; *p != '\0'; p++) {
 8000fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8000fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1ec      	bne.n	8000fb6 <main+0x9a>
	  }
	}

	// Parse the JSON command.
	char redStr[10], greenStr[10], blueStr[10];
	int result = sscanf((char *)rxBuffer, "%[^,],%[^,],%s", redStr, greenStr, blueStr);
 8000fdc:	f107 010c 	add.w	r1, r7, #12
 8000fe0:	f107 0218 	add.w	r2, r7, #24
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4938      	ldr	r1, [pc, #224]	@ (80010cc <main+0x1b0>)
 8000fec:	4835      	ldr	r0, [pc, #212]	@ (80010c4 <main+0x1a8>)
 8000fee:	f002 f913 	bl	8003218 <siscanf>
 8000ff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (result == 3) {
 8000ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d1b4      	bne.n	8000f64 <main+0x48>
		float red = atof(redStr);
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f906 	bl	8003210 <atof>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fdd2 	bl	8000bb4 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
		float green = atof(greenStr);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f8f9 	bl	8003210 <atof>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fdc5 	bl	8000bb4 <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
		float blue = atof(blueStr);
 800102e:	463b      	mov	r3, r7
 8001030:	4618      	mov	r0, r3
 8001032:	f002 f8ed 	bl	8003210 <atof>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fdb9 	bl	8000bb4 <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
 8001044:	633b      	str	r3, [r7, #48]	@ 0x30

		uint32_t compareRed = (uint32_t)(htim3.Init.Period * red);
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <main+0x1a4>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff feb8 	bl	8000dc0 <__aeabi_ui2f>
 8001050:	4603      	mov	r3, r0
 8001052:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f883 	bl	8000160 <__aeabi_fmul>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff07 	bl	8000e70 <__aeabi_f2uiz>
 8001062:	4603      	mov	r3, r0
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, compareRed);
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <main+0x1a4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34
		uint32_t compareGreen = (uint32_t)(htim3.Init.Period * green);
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <main+0x1a4>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fea4 	bl	8000dc0 <__aeabi_ui2f>
 8001078:	4603      	mov	r3, r0
 800107a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f86f 	bl	8000160 <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fef3 	bl	8000e70 <__aeabi_f2uiz>
 800108a:	4603      	mov	r3, r0
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, compareGreen);
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <main+0x1a4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001094:	639a      	str	r2, [r3, #56]	@ 0x38
	    uint32_t compareBlue = (uint32_t)(htim3.Init.Period * blue);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <main+0x1a4>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe90 	bl	8000dc0 <__aeabi_ui2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f85b 	bl	8000160 <__aeabi_fmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fedf 	bl	8000e70 <__aeabi_f2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
	    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, compareBlue);
 80010b6:	4b02      	ldr	r3, [pc, #8]	@ (80010c0 <main+0x1a4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  {
 80010be:	e751      	b.n	8000f64 <main+0x48>
 80010c0:	200001f0 	.word	0x200001f0
 80010c4:	20000280 	.word	0x20000280
 80010c8:	20000238 	.word	0x20000238
 80010cc:	080067b8 	.word	0x080067b8

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b090      	sub	sp, #64	@ 0x40
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2228      	movs	r2, #40	@ 0x28
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 ffe6 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800110e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	4618      	mov	r0, r3
 800111a:	f000 fe0d 	bl	8001d38 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001124:	f000 f91e 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2102      	movs	r1, #2
 8001142:	4618      	mov	r0, r3
 8001144:	f001 f87a 	bl	800223c <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800114e:	f000 f909 	bl	8001364 <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3740      	adds	r7, #64	@ 0x40
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117e:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001180:	4a2c      	ldr	r2, [pc, #176]	@ (8001234 <MX_TIM3_Init+0xd8>)
 8001182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001186:	2247      	movs	r2, #71	@ 0x47
 8001188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <MX_TIM3_Init+0xd4>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001192:	2263      	movs	r2, #99	@ 0x63
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <MX_TIM3_Init+0xd4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a2:	4823      	ldr	r0, [pc, #140]	@ (8001230 <MX_TIM3_Init+0xd4>)
 80011a4:	f001 f9d8 	bl	8002558 <HAL_TIM_PWM_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80011ae:	f000 f8d9 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4619      	mov	r1, r3
 80011c0:	481b      	ldr	r0, [pc, #108]	@ (8001230 <MX_TIM3_Init+0xd4>)
 80011c2:	f001 fd97 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80011cc:	f000 f8ca 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	@ 0x60
 80011d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	4812      	ldr	r0, [pc, #72]	@ (8001230 <MX_TIM3_Init+0xd4>)
 80011e8:	f001 faa8 	bl	800273c <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011f2:	f000 f8b7 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2204      	movs	r2, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	480c      	ldr	r0, [pc, #48]	@ (8001230 <MX_TIM3_Init+0xd4>)
 80011fe:	f001 fa9d 	bl	800273c <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001208:	f000 f8ac 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2208      	movs	r2, #8
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001214:	f001 fa92 	bl	800273c <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800121e:	f000 f8a1 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <MX_TIM3_Init+0xd4>)
 8001224:	f000 f8f4 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001f0 	.word	0x200001f0
 8001234:	40000400 	.word	0x40000400

08001238 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART3_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART3_UART_Init+0x4c>)
 8001270:	f001 fd9e 	bl	8002db0 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f873 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000238 	.word	0x20000238
 8001288:	40004800 	.word	0x40004800

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a20      	ldr	r2, [pc, #128]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_GPIO_Init+0xcc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001306:	4815      	ldr	r0, [pc, #84]	@ (800135c <MX_GPIO_Init+0xd0>)
 8001308:	f000 fcfe 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	2102      	movs	r1, #2
 8001310:	4813      	ldr	r0, [pc, #76]	@ (8001360 <MX_GPIO_Init+0xd4>)
 8001312:	f000 fcf9 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2302      	movs	r3, #2
 8001326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	480b      	ldr	r0, [pc, #44]	@ (800135c <MX_GPIO_Init+0xd0>)
 8001330:	f000 fb66 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001334:	2302      	movs	r3, #2
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_GPIO_Init+0xd4>)
 800134c:	f000 fb58 	bl	8001a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40011000 	.word	0x40011000
 8001360:	40010c00 	.word	0x40010c00

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_MspInit+0x5c>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4a14      	ldr	r2, [pc, #80]	@ (80013cc <HAL_MspInit+0x5c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6193      	str	r3, [r2, #24]
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_MspInit+0x5c>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_MspInit+0x5c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <HAL_MspInit+0x5c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_MspInit+0x5c>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_MspInit+0x60>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_MspInit+0x60>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010000 	.word	0x40010000

080013d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <HAL_TIM_PWM_MspInit+0x34>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10b      	bne.n	80013fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_TIM_PWM_MspInit+0x38>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_TIM_PWM_MspInit+0x38>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_TIM_PWM_MspInit+0x38>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40000400 	.word	0x40000400
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_TIM_MspPostInit+0x88>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d12f      	bne.n	8001490 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a19      	ldr	r2, [pc, #100]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	4a13      	ldr	r2, [pc, #76]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 800144e:	f043 0308 	orr.w	r3, r3, #8
 8001452:	6193      	str	r3, [r2, #24]
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_TIM_MspPostInit+0x8c>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001460:	23c0      	movs	r3, #192	@ 0xc0
 8001462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	480b      	ldr	r0, [pc, #44]	@ (80014a0 <HAL_TIM_MspPostInit+0x90>)
 8001474:	f000 fac4 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2302      	movs	r3, #2
 8001482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <HAL_TIM_MspPostInit+0x94>)
 800148c:	f000 fab8 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40000400 	.word	0x40000400
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_UART_MspInit+0x8c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d131      	bne.n	800152c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d2:	61d3      	str	r3, [r2, #28]
 80014d4:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	480b      	ldr	r0, [pc, #44]	@ (800153c <HAL_UART_MspInit+0x94>)
 800150e:	f000 fa77 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001512:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4619      	mov	r1, r3
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <HAL_UART_MspInit+0x94>)
 8001528:	f000 fa6a 	bl	8001a00 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40004800 	.word	0x40004800
 8001538:	40021000 	.word	0x40021000
 800153c:	40010c00 	.word	0x40010c00

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f936 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <_kill>:

int _kill(int pid, int sig)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b0:	f002 fdcc 	bl	800414c <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2216      	movs	r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_exit>:

void _exit (int status)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffe7 	bl	80015a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <_exit+0x12>

080015dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e00a      	b.n	8001604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ee:	f3af 8000 	nop.w
 80015f2:	4601      	mov	r1, r0
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf0      	blt.n	80015ee <_read+0x12>
  }

  return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e009      	b.n	800163c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf1      	blt.n	8001628 <_write+0x12>
  }
  return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_close>:

int _close(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001674:	605a      	str	r2, [r3, #4]
  return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <_isatty>:

int _isatty(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	@ (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f002 fd34 	bl	800414c <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20005000 	.word	0x20005000
 8001710:	00000400 	.word	0x00000400
 8001714:	200002e4 	.word	0x200002e4
 8001718:	20000438 	.word	0x20000438

0800171c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001728:	f7ff fff8 	bl	800171c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800172e:	490c      	ldr	r1, [pc, #48]	@ (8001760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001730:	4a0c      	ldr	r2, [pc, #48]	@ (8001764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001744:	4c09      	ldr	r4, [pc, #36]	@ (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001752:	f002 fd01 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001756:	f7ff fbe1 	bl	8000f1c <main>
  bx lr
 800175a:	4770      	bx	lr
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001764:	08006be4 	.word	0x08006be4
  ldr r2, =_sbss
 8001768:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800176c:	20000438 	.word	0x20000438

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x28>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x28>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f907 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fdee 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f911 	bl	80019e6 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f000 f8e7 	bl	80019ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_IncTick+0x1c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_IncTick+0x20>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a03      	ldr	r2, [pc, #12]	@ (8001820 <HAL_IncTick+0x20>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000008 	.word	0x20000008
 8001820:	200002e8 	.word	0x200002e8

08001824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b02      	ldr	r3, [pc, #8]	@ (8001834 <HAL_GetTick+0x10>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	200002e8 	.word	0x200002e8

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001978:	f7ff ff90 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff49 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff5e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff90 	bl	80018f0 <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5f 	bl	800189c <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffb0 	bl	8001954 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b08b      	sub	sp, #44	@ 0x2c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e169      	b.n	8001ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a14:	2201      	movs	r2, #1
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8158 	bne.w	8001ce2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4a9a      	ldr	r2, [pc, #616]	@ (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d05e      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a3c:	4a98      	ldr	r2, [pc, #608]	@ (8001ca0 <HAL_GPIO_Init+0x2a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d875      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a42:	4a98      	ldr	r2, [pc, #608]	@ (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d058      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a48:	4a96      	ldr	r2, [pc, #600]	@ (8001ca4 <HAL_GPIO_Init+0x2a4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d86f      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a4e:	4a96      	ldr	r2, [pc, #600]	@ (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d052      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a54:	4a94      	ldr	r2, [pc, #592]	@ (8001ca8 <HAL_GPIO_Init+0x2a8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d869      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a5a:	4a94      	ldr	r2, [pc, #592]	@ (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04c      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a60:	4a92      	ldr	r2, [pc, #584]	@ (8001cac <HAL_GPIO_Init+0x2ac>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d863      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a66:	4a92      	ldr	r2, [pc, #584]	@ (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d046      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
 8001a6c:	4a90      	ldr	r2, [pc, #576]	@ (8001cb0 <HAL_GPIO_Init+0x2b0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d85d      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d82a      	bhi.n	8001acc <HAL_GPIO_Init+0xcc>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d859      	bhi.n	8001b2e <HAL_GPIO_Init+0x12e>
 8001a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <HAL_GPIO_Init+0x80>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001ad5 	.word	0x08001ad5
 8001a88:	08001ae7 	.word	0x08001ae7
 8001a8c:	08001b29 	.word	0x08001b29
 8001a90:	08001b2f 	.word	0x08001b2f
 8001a94:	08001b2f 	.word	0x08001b2f
 8001a98:	08001b2f 	.word	0x08001b2f
 8001a9c:	08001b2f 	.word	0x08001b2f
 8001aa0:	08001b2f 	.word	0x08001b2f
 8001aa4:	08001b2f 	.word	0x08001b2f
 8001aa8:	08001b2f 	.word	0x08001b2f
 8001aac:	08001b2f 	.word	0x08001b2f
 8001ab0:	08001b2f 	.word	0x08001b2f
 8001ab4:	08001b2f 	.word	0x08001b2f
 8001ab8:	08001b2f 	.word	0x08001b2f
 8001abc:	08001b2f 	.word	0x08001b2f
 8001ac0:	08001b2f 	.word	0x08001b2f
 8001ac4:	08001add 	.word	0x08001add
 8001ac8:	08001af1 	.word	0x08001af1
 8001acc:	4a79      	ldr	r2, [pc, #484]	@ (8001cb4 <HAL_GPIO_Init+0x2b4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad2:	e02c      	b.n	8001b2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	623b      	str	r3, [r7, #32]
          break;
 8001ada:	e029      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e024      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	3308      	adds	r3, #8
 8001aec:	623b      	str	r3, [r7, #32]
          break;
 8001aee:	e01f      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	330c      	adds	r3, #12
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e01a      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b02:	2304      	movs	r3, #4
 8001b04:	623b      	str	r3, [r7, #32]
          break;
 8001b06:	e013      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b10:	2308      	movs	r3, #8
 8001b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	611a      	str	r2, [r3, #16]
          break;
 8001b1a:	e009      	b.n	8001b30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	615a      	str	r2, [r3, #20]
          break;
 8001b26:	e003      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x130>
          break;
 8001b2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	@ 0xff
 8001b34:	d801      	bhi.n	8001b3a <HAL_GPIO_Init+0x13a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_Init+0x13e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2bff      	cmp	r3, #255	@ 0xff
 8001b44:	d802      	bhi.n	8001b4c <HAL_GPIO_Init+0x14c>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x152>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	3b08      	subs	r3, #8
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	210f      	movs	r1, #15
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	401a      	ands	r2, r3
 8001b64:	6a39      	ldr	r1, [r7, #32]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b80:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b98:	4a48      	ldr	r2, [pc, #288]	@ (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a40      	ldr	r2, [pc, #256]	@ (8001cc0 <HAL_GPIO_Init+0x2c0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_GPIO_Init+0x1ec>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cc4 <HAL_GPIO_Init+0x2c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1e8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc8 <HAL_GPIO_Init+0x2c8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1e4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001ccc <HAL_GPIO_Init+0x2cc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1e0>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001bec:	2300      	movs	r3, #0
 8001bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bfe:	492f      	ldr	r1, [pc, #188]	@ (8001cbc <HAL_GPIO_Init+0x2bc>)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	492c      	ldr	r1, [pc, #176]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c26:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4928      	ldr	r1, [pc, #160]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c40:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4922      	ldr	r1, [pc, #136]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	491e      	ldr	r1, [pc, #120]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	4918      	ldr	r1, [pc, #96]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4914      	ldr	r1, [pc, #80]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	490e      	ldr	r1, [pc, #56]	@ (8001cd0 <HAL_GPIO_Init+0x2d0>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e021      	b.n	8001ce2 <HAL_GPIO_Init+0x2e2>
 8001c9e:	bf00      	nop
 8001ca0:	10320000 	.word	0x10320000
 8001ca4:	10310000 	.word	0x10310000
 8001ca8:	10220000 	.word	0x10220000
 8001cac:	10210000 	.word	0x10210000
 8001cb0:	10120000 	.word	0x10120000
 8001cb4:	10110000 	.word	0x10110000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010000 	.word	0x40010000
 8001cc0:	40010800 	.word	0x40010800
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40011000 	.word	0x40011000
 8001ccc:	40011400 	.word	0x40011400
 8001cd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_GPIO_Init+0x304>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4909      	ldr	r1, [pc, #36]	@ (8001d04 <HAL_GPIO_Init+0x304>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f47f ae8e 	bne.w	8001a14 <HAL_GPIO_Init+0x14>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	372c      	adds	r7, #44	@ 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e272      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8087 	beq.w	8001e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d58:	4b92      	ldr	r3, [pc, #584]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d00c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d64:	4b8f      	ldr	r3, [pc, #572]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d112      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5e>
 8001d70:	4b8c      	ldr	r3, [pc, #560]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7c:	d10b      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	4b89      	ldr	r3, [pc, #548]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d06c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x12c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d168      	bne.n	8001e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e24c      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x76>
 8001da0:	4b80      	ldr	r3, [pc, #512]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a7f      	ldr	r2, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e02e      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7a      	ldr	r2, [pc, #488]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a77      	ldr	r2, [pc, #476]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0xbc>
 8001dda:	4b72      	ldr	r3, [pc, #456]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a71      	ldr	r2, [pc, #452]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001df4:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b68      	ldr	r3, [pc, #416]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a67      	ldr	r2, [pc, #412]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fd06 	bl	8001824 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fd02 	bl	8001824 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	@ 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e200      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe4>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fcf2 	bl	8001824 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fcee 	bl	8001824 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	@ 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1ec      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x10c>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d063      	beq.n	8001f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e7e:	4b49      	ldr	r3, [pc, #292]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d11c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x18c>
 8001e8a:	4b46      	ldr	r3, [pc, #280]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x176>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1c0      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4939      	ldr	r1, [pc, #228]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e03a      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fca7 	bl	8001824 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eda:	f7ff fca3 	bl	8001824 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1a1      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4927      	ldr	r1, [pc, #156]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0e:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fc86 	bl	8001824 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fc82 	bl	8001824 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e180      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d03a      	beq.n	8001fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_RCC_OscConfig+0x274>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fc66 	bl	8001824 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fc62 	bl	8001824 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e160      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 face 	bl	800251c <RCC_Delay>
 8001f80:	e01c      	b.n	8001fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_RCC_OscConfig+0x274>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7ff fc4c 	bl	8001824 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8e:	e00f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff fc48 	bl	8001824 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d908      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e146      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	42420000 	.word	0x42420000
 8001fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b92      	ldr	r3, [pc, #584]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e9      	bne.n	8001f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a6 	beq.w	8002116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b8b      	ldr	r3, [pc, #556]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a87      	ldr	r2, [pc, #540]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff6:	4b82      	ldr	r3, [pc, #520]	@ (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002002:	4b7f      	ldr	r3, [pc, #508]	@ (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7e      	ldr	r2, [pc, #504]	@ (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7ff fc09 	bl	8001824 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7ff fc05 	bl	8001824 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b64      	cmp	r3, #100	@ 0x64
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e103      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	4b75      	ldr	r3, [pc, #468]	@ (8002200 <HAL_RCC_OscConfig+0x4c8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x312>
 800203c:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a6e      	ldr	r2, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e02d      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x334>
 8002052:	4b6a      	ldr	r3, [pc, #424]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a69      	ldr	r2, [pc, #420]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b67      	ldr	r3, [pc, #412]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a66      	ldr	r2, [pc, #408]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	e01c      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x356>
 8002074:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a60      	ldr	r2, [pc, #384]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b5e      	ldr	r3, [pc, #376]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a5d      	ldr	r2, [pc, #372]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e00b      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800208e:	4b5b      	ldr	r3, [pc, #364]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a5a      	ldr	r2, [pc, #360]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	4b58      	ldr	r3, [pc, #352]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a57      	ldr	r2, [pc, #348]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7ff fbb9 	bl	8001824 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7ff fbb5 	bl	8001824 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0b1      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	4b4b      	ldr	r3, [pc, #300]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ee      	beq.n	80020b6 <HAL_RCC_OscConfig+0x37e>
 80020d8:	e014      	b.n	8002104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff fba3 	bl	8001824 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb9f 	bl	8001824 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e09b      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ee      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a3b      	ldr	r2, [pc, #236]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002120:	4b36      	ldr	r3, [pc, #216]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d061      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d146      	bne.n	80021c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7ff fb73 	bl	8001824 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff fb6f 	bl	8001824 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e06d      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002154:	4b29      	ldr	r3, [pc, #164]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002168:	d108      	bne.n	800217c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800216a:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4921      	ldr	r1, [pc, #132]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a19      	ldr	r1, [r3, #32]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	430b      	orrs	r3, r1
 800218e:	491b      	ldr	r1, [pc, #108]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff fb43 	bl	8001824 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff fb3f 	bl	8001824 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e03d      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46a>
 80021c0:	e035      	b.n	800222e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fb2c 	bl	8001824 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fb28 	bl	8001824 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e026      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x498>
 80021ee:	e01e      	b.n	800222e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e019      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_OscConfig+0x500>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	429a      	cmp	r2, r3
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4965      	ldr	r1, [pc, #404]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a58      	ldr	r2, [pc, #352]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff fa7a 	bl	8001824 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff fa76 	bl	8001824 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4922      	ldr	r1, [pc, #136]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	@ (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f9d8 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000
 8002400:	40021000 	.word	0x40021000
 8002404:	080067d4 	.word	0x080067d4
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x30>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x36>
 800243e:	e027      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	e027      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	fb03 f202 	mul.w	r2, r3, r2
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e004      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	693b      	ldr	r3, [r7, #16]
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	007a1200 	.word	0x007a1200
 80024ac:	080067ec 	.word	0x080067ec
 80024b0:	080067fc 	.word	0x080067fc
 80024b4:	003d0900 	.word	0x003d0900

080024b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b02      	ldr	r3, [pc, #8]	@ (80024c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000000 	.word	0x20000000

080024cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d0:	f7ff fff2 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	@ (80024f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	080067e4 	.word	0x080067e4

080024f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0adb      	lsrs	r3, r3, #11
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	4903      	ldr	r1, [pc, #12]	@ (8002518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	080067e4 	.word	0x080067e4

0800251c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <RCC_Delay+0x34>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <RCC_Delay+0x38>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0a5b      	lsrs	r3, r3, #9
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002538:	bf00      	nop
  }
  while (Delay --);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e5a      	subs	r2, r3, #1
 800253e:	60fa      	str	r2, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f9      	bne.n	8002538 <RCC_Delay+0x1c>
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000000 	.word	0x20000000
 8002554:	10624dd3 	.word	0x10624dd3

08002558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e041      	b.n	80025ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe ff28 	bl	80013d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f992 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_TIM_PWM_Start+0x24>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e022      	b.n	8002662 <HAL_TIM_PWM_Start+0x6a>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d109      	bne.n	8002636 <HAL_TIM_PWM_Start+0x3e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	e015      	b.n	8002662 <HAL_TIM_PWM_Start+0x6a>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d109      	bne.n	8002650 <HAL_TIM_PWM_Start+0x58>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e008      	b.n	8002662 <HAL_TIM_PWM_Start+0x6a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e05e      	b.n	8002728 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <HAL_TIM_PWM_Start+0x82>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002678:	e013      	b.n	80026a2 <HAL_TIM_PWM_Start+0xaa>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start+0x92>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002688:	e00b      	b.n	80026a2 <HAL_TIM_PWM_Start+0xaa>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start+0xa2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002698:	e003      	b.n	80026a2 <HAL_TIM_PWM_Start+0xaa>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2201      	movs	r2, #1
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fafe 	bl	8002cac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002730 <HAL_TIM_PWM_Start+0x138>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d107      	bne.n	80026ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <HAL_TIM_PWM_Start+0x138>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00e      	beq.n	80026f2 <HAL_TIM_PWM_Start+0xfa>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026dc:	d009      	beq.n	80026f2 <HAL_TIM_PWM_Start+0xfa>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <HAL_TIM_PWM_Start+0x13c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d004      	beq.n	80026f2 <HAL_TIM_PWM_Start+0xfa>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <HAL_TIM_PWM_Start+0x140>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d111      	bne.n	8002716 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d010      	beq.n	8002726 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002714:	e007      	b.n	8002726 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800

0800273c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0ae      	b.n	80028b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	f200 809f 	bhi.w	80028a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800276a:	a201      	add	r2, pc, #4	@ (adr r2, 8002770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800276c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002770:	080027a5 	.word	0x080027a5
 8002774:	080028a9 	.word	0x080028a9
 8002778:	080028a9 	.word	0x080028a9
 800277c:	080028a9 	.word	0x080028a9
 8002780:	080027e5 	.word	0x080027e5
 8002784:	080028a9 	.word	0x080028a9
 8002788:	080028a9 	.word	0x080028a9
 800278c:	080028a9 	.word	0x080028a9
 8002790:	08002827 	.word	0x08002827
 8002794:	080028a9 	.word	0x080028a9
 8002798:	080028a9 	.word	0x080028a9
 800279c:	080028a9 	.word	0x080028a9
 80027a0:	08002867 	.word	0x08002867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8f6 	bl	800299c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0208 	orr.w	r2, r2, #8
 80027be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0204 	bic.w	r2, r2, #4
 80027ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	619a      	str	r2, [r3, #24]
      break;
 80027e2:	e064      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f93c 	bl	8002a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6999      	ldr	r1, [r3, #24]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	021a      	lsls	r2, r3, #8
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	619a      	str	r2, [r3, #24]
      break;
 8002824:	e043      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f985 	bl	8002b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0208 	orr.w	r2, r2, #8
 8002840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0204 	bic.w	r2, r2, #4
 8002850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
      break;
 8002864:	e023      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f9cf 	bl	8002c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69d9      	ldr	r1, [r3, #28]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	61da      	str	r2, [r3, #28]
      break;
 80028a6:	e002      	b.n	80028ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	75fb      	strb	r3, [r7, #23]
      break;
 80028ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002990 <TIM_Base_SetConfig+0xd0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002994 <TIM_Base_SetConfig+0xd4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002998 <TIM_Base_SetConfig+0xd8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a22      	ldr	r2, [pc, #136]	@ (8002990 <TIM_Base_SetConfig+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <TIM_Base_SetConfig+0xd4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1e      	ldr	r2, [pc, #120]	@ (8002998 <TIM_Base_SetConfig+0xd8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <TIM_Base_SetConfig+0xd0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 0201 	bic.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	611a      	str	r2, [r3, #16]
  }
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800

0800299c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f023 0201 	bic.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 0302 	bic.w	r3, r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a64 <TIM_OC1_SetConfig+0xc8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0308 	bic.w	r3, r3, #8
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <TIM_OC1_SetConfig+0xc8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d111      	bne.n	8002a3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00

08002a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0210 	bic.w	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0320 	bic.w	r3, r3, #32
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b38 <TIM_OC2_SetConfig+0xd0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10d      	bne.n	8002ae4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	@ (8002b38 <TIM_OC2_SetConfig+0xd0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d113      	bne.n	8002b14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002af2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <TIM_OC3_SetConfig+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10d      	bne.n	8002bb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <TIM_OC3_SetConfig+0xd0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca8 <TIM_OC4_SetConfig+0x98>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d109      	bne.n	8002c84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a1a      	ldr	r2, [r3, #32]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	401a      	ands	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	621a      	str	r2, [r3, #32]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e046      	b.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a16      	ldr	r2, [pc, #88]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d009      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10c      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e042      	b.n	8002e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fb66 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f97d 	bl	80030f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	f040 8081 	bne.w	8002f74 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_UART_Receive+0x2e>
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e079      	b.n	8002f76 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2222      	movs	r2, #34	@ 0x22
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e96:	f7fe fcc5 	bl	8001824 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_UART_Receive+0x74>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e003      	b.n	8002ecc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ecc:	e047      	b.n	8002f5e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f850 	bl	8002f7e <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e042      	b.n	8002f76 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e01f      	b.n	8002f50 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f18:	d007      	beq.n	8002f2a <HAL_UART_Receive+0xda>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_UART_Receive+0xe8>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e008      	b.n	8002f4a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1b2      	bne.n	8002ece <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8e:	e03b      	b.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f96:	d037      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f98:	f7fe fc44 	bl	8001824 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e03a      	b.n	8003028 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d023      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b80      	cmp	r3, #128	@ 0x80
 8002fc4:	d020      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	d01d      	beq.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d116      	bne.n	8003008 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f81d 	bl	8003030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e00f      	b.n	8003028 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	4013      	ands	r3, r2
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	429a      	cmp	r2, r3
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	429a      	cmp	r2, r3
 8003024:	d0b4      	beq.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003030:	b480      	push	{r7}
 8003032:	b095      	sub	sp, #84	@ 0x54
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003058:	643a      	str	r2, [r7, #64]	@ 0x40
 800305a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800305e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	61fb      	str	r3, [r7, #28]
   return(result);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800308c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d119      	bne.n	80030dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030c8:	61ba      	str	r2, [r7, #24]
 80030ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	613b      	str	r3, [r7, #16]
   return(result);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030ea:	bf00      	nop
 80030ec:	3754      	adds	r7, #84	@ 0x54
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800312e:	f023 030c 	bic.w	r3, r3, #12
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	430b      	orrs	r3, r1
 800313a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2c      	ldr	r2, [pc, #176]	@ (8003208 <UART_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7ff f9ca 	bl	80024f4 <HAL_RCC_GetPCLK2Freq>
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	e002      	b.n	800316a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7ff f9b2 	bl	80024cc <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	4a22      	ldr	r2, [pc, #136]	@ (800320c <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	0119      	lsls	r1, r3, #4
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4b1a      	ldr	r3, [pc, #104]	@ (800320c <UART_SetConfig+0x118>)
 80031a2:	fba3 0302 	umull	r0, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2064      	movs	r0, #100	@ 0x64
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	@ 0x32
 80031b4:	4a15      	ldr	r2, [pc, #84]	@ (800320c <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031c0:	4419      	add	r1, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009a      	lsls	r2, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <UART_SetConfig+0x118>)
 80031da:	fba3 0302 	umull	r0, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2064      	movs	r0, #100	@ 0x64
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	3332      	adds	r3, #50	@ 0x32
 80031ec:	4a07      	ldr	r2, [pc, #28]	@ (800320c <UART_SetConfig+0x118>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	440a      	add	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40013800 	.word	0x40013800
 800320c:	51eb851f 	.word	0x51eb851f

08003210 <atof>:
 8003210:	2100      	movs	r1, #0
 8003212:	f000 bf11 	b.w	8004038 <strtod>
	...

08003218 <siscanf>:
 8003218:	b40e      	push	{r1, r2, r3}
 800321a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800321e:	b530      	push	{r4, r5, lr}
 8003220:	b09c      	sub	sp, #112	@ 0x70
 8003222:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003224:	f854 5b04 	ldr.w	r5, [r4], #4
 8003228:	f8ad 2014 	strh.w	r2, [sp, #20]
 800322c:	9002      	str	r0, [sp, #8]
 800322e:	9006      	str	r0, [sp, #24]
 8003230:	f7fc ff8e 	bl	8000150 <strlen>
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <siscanf+0x4c>)
 8003236:	9003      	str	r0, [sp, #12]
 8003238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800323a:	2300      	movs	r3, #0
 800323c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800323e:	9314      	str	r3, [sp, #80]	@ 0x50
 8003240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003244:	9007      	str	r0, [sp, #28]
 8003246:	4808      	ldr	r0, [pc, #32]	@ (8003268 <siscanf+0x50>)
 8003248:	f8ad 3016 	strh.w	r3, [sp, #22]
 800324c:	462a      	mov	r2, r5
 800324e:	4623      	mov	r3, r4
 8003250:	a902      	add	r1, sp, #8
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	9401      	str	r4, [sp, #4]
 8003256:	f001 fb95 	bl	8004984 <__ssvfiscanf_r>
 800325a:	b01c      	add	sp, #112	@ 0x70
 800325c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003260:	b003      	add	sp, #12
 8003262:	4770      	bx	lr
 8003264:	0800328f 	.word	0x0800328f
 8003268:	20000184 	.word	0x20000184

0800326c <__sread>:
 800326c:	b510      	push	{r4, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003274:	f000 ff46 	bl	8004104 <_read_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	bfab      	itete	ge
 800327c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800327e:	89a3      	ldrhlt	r3, [r4, #12]
 8003280:	181b      	addge	r3, r3, r0
 8003282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003286:	bfac      	ite	ge
 8003288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800328a:	81a3      	strhlt	r3, [r4, #12]
 800328c:	bd10      	pop	{r4, pc}

0800328e <__seofread>:
 800328e:	2000      	movs	r0, #0
 8003290:	4770      	bx	lr

08003292 <__swrite>:
 8003292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003296:	461f      	mov	r7, r3
 8003298:	898b      	ldrh	r3, [r1, #12]
 800329a:	4605      	mov	r5, r0
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	460c      	mov	r4, r1
 80032a0:	4616      	mov	r6, r2
 80032a2:	d505      	bpl.n	80032b0 <__swrite+0x1e>
 80032a4:	2302      	movs	r3, #2
 80032a6:	2200      	movs	r2, #0
 80032a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ac:	f000 ff18 	bl	80040e0 <_lseek_r>
 80032b0:	89a3      	ldrh	r3, [r4, #12]
 80032b2:	4632      	mov	r2, r6
 80032b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	4628      	mov	r0, r5
 80032bc:	463b      	mov	r3, r7
 80032be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032c6:	f000 bf2f 	b.w	8004128 <_write_r>

080032ca <__sseek>:
 80032ca:	b510      	push	{r4, lr}
 80032cc:	460c      	mov	r4, r1
 80032ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d2:	f000 ff05 	bl	80040e0 <_lseek_r>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	bf15      	itete	ne
 80032dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032e6:	81a3      	strheq	r3, [r4, #12]
 80032e8:	bf18      	it	ne
 80032ea:	81a3      	strhne	r3, [r4, #12]
 80032ec:	bd10      	pop	{r4, pc}

080032ee <__sclose>:
 80032ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f2:	f000 bee5 	b.w	80040c0 <_close_r>
	...

080032f8 <std>:
 80032f8:	2300      	movs	r3, #0
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003306:	6083      	str	r3, [r0, #8]
 8003308:	8181      	strh	r1, [r0, #12]
 800330a:	6643      	str	r3, [r0, #100]	@ 0x64
 800330c:	81c2      	strh	r2, [r0, #14]
 800330e:	6183      	str	r3, [r0, #24]
 8003310:	4619      	mov	r1, r3
 8003312:	2208      	movs	r2, #8
 8003314:	305c      	adds	r0, #92	@ 0x5c
 8003316:	f000 fecb 	bl	80040b0 <memset>
 800331a:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <std+0x58>)
 800331c:	6224      	str	r4, [r4, #32]
 800331e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <std+0x5c>)
 8003322:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <std+0x60>)
 8003326:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003328:	4b0c      	ldr	r3, [pc, #48]	@ (800335c <std+0x64>)
 800332a:	6323      	str	r3, [r4, #48]	@ 0x30
 800332c:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <std+0x68>)
 800332e:	429c      	cmp	r4, r3
 8003330:	d006      	beq.n	8003340 <std+0x48>
 8003332:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003336:	4294      	cmp	r4, r2
 8003338:	d002      	beq.n	8003340 <std+0x48>
 800333a:	33d0      	adds	r3, #208	@ 0xd0
 800333c:	429c      	cmp	r4, r3
 800333e:	d105      	bne.n	800334c <std+0x54>
 8003340:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003348:	f000 bf2a 	b.w	80041a0 <__retarget_lock_init_recursive>
 800334c:	bd10      	pop	{r4, pc}
 800334e:	bf00      	nop
 8003350:	0800326d 	.word	0x0800326d
 8003354:	08003293 	.word	0x08003293
 8003358:	080032cb 	.word	0x080032cb
 800335c:	080032ef 	.word	0x080032ef
 8003360:	200002ec 	.word	0x200002ec

08003364 <stdio_exit_handler>:
 8003364:	4a02      	ldr	r2, [pc, #8]	@ (8003370 <stdio_exit_handler+0xc>)
 8003366:	4903      	ldr	r1, [pc, #12]	@ (8003374 <stdio_exit_handler+0x10>)
 8003368:	4803      	ldr	r0, [pc, #12]	@ (8003378 <stdio_exit_handler+0x14>)
 800336a:	f000 be71 	b.w	8004050 <_fwalk_sglue>
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c
 8003374:	080051dd 	.word	0x080051dd
 8003378:	20000188 	.word	0x20000188

0800337c <cleanup_stdio>:
 800337c:	6841      	ldr	r1, [r0, #4]
 800337e:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <cleanup_stdio+0x34>)
 8003380:	b510      	push	{r4, lr}
 8003382:	4299      	cmp	r1, r3
 8003384:	4604      	mov	r4, r0
 8003386:	d001      	beq.n	800338c <cleanup_stdio+0x10>
 8003388:	f001 ff28 	bl	80051dc <_fflush_r>
 800338c:	68a1      	ldr	r1, [r4, #8]
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <cleanup_stdio+0x38>)
 8003390:	4299      	cmp	r1, r3
 8003392:	d002      	beq.n	800339a <cleanup_stdio+0x1e>
 8003394:	4620      	mov	r0, r4
 8003396:	f001 ff21 	bl	80051dc <_fflush_r>
 800339a:	68e1      	ldr	r1, [r4, #12]
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <cleanup_stdio+0x3c>)
 800339e:	4299      	cmp	r1, r3
 80033a0:	d004      	beq.n	80033ac <cleanup_stdio+0x30>
 80033a2:	4620      	mov	r0, r4
 80033a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a8:	f001 bf18 	b.w	80051dc <_fflush_r>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	bf00      	nop
 80033b0:	200002ec 	.word	0x200002ec
 80033b4:	20000354 	.word	0x20000354
 80033b8:	200003bc 	.word	0x200003bc

080033bc <global_stdio_init.part.0>:
 80033bc:	b510      	push	{r4, lr}
 80033be:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <global_stdio_init.part.0+0x30>)
 80033c0:	4c0b      	ldr	r4, [pc, #44]	@ (80033f0 <global_stdio_init.part.0+0x34>)
 80033c2:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <global_stdio_init.part.0+0x38>)
 80033c4:	4620      	mov	r0, r4
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	2104      	movs	r1, #4
 80033ca:	2200      	movs	r2, #0
 80033cc:	f7ff ff94 	bl	80032f8 <std>
 80033d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033d4:	2201      	movs	r2, #1
 80033d6:	2109      	movs	r1, #9
 80033d8:	f7ff ff8e 	bl	80032f8 <std>
 80033dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033e0:	2202      	movs	r2, #2
 80033e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e6:	2112      	movs	r1, #18
 80033e8:	f7ff bf86 	b.w	80032f8 <std>
 80033ec:	20000424 	.word	0x20000424
 80033f0:	200002ec 	.word	0x200002ec
 80033f4:	08003365 	.word	0x08003365

080033f8 <__sfp_lock_acquire>:
 80033f8:	4801      	ldr	r0, [pc, #4]	@ (8003400 <__sfp_lock_acquire+0x8>)
 80033fa:	f000 bed2 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 80033fe:	bf00      	nop
 8003400:	2000042d 	.word	0x2000042d

08003404 <__sfp_lock_release>:
 8003404:	4801      	ldr	r0, [pc, #4]	@ (800340c <__sfp_lock_release+0x8>)
 8003406:	f000 becd 	b.w	80041a4 <__retarget_lock_release_recursive>
 800340a:	bf00      	nop
 800340c:	2000042d 	.word	0x2000042d

08003410 <__sinit>:
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	f7ff fff0 	bl	80033f8 <__sfp_lock_acquire>
 8003418:	6a23      	ldr	r3, [r4, #32]
 800341a:	b11b      	cbz	r3, 8003424 <__sinit+0x14>
 800341c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003420:	f7ff bff0 	b.w	8003404 <__sfp_lock_release>
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <__sinit+0x28>)
 8003426:	6223      	str	r3, [r4, #32]
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <__sinit+0x2c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f5      	bne.n	800341c <__sinit+0xc>
 8003430:	f7ff ffc4 	bl	80033bc <global_stdio_init.part.0>
 8003434:	e7f2      	b.n	800341c <__sinit+0xc>
 8003436:	bf00      	nop
 8003438:	0800337d 	.word	0x0800337d
 800343c:	20000424 	.word	0x20000424

08003440 <sulp>:
 8003440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003444:	460f      	mov	r7, r1
 8003446:	4690      	mov	r8, r2
 8003448:	f002 fa6e 	bl	8005928 <__ulp>
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	f1b8 0f00 	cmp.w	r8, #0
 8003454:	d011      	beq.n	800347a <sulp+0x3a>
 8003456:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800345a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800345e:	2b00      	cmp	r3, #0
 8003460:	dd0b      	ble.n	800347a <sulp+0x3a>
 8003462:	2400      	movs	r4, #0
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800346a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800346e:	4622      	mov	r2, r4
 8003470:	462b      	mov	r3, r5
 8003472:	f7fd f8e5 	bl	8000640 <__aeabi_dmul>
 8003476:	4604      	mov	r4, r0
 8003478:	460d      	mov	r5, r1
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003482:	0000      	movs	r0, r0
 8003484:	0000      	movs	r0, r0
	...

08003488 <_strtod_l>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	b09f      	sub	sp, #124	@ 0x7c
 800348e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8003490:	2200      	movs	r2, #0
 8003492:	460c      	mov	r4, r1
 8003494:	921a      	str	r2, [sp, #104]	@ 0x68
 8003496:	f04f 0a00 	mov.w	sl, #0
 800349a:	f04f 0b00 	mov.w	fp, #0
 800349e:	460a      	mov	r2, r1
 80034a0:	9005      	str	r0, [sp, #20]
 80034a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80034a4:	7811      	ldrb	r1, [r2, #0]
 80034a6:	292b      	cmp	r1, #43	@ 0x2b
 80034a8:	d048      	beq.n	800353c <_strtod_l+0xb4>
 80034aa:	d836      	bhi.n	800351a <_strtod_l+0x92>
 80034ac:	290d      	cmp	r1, #13
 80034ae:	d830      	bhi.n	8003512 <_strtod_l+0x8a>
 80034b0:	2908      	cmp	r1, #8
 80034b2:	d830      	bhi.n	8003516 <_strtod_l+0x8e>
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d039      	beq.n	800352c <_strtod_l+0xa4>
 80034b8:	2200      	movs	r2, #0
 80034ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80034bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80034be:	782a      	ldrb	r2, [r5, #0]
 80034c0:	2a30      	cmp	r2, #48	@ 0x30
 80034c2:	f040 80b1 	bne.w	8003628 <_strtod_l+0x1a0>
 80034c6:	786a      	ldrb	r2, [r5, #1]
 80034c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80034cc:	2a58      	cmp	r2, #88	@ 0x58
 80034ce:	d16c      	bne.n	80035aa <_strtod_l+0x122>
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80034d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003710 <_strtod_l+0x288>)
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	ab1a      	add	r3, sp, #104	@ 0x68
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	9805      	ldr	r0, [sp, #20]
 80034de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80034e0:	a919      	add	r1, sp, #100	@ 0x64
 80034e2:	f000 ff25 	bl	8004330 <__gethex>
 80034e6:	f010 060f 	ands.w	r6, r0, #15
 80034ea:	4604      	mov	r4, r0
 80034ec:	d005      	beq.n	80034fa <_strtod_l+0x72>
 80034ee:	2e06      	cmp	r6, #6
 80034f0:	d126      	bne.n	8003540 <_strtod_l+0xb8>
 80034f2:	2300      	movs	r3, #0
 80034f4:	3501      	adds	r5, #1
 80034f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80034f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 8584 	bne.w	800400a <_strtod_l+0xb82>
 8003502:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003504:	b1bb      	cbz	r3, 8003536 <_strtod_l+0xae>
 8003506:	4650      	mov	r0, sl
 8003508:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800350c:	b01f      	add	sp, #124	@ 0x7c
 800350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003512:	2920      	cmp	r1, #32
 8003514:	d1d0      	bne.n	80034b8 <_strtod_l+0x30>
 8003516:	3201      	adds	r2, #1
 8003518:	e7c3      	b.n	80034a2 <_strtod_l+0x1a>
 800351a:	292d      	cmp	r1, #45	@ 0x2d
 800351c:	d1cc      	bne.n	80034b8 <_strtod_l+0x30>
 800351e:	2101      	movs	r1, #1
 8003520:	910b      	str	r1, [sp, #44]	@ 0x2c
 8003522:	1c51      	adds	r1, r2, #1
 8003524:	9119      	str	r1, [sp, #100]	@ 0x64
 8003526:	7852      	ldrb	r2, [r2, #1]
 8003528:	2a00      	cmp	r2, #0
 800352a:	d1c7      	bne.n	80034bc <_strtod_l+0x34>
 800352c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800352e:	9419      	str	r4, [sp, #100]	@ 0x64
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8568 	bne.w	8004006 <_strtod_l+0xb7e>
 8003536:	4650      	mov	r0, sl
 8003538:	4659      	mov	r1, fp
 800353a:	e7e7      	b.n	800350c <_strtod_l+0x84>
 800353c:	2100      	movs	r1, #0
 800353e:	e7ef      	b.n	8003520 <_strtod_l+0x98>
 8003540:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003542:	b13a      	cbz	r2, 8003554 <_strtod_l+0xcc>
 8003544:	2135      	movs	r1, #53	@ 0x35
 8003546:	a81c      	add	r0, sp, #112	@ 0x70
 8003548:	f002 fade 	bl	8005b08 <__copybits>
 800354c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800354e:	9805      	ldr	r0, [sp, #20]
 8003550:	f001 feb8 	bl	80052c4 <_Bfree>
 8003554:	3e01      	subs	r6, #1
 8003556:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8003558:	2e04      	cmp	r6, #4
 800355a:	d806      	bhi.n	800356a <_strtod_l+0xe2>
 800355c:	e8df f006 	tbb	[pc, r6]
 8003560:	201d0314 	.word	0x201d0314
 8003564:	14          	.byte	0x14
 8003565:	00          	.byte	0x00
 8003566:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800356a:	05e1      	lsls	r1, r4, #23
 800356c:	bf48      	it	mi
 800356e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8003572:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003576:	0d1b      	lsrs	r3, r3, #20
 8003578:	051b      	lsls	r3, r3, #20
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1bd      	bne.n	80034fa <_strtod_l+0x72>
 800357e:	f000 fde5 	bl	800414c <__errno>
 8003582:	2322      	movs	r3, #34	@ 0x22
 8003584:	6003      	str	r3, [r0, #0]
 8003586:	e7b8      	b.n	80034fa <_strtod_l+0x72>
 8003588:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800358c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8003590:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003594:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003598:	e7e7      	b.n	800356a <_strtod_l+0xe2>
 800359a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8003714 <_strtod_l+0x28c>
 800359e:	e7e4      	b.n	800356a <_strtod_l+0xe2>
 80035a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80035a4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80035a8:	e7df      	b.n	800356a <_strtod_l+0xe2>
 80035aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b30      	cmp	r3, #48	@ 0x30
 80035b4:	d0f9      	beq.n	80035aa <_strtod_l+0x122>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d09f      	beq.n	80034fa <_strtod_l+0x72>
 80035ba:	2301      	movs	r3, #1
 80035bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80035be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80035c0:	220a      	movs	r2, #10
 80035c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80035c4:	2300      	movs	r3, #0
 80035c6:	461f      	mov	r7, r3
 80035c8:	9308      	str	r3, [sp, #32]
 80035ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80035cc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80035ce:	7805      	ldrb	r5, [r0, #0]
 80035d0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80035d4:	b2d9      	uxtb	r1, r3
 80035d6:	2909      	cmp	r1, #9
 80035d8:	d928      	bls.n	800362c <_strtod_l+0x1a4>
 80035da:	2201      	movs	r2, #1
 80035dc:	494e      	ldr	r1, [pc, #312]	@ (8003718 <_strtod_l+0x290>)
 80035de:	f000 fd55 	bl	800408c <strncmp>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d032      	beq.n	800364c <_strtod_l+0x1c4>
 80035e6:	2000      	movs	r0, #0
 80035e8:	462a      	mov	r2, r5
 80035ea:	4681      	mov	r9, r0
 80035ec:	463d      	mov	r5, r7
 80035ee:	4603      	mov	r3, r0
 80035f0:	2a65      	cmp	r2, #101	@ 0x65
 80035f2:	d001      	beq.n	80035f8 <_strtod_l+0x170>
 80035f4:	2a45      	cmp	r2, #69	@ 0x45
 80035f6:	d114      	bne.n	8003622 <_strtod_l+0x19a>
 80035f8:	b91d      	cbnz	r5, 8003602 <_strtod_l+0x17a>
 80035fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035fc:	4302      	orrs	r2, r0
 80035fe:	d095      	beq.n	800352c <_strtod_l+0xa4>
 8003600:	2500      	movs	r5, #0
 8003602:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8003604:	1c62      	adds	r2, r4, #1
 8003606:	9219      	str	r2, [sp, #100]	@ 0x64
 8003608:	7862      	ldrb	r2, [r4, #1]
 800360a:	2a2b      	cmp	r2, #43	@ 0x2b
 800360c:	d077      	beq.n	80036fe <_strtod_l+0x276>
 800360e:	2a2d      	cmp	r2, #45	@ 0x2d
 8003610:	d07b      	beq.n	800370a <_strtod_l+0x282>
 8003612:	f04f 0c00 	mov.w	ip, #0
 8003616:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800361a:	2909      	cmp	r1, #9
 800361c:	f240 8082 	bls.w	8003724 <_strtod_l+0x29c>
 8003620:	9419      	str	r4, [sp, #100]	@ 0x64
 8003622:	f04f 0800 	mov.w	r8, #0
 8003626:	e0a2      	b.n	800376e <_strtod_l+0x2e6>
 8003628:	2300      	movs	r3, #0
 800362a:	e7c7      	b.n	80035bc <_strtod_l+0x134>
 800362c:	2f08      	cmp	r7, #8
 800362e:	bfd5      	itete	le
 8003630:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8003632:	9908      	ldrgt	r1, [sp, #32]
 8003634:	fb02 3301 	mlale	r3, r2, r1, r3
 8003638:	fb02 3301 	mlagt	r3, r2, r1, r3
 800363c:	f100 0001 	add.w	r0, r0, #1
 8003640:	bfd4      	ite	le
 8003642:	930a      	strle	r3, [sp, #40]	@ 0x28
 8003644:	9308      	strgt	r3, [sp, #32]
 8003646:	3701      	adds	r7, #1
 8003648:	9019      	str	r0, [sp, #100]	@ 0x64
 800364a:	e7bf      	b.n	80035cc <_strtod_l+0x144>
 800364c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	9219      	str	r2, [sp, #100]	@ 0x64
 8003652:	785a      	ldrb	r2, [r3, #1]
 8003654:	b37f      	cbz	r7, 80036b6 <_strtod_l+0x22e>
 8003656:	4681      	mov	r9, r0
 8003658:	463d      	mov	r5, r7
 800365a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800365e:	2b09      	cmp	r3, #9
 8003660:	d912      	bls.n	8003688 <_strtod_l+0x200>
 8003662:	2301      	movs	r3, #1
 8003664:	e7c4      	b.n	80035f0 <_strtod_l+0x168>
 8003666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003668:	3001      	adds	r0, #1
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	9219      	str	r2, [sp, #100]	@ 0x64
 800366e:	785a      	ldrb	r2, [r3, #1]
 8003670:	2a30      	cmp	r2, #48	@ 0x30
 8003672:	d0f8      	beq.n	8003666 <_strtod_l+0x1de>
 8003674:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8003678:	2b08      	cmp	r3, #8
 800367a:	f200 84cb 	bhi.w	8004014 <_strtod_l+0xb8c>
 800367e:	4681      	mov	r9, r0
 8003680:	2000      	movs	r0, #0
 8003682:	4605      	mov	r5, r0
 8003684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003686:	930c      	str	r3, [sp, #48]	@ 0x30
 8003688:	3a30      	subs	r2, #48	@ 0x30
 800368a:	f100 0301 	add.w	r3, r0, #1
 800368e:	d02a      	beq.n	80036e6 <_strtod_l+0x25e>
 8003690:	4499      	add	r9, r3
 8003692:	210a      	movs	r1, #10
 8003694:	462b      	mov	r3, r5
 8003696:	eb00 0c05 	add.w	ip, r0, r5
 800369a:	4563      	cmp	r3, ip
 800369c:	d10d      	bne.n	80036ba <_strtod_l+0x232>
 800369e:	1c69      	adds	r1, r5, #1
 80036a0:	4401      	add	r1, r0
 80036a2:	4428      	add	r0, r5
 80036a4:	2808      	cmp	r0, #8
 80036a6:	dc16      	bgt.n	80036d6 <_strtod_l+0x24e>
 80036a8:	230a      	movs	r3, #10
 80036aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80036ac:	fb03 2300 	mla	r3, r3, r0, r2
 80036b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80036b2:	2300      	movs	r3, #0
 80036b4:	e018      	b.n	80036e8 <_strtod_l+0x260>
 80036b6:	4638      	mov	r0, r7
 80036b8:	e7da      	b.n	8003670 <_strtod_l+0x1e8>
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	f103 0301 	add.w	r3, r3, #1
 80036c0:	dc03      	bgt.n	80036ca <_strtod_l+0x242>
 80036c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80036c4:	434e      	muls	r6, r1
 80036c6:	960a      	str	r6, [sp, #40]	@ 0x28
 80036c8:	e7e7      	b.n	800369a <_strtod_l+0x212>
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	bfde      	ittt	le
 80036ce:	9e08      	ldrle	r6, [sp, #32]
 80036d0:	434e      	mulle	r6, r1
 80036d2:	9608      	strle	r6, [sp, #32]
 80036d4:	e7e1      	b.n	800369a <_strtod_l+0x212>
 80036d6:	280f      	cmp	r0, #15
 80036d8:	dceb      	bgt.n	80036b2 <_strtod_l+0x22a>
 80036da:	230a      	movs	r3, #10
 80036dc:	9808      	ldr	r0, [sp, #32]
 80036de:	fb03 2300 	mla	r3, r3, r0, r2
 80036e2:	9308      	str	r3, [sp, #32]
 80036e4:	e7e5      	b.n	80036b2 <_strtod_l+0x22a>
 80036e6:	4629      	mov	r1, r5
 80036e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80036ea:	460d      	mov	r5, r1
 80036ec:	1c50      	adds	r0, r2, #1
 80036ee:	9019      	str	r0, [sp, #100]	@ 0x64
 80036f0:	7852      	ldrb	r2, [r2, #1]
 80036f2:	4618      	mov	r0, r3
 80036f4:	e7b1      	b.n	800365a <_strtod_l+0x1d2>
 80036f6:	f04f 0900 	mov.w	r9, #0
 80036fa:	2301      	movs	r3, #1
 80036fc:	e77d      	b.n	80035fa <_strtod_l+0x172>
 80036fe:	f04f 0c00 	mov.w	ip, #0
 8003702:	1ca2      	adds	r2, r4, #2
 8003704:	9219      	str	r2, [sp, #100]	@ 0x64
 8003706:	78a2      	ldrb	r2, [r4, #2]
 8003708:	e785      	b.n	8003616 <_strtod_l+0x18e>
 800370a:	f04f 0c01 	mov.w	ip, #1
 800370e:	e7f8      	b.n	8003702 <_strtod_l+0x27a>
 8003710:	08006820 	.word	0x08006820
 8003714:	7ff00000 	.word	0x7ff00000
 8003718:	080067fe 	.word	0x080067fe
 800371c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800371e:	1c51      	adds	r1, r2, #1
 8003720:	9119      	str	r1, [sp, #100]	@ 0x64
 8003722:	7852      	ldrb	r2, [r2, #1]
 8003724:	2a30      	cmp	r2, #48	@ 0x30
 8003726:	d0f9      	beq.n	800371c <_strtod_l+0x294>
 8003728:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800372c:	2908      	cmp	r1, #8
 800372e:	f63f af78 	bhi.w	8003622 <_strtod_l+0x19a>
 8003732:	f04f 080a 	mov.w	r8, #10
 8003736:	3a30      	subs	r2, #48	@ 0x30
 8003738:	920e      	str	r2, [sp, #56]	@ 0x38
 800373a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800373c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800373e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8003740:	1c56      	adds	r6, r2, #1
 8003742:	9619      	str	r6, [sp, #100]	@ 0x64
 8003744:	7852      	ldrb	r2, [r2, #1]
 8003746:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800374a:	f1be 0f09 	cmp.w	lr, #9
 800374e:	d939      	bls.n	80037c4 <_strtod_l+0x33c>
 8003750:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003752:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8003756:	1a76      	subs	r6, r6, r1
 8003758:	2e08      	cmp	r6, #8
 800375a:	dc03      	bgt.n	8003764 <_strtod_l+0x2dc>
 800375c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800375e:	4588      	cmp	r8, r1
 8003760:	bfa8      	it	ge
 8003762:	4688      	movge	r8, r1
 8003764:	f1bc 0f00 	cmp.w	ip, #0
 8003768:	d001      	beq.n	800376e <_strtod_l+0x2e6>
 800376a:	f1c8 0800 	rsb	r8, r8, #0
 800376e:	2d00      	cmp	r5, #0
 8003770:	d14e      	bne.n	8003810 <_strtod_l+0x388>
 8003772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003774:	4308      	orrs	r0, r1
 8003776:	f47f aec0 	bne.w	80034fa <_strtod_l+0x72>
 800377a:	2b00      	cmp	r3, #0
 800377c:	f47f aed6 	bne.w	800352c <_strtod_l+0xa4>
 8003780:	2a69      	cmp	r2, #105	@ 0x69
 8003782:	d028      	beq.n	80037d6 <_strtod_l+0x34e>
 8003784:	dc25      	bgt.n	80037d2 <_strtod_l+0x34a>
 8003786:	2a49      	cmp	r2, #73	@ 0x49
 8003788:	d025      	beq.n	80037d6 <_strtod_l+0x34e>
 800378a:	2a4e      	cmp	r2, #78	@ 0x4e
 800378c:	f47f aece 	bne.w	800352c <_strtod_l+0xa4>
 8003790:	499a      	ldr	r1, [pc, #616]	@ (80039fc <_strtod_l+0x574>)
 8003792:	a819      	add	r0, sp, #100	@ 0x64
 8003794:	f000 ffee 	bl	8004774 <__match>
 8003798:	2800      	cmp	r0, #0
 800379a:	f43f aec7 	beq.w	800352c <_strtod_l+0xa4>
 800379e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b28      	cmp	r3, #40	@ 0x28
 80037a4:	d12e      	bne.n	8003804 <_strtod_l+0x37c>
 80037a6:	4996      	ldr	r1, [pc, #600]	@ (8003a00 <_strtod_l+0x578>)
 80037a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80037aa:	a819      	add	r0, sp, #100	@ 0x64
 80037ac:	f000 fff6 	bl	800479c <__hexnan>
 80037b0:	2805      	cmp	r0, #5
 80037b2:	d127      	bne.n	8003804 <_strtod_l+0x37c>
 80037b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80037b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80037ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80037be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80037c2:	e69a      	b.n	80034fa <_strtod_l+0x72>
 80037c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80037c6:	fb08 2101 	mla	r1, r8, r1, r2
 80037ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80037ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80037d0:	e7b5      	b.n	800373e <_strtod_l+0x2b6>
 80037d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80037d4:	e7da      	b.n	800378c <_strtod_l+0x304>
 80037d6:	498b      	ldr	r1, [pc, #556]	@ (8003a04 <_strtod_l+0x57c>)
 80037d8:	a819      	add	r0, sp, #100	@ 0x64
 80037da:	f000 ffcb 	bl	8004774 <__match>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f43f aea4 	beq.w	800352c <_strtod_l+0xa4>
 80037e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80037e6:	4988      	ldr	r1, [pc, #544]	@ (8003a08 <_strtod_l+0x580>)
 80037e8:	3b01      	subs	r3, #1
 80037ea:	a819      	add	r0, sp, #100	@ 0x64
 80037ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80037ee:	f000 ffc1 	bl	8004774 <__match>
 80037f2:	b910      	cbnz	r0, 80037fa <_strtod_l+0x372>
 80037f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80037f6:	3301      	adds	r3, #1
 80037f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80037fa:	f04f 0a00 	mov.w	sl, #0
 80037fe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8003a0c <_strtod_l+0x584>
 8003802:	e67a      	b.n	80034fa <_strtod_l+0x72>
 8003804:	4882      	ldr	r0, [pc, #520]	@ (8003a10 <_strtod_l+0x588>)
 8003806:	f000 fcdd 	bl	80041c4 <nan>
 800380a:	4682      	mov	sl, r0
 800380c:	468b      	mov	fp, r1
 800380e:	e674      	b.n	80034fa <_strtod_l+0x72>
 8003810:	eba8 0309 	sub.w	r3, r8, r9
 8003814:	2f00      	cmp	r7, #0
 8003816:	bf08      	it	eq
 8003818:	462f      	moveq	r7, r5
 800381a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800381c:	2d10      	cmp	r5, #16
 800381e:	462c      	mov	r4, r5
 8003820:	9309      	str	r3, [sp, #36]	@ 0x24
 8003822:	bfa8      	it	ge
 8003824:	2410      	movge	r4, #16
 8003826:	f7fc fe91 	bl	800054c <__aeabi_ui2d>
 800382a:	2d09      	cmp	r5, #9
 800382c:	4682      	mov	sl, r0
 800382e:	468b      	mov	fp, r1
 8003830:	dc11      	bgt.n	8003856 <_strtod_l+0x3ce>
 8003832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	f43f ae60 	beq.w	80034fa <_strtod_l+0x72>
 800383a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800383c:	dd76      	ble.n	800392c <_strtod_l+0x4a4>
 800383e:	2b16      	cmp	r3, #22
 8003840:	dc5d      	bgt.n	80038fe <_strtod_l+0x476>
 8003842:	4974      	ldr	r1, [pc, #464]	@ (8003a14 <_strtod_l+0x58c>)
 8003844:	4652      	mov	r2, sl
 8003846:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800384a:	465b      	mov	r3, fp
 800384c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003850:	f7fc fef6 	bl	8000640 <__aeabi_dmul>
 8003854:	e7d9      	b.n	800380a <_strtod_l+0x382>
 8003856:	4b6f      	ldr	r3, [pc, #444]	@ (8003a14 <_strtod_l+0x58c>)
 8003858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800385c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8003860:	f7fc feee 	bl	8000640 <__aeabi_dmul>
 8003864:	4682      	mov	sl, r0
 8003866:	9808      	ldr	r0, [sp, #32]
 8003868:	468b      	mov	fp, r1
 800386a:	f7fc fe6f 	bl	800054c <__aeabi_ui2d>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4650      	mov	r0, sl
 8003874:	4659      	mov	r1, fp
 8003876:	f7fc fd2d 	bl	80002d4 <__adddf3>
 800387a:	2d0f      	cmp	r5, #15
 800387c:	4682      	mov	sl, r0
 800387e:	468b      	mov	fp, r1
 8003880:	ddd7      	ble.n	8003832 <_strtod_l+0x3aa>
 8003882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003884:	1b2c      	subs	r4, r5, r4
 8003886:	441c      	add	r4, r3
 8003888:	2c00      	cmp	r4, #0
 800388a:	f340 8096 	ble.w	80039ba <_strtod_l+0x532>
 800388e:	f014 030f 	ands.w	r3, r4, #15
 8003892:	d00a      	beq.n	80038aa <_strtod_l+0x422>
 8003894:	495f      	ldr	r1, [pc, #380]	@ (8003a14 <_strtod_l+0x58c>)
 8003896:	4652      	mov	r2, sl
 8003898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800389c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038a0:	465b      	mov	r3, fp
 80038a2:	f7fc fecd 	bl	8000640 <__aeabi_dmul>
 80038a6:	4682      	mov	sl, r0
 80038a8:	468b      	mov	fp, r1
 80038aa:	f034 040f 	bics.w	r4, r4, #15
 80038ae:	d073      	beq.n	8003998 <_strtod_l+0x510>
 80038b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80038b4:	dd48      	ble.n	8003948 <_strtod_l+0x4c0>
 80038b6:	2400      	movs	r4, #0
 80038b8:	46a0      	mov	r8, r4
 80038ba:	46a1      	mov	r9, r4
 80038bc:	940a      	str	r4, [sp, #40]	@ 0x28
 80038be:	2322      	movs	r3, #34	@ 0x22
 80038c0:	f04f 0a00 	mov.w	sl, #0
 80038c4:	9a05      	ldr	r2, [sp, #20]
 80038c6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8003a0c <_strtod_l+0x584>
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f43f ae13 	beq.w	80034fa <_strtod_l+0x72>
 80038d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80038d6:	9805      	ldr	r0, [sp, #20]
 80038d8:	f001 fcf4 	bl	80052c4 <_Bfree>
 80038dc:	4649      	mov	r1, r9
 80038de:	9805      	ldr	r0, [sp, #20]
 80038e0:	f001 fcf0 	bl	80052c4 <_Bfree>
 80038e4:	4641      	mov	r1, r8
 80038e6:	9805      	ldr	r0, [sp, #20]
 80038e8:	f001 fcec 	bl	80052c4 <_Bfree>
 80038ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80038ee:	9805      	ldr	r0, [sp, #20]
 80038f0:	f001 fce8 	bl	80052c4 <_Bfree>
 80038f4:	4621      	mov	r1, r4
 80038f6:	9805      	ldr	r0, [sp, #20]
 80038f8:	f001 fce4 	bl	80052c4 <_Bfree>
 80038fc:	e5fd      	b.n	80034fa <_strtod_l+0x72>
 80038fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003900:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8003904:	4293      	cmp	r3, r2
 8003906:	dbbc      	blt.n	8003882 <_strtod_l+0x3fa>
 8003908:	4c42      	ldr	r4, [pc, #264]	@ (8003a14 <_strtod_l+0x58c>)
 800390a:	f1c5 050f 	rsb	r5, r5, #15
 800390e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003912:	4652      	mov	r2, sl
 8003914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003918:	465b      	mov	r3, fp
 800391a:	f7fc fe91 	bl	8000640 <__aeabi_dmul>
 800391e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003920:	1b5d      	subs	r5, r3, r5
 8003922:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003926:	e9d4 2300 	ldrd	r2, r3, [r4]
 800392a:	e791      	b.n	8003850 <_strtod_l+0x3c8>
 800392c:	3316      	adds	r3, #22
 800392e:	dba8      	blt.n	8003882 <_strtod_l+0x3fa>
 8003930:	4b38      	ldr	r3, [pc, #224]	@ (8003a14 <_strtod_l+0x58c>)
 8003932:	eba9 0808 	sub.w	r8, r9, r8
 8003936:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800393a:	4650      	mov	r0, sl
 800393c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003940:	4659      	mov	r1, fp
 8003942:	f7fc ffa7 	bl	8000894 <__aeabi_ddiv>
 8003946:	e760      	b.n	800380a <_strtod_l+0x382>
 8003948:	4b33      	ldr	r3, [pc, #204]	@ (8003a18 <_strtod_l+0x590>)
 800394a:	4650      	mov	r0, sl
 800394c:	9308      	str	r3, [sp, #32]
 800394e:	2300      	movs	r3, #0
 8003950:	4659      	mov	r1, fp
 8003952:	461e      	mov	r6, r3
 8003954:	1124      	asrs	r4, r4, #4
 8003956:	2c01      	cmp	r4, #1
 8003958:	dc21      	bgt.n	800399e <_strtod_l+0x516>
 800395a:	b10b      	cbz	r3, 8003960 <_strtod_l+0x4d8>
 800395c:	4682      	mov	sl, r0
 800395e:	468b      	mov	fp, r1
 8003960:	492d      	ldr	r1, [pc, #180]	@ (8003a18 <_strtod_l+0x590>)
 8003962:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8003966:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800396a:	4652      	mov	r2, sl
 800396c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003970:	465b      	mov	r3, fp
 8003972:	f7fc fe65 	bl	8000640 <__aeabi_dmul>
 8003976:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <_strtod_l+0x584>)
 8003978:	460a      	mov	r2, r1
 800397a:	400b      	ands	r3, r1
 800397c:	4927      	ldr	r1, [pc, #156]	@ (8003a1c <_strtod_l+0x594>)
 800397e:	4682      	mov	sl, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	d898      	bhi.n	80038b6 <_strtod_l+0x42e>
 8003984:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8003988:	428b      	cmp	r3, r1
 800398a:	bf86      	itte	hi
 800398c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8003990:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8003a20 <_strtod_l+0x598>
 8003994:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8003998:	2300      	movs	r3, #0
 800399a:	9308      	str	r3, [sp, #32]
 800399c:	e07a      	b.n	8003a94 <_strtod_l+0x60c>
 800399e:	07e2      	lsls	r2, r4, #31
 80039a0:	d505      	bpl.n	80039ae <_strtod_l+0x526>
 80039a2:	9b08      	ldr	r3, [sp, #32]
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fe4a 	bl	8000640 <__aeabi_dmul>
 80039ac:	2301      	movs	r3, #1
 80039ae:	9a08      	ldr	r2, [sp, #32]
 80039b0:	3601      	adds	r6, #1
 80039b2:	3208      	adds	r2, #8
 80039b4:	1064      	asrs	r4, r4, #1
 80039b6:	9208      	str	r2, [sp, #32]
 80039b8:	e7cd      	b.n	8003956 <_strtod_l+0x4ce>
 80039ba:	d0ed      	beq.n	8003998 <_strtod_l+0x510>
 80039bc:	4264      	negs	r4, r4
 80039be:	f014 020f 	ands.w	r2, r4, #15
 80039c2:	d00a      	beq.n	80039da <_strtod_l+0x552>
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <_strtod_l+0x58c>)
 80039c6:	4650      	mov	r0, sl
 80039c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039cc:	4659      	mov	r1, fp
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc ff5f 	bl	8000894 <__aeabi_ddiv>
 80039d6:	4682      	mov	sl, r0
 80039d8:	468b      	mov	fp, r1
 80039da:	1124      	asrs	r4, r4, #4
 80039dc:	d0dc      	beq.n	8003998 <_strtod_l+0x510>
 80039de:	2c1f      	cmp	r4, #31
 80039e0:	dd20      	ble.n	8003a24 <_strtod_l+0x59c>
 80039e2:	2400      	movs	r4, #0
 80039e4:	46a0      	mov	r8, r4
 80039e6:	46a1      	mov	r9, r4
 80039e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80039ea:	2322      	movs	r3, #34	@ 0x22
 80039ec:	9a05      	ldr	r2, [sp, #20]
 80039ee:	f04f 0a00 	mov.w	sl, #0
 80039f2:	f04f 0b00 	mov.w	fp, #0
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e768      	b.n	80038cc <_strtod_l+0x444>
 80039fa:	bf00      	nop
 80039fc:	08006809 	.word	0x08006809
 8003a00:	0800680c 	.word	0x0800680c
 8003a04:	08006800 	.word	0x08006800
 8003a08:	08006803 	.word	0x08006803
 8003a0c:	7ff00000 	.word	0x7ff00000
 8003a10:	08006ba3 	.word	0x08006ba3
 8003a14:	08006aa0 	.word	0x08006aa0
 8003a18:	08006a78 	.word	0x08006a78
 8003a1c:	7ca00000 	.word	0x7ca00000
 8003a20:	7fefffff 	.word	0x7fefffff
 8003a24:	f014 0310 	ands.w	r3, r4, #16
 8003a28:	bf18      	it	ne
 8003a2a:	236a      	movne	r3, #106	@ 0x6a
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	9308      	str	r3, [sp, #32]
 8003a30:	4659      	mov	r1, fp
 8003a32:	2300      	movs	r3, #0
 8003a34:	4ea9      	ldr	r6, [pc, #676]	@ (8003cdc <_strtod_l+0x854>)
 8003a36:	07e2      	lsls	r2, r4, #31
 8003a38:	d504      	bpl.n	8003a44 <_strtod_l+0x5bc>
 8003a3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a3e:	f7fc fdff 	bl	8000640 <__aeabi_dmul>
 8003a42:	2301      	movs	r3, #1
 8003a44:	1064      	asrs	r4, r4, #1
 8003a46:	f106 0608 	add.w	r6, r6, #8
 8003a4a:	d1f4      	bne.n	8003a36 <_strtod_l+0x5ae>
 8003a4c:	b10b      	cbz	r3, 8003a52 <_strtod_l+0x5ca>
 8003a4e:	4682      	mov	sl, r0
 8003a50:	468b      	mov	fp, r1
 8003a52:	9b08      	ldr	r3, [sp, #32]
 8003a54:	b1b3      	cbz	r3, 8003a84 <_strtod_l+0x5fc>
 8003a56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003a5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	4659      	mov	r1, fp
 8003a62:	dd0f      	ble.n	8003a84 <_strtod_l+0x5fc>
 8003a64:	2b1f      	cmp	r3, #31
 8003a66:	dd57      	ble.n	8003b18 <_strtod_l+0x690>
 8003a68:	2b34      	cmp	r3, #52	@ 0x34
 8003a6a:	bfd8      	it	le
 8003a6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8003a70:	f04f 0a00 	mov.w	sl, #0
 8003a74:	bfcf      	iteee	gt
 8003a76:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8003a7a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8003a7e:	4093      	lslle	r3, r2
 8003a80:	ea03 0b01 	andle.w	fp, r3, r1
 8003a84:	2200      	movs	r2, #0
 8003a86:	2300      	movs	r3, #0
 8003a88:	4650      	mov	r0, sl
 8003a8a:	4659      	mov	r1, fp
 8003a8c:	f7fd f840 	bl	8000b10 <__aeabi_dcmpeq>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1a6      	bne.n	80039e2 <_strtod_l+0x55a>
 8003a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a96:	463a      	mov	r2, r7
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	9805      	ldr	r0, [sp, #20]
 8003aa0:	f001 fc78 	bl	8005394 <__s2b>
 8003aa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	f43f af05 	beq.w	80038b6 <_strtod_l+0x42e>
 8003aac:	2400      	movs	r4, #0
 8003aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ab0:	eba9 0308 	sub.w	r3, r9, r8
 8003ab4:	2a00      	cmp	r2, #0
 8003ab6:	bfa8      	it	ge
 8003ab8:	2300      	movge	r3, #0
 8003aba:	46a0      	mov	r8, r4
 8003abc:	9312      	str	r3, [sp, #72]	@ 0x48
 8003abe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003ac2:	9316      	str	r3, [sp, #88]	@ 0x58
 8003ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ac6:	9805      	ldr	r0, [sp, #20]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	f001 fbbb 	bl	8005244 <_Balloc>
 8003ace:	4681      	mov	r9, r0
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	f43f aef4 	beq.w	80038be <_strtod_l+0x436>
 8003ad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ad8:	300c      	adds	r0, #12
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	f103 010c 	add.w	r1, r3, #12
 8003ae0:	3202      	adds	r2, #2
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	f000 fb5f 	bl	80041a6 <memcpy>
 8003ae8:	ab1c      	add	r3, sp, #112	@ 0x70
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	ab1b      	add	r3, sp, #108	@ 0x6c
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	4652      	mov	r2, sl
 8003af2:	465b      	mov	r3, fp
 8003af4:	9805      	ldr	r0, [sp, #20]
 8003af6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8003afa:	f001 ff7d 	bl	80059f8 <__d2b>
 8003afe:	901a      	str	r0, [sp, #104]	@ 0x68
 8003b00:	2800      	cmp	r0, #0
 8003b02:	f43f aedc 	beq.w	80038be <_strtod_l+0x436>
 8003b06:	2101      	movs	r1, #1
 8003b08:	9805      	ldr	r0, [sp, #20]
 8003b0a:	f001 fcd9 	bl	80054c0 <__i2b>
 8003b0e:	4680      	mov	r8, r0
 8003b10:	b948      	cbnz	r0, 8003b26 <_strtod_l+0x69e>
 8003b12:	f04f 0800 	mov.w	r8, #0
 8003b16:	e6d2      	b.n	80038be <_strtod_l+0x436>
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	ea03 0a0a 	and.w	sl, r3, sl
 8003b24:	e7ae      	b.n	8003a84 <_strtod_l+0x5fc>
 8003b26:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8003b28:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	bfab      	itete	ge
 8003b2e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8003b30:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8003b32:	18ef      	addge	r7, r5, r3
 8003b34:	1b5e      	sublt	r6, r3, r5
 8003b36:	9b08      	ldr	r3, [sp, #32]
 8003b38:	bfa8      	it	ge
 8003b3a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8003b3c:	eba5 0503 	sub.w	r5, r5, r3
 8003b40:	4415      	add	r5, r2
 8003b42:	4b67      	ldr	r3, [pc, #412]	@ (8003ce0 <_strtod_l+0x858>)
 8003b44:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8003b48:	bfb8      	it	lt
 8003b4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8003b4c:	429d      	cmp	r5, r3
 8003b4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8003b52:	da50      	bge.n	8003bf6 <_strtod_l+0x76e>
 8003b54:	1b5b      	subs	r3, r3, r5
 8003b56:	2b1f      	cmp	r3, #31
 8003b58:	f04f 0101 	mov.w	r1, #1
 8003b5c:	eba2 0203 	sub.w	r2, r2, r3
 8003b60:	dc3d      	bgt.n	8003bde <_strtod_l+0x756>
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8003b6c:	18bd      	adds	r5, r7, r2
 8003b6e:	9b08      	ldr	r3, [sp, #32]
 8003b70:	42af      	cmp	r7, r5
 8003b72:	4416      	add	r6, r2
 8003b74:	441e      	add	r6, r3
 8003b76:	463b      	mov	r3, r7
 8003b78:	bfa8      	it	ge
 8003b7a:	462b      	movge	r3, r5
 8003b7c:	42b3      	cmp	r3, r6
 8003b7e:	bfa8      	it	ge
 8003b80:	4633      	movge	r3, r6
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfc2      	ittt	gt
 8003b86:	1aed      	subgt	r5, r5, r3
 8003b88:	1af6      	subgt	r6, r6, r3
 8003b8a:	1aff      	subgt	r7, r7, r3
 8003b8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dd16      	ble.n	8003bc0 <_strtod_l+0x738>
 8003b92:	4641      	mov	r1, r8
 8003b94:	461a      	mov	r2, r3
 8003b96:	9805      	ldr	r0, [sp, #20]
 8003b98:	f001 fd50 	bl	800563c <__pow5mult>
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d0b7      	beq.n	8003b12 <_strtod_l+0x68a>
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003ba6:	9805      	ldr	r0, [sp, #20]
 8003ba8:	f001 fca0 	bl	80054ec <__multiply>
 8003bac:	900e      	str	r0, [sp, #56]	@ 0x38
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	f43f ae85 	beq.w	80038be <_strtod_l+0x436>
 8003bb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003bb6:	9805      	ldr	r0, [sp, #20]
 8003bb8:	f001 fb84 	bl	80052c4 <_Bfree>
 8003bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bc0:	2d00      	cmp	r5, #0
 8003bc2:	dc1d      	bgt.n	8003c00 <_strtod_l+0x778>
 8003bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	dd23      	ble.n	8003c12 <_strtod_l+0x78a>
 8003bca:	4649      	mov	r1, r9
 8003bcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8003bce:	9805      	ldr	r0, [sp, #20]
 8003bd0:	f001 fd34 	bl	800563c <__pow5mult>
 8003bd4:	4681      	mov	r9, r0
 8003bd6:	b9e0      	cbnz	r0, 8003c12 <_strtod_l+0x78a>
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	e66f      	b.n	80038be <_strtod_l+0x436>
 8003bde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8003be2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8003be6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8003bea:	35e2      	adds	r5, #226	@ 0xe2
 8003bec:	fa01 f305 	lsl.w	r3, r1, r5
 8003bf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8003bf2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8003bf4:	e7ba      	b.n	8003b6c <_strtod_l+0x6e4>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003bfe:	e7b5      	b.n	8003b6c <_strtod_l+0x6e4>
 8003c00:	462a      	mov	r2, r5
 8003c02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003c04:	9805      	ldr	r0, [sp, #20]
 8003c06:	f001 fd73 	bl	80056f0 <__lshift>
 8003c0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d1d9      	bne.n	8003bc4 <_strtod_l+0x73c>
 8003c10:	e655      	b.n	80038be <_strtod_l+0x436>
 8003c12:	2e00      	cmp	r6, #0
 8003c14:	dd07      	ble.n	8003c26 <_strtod_l+0x79e>
 8003c16:	4649      	mov	r1, r9
 8003c18:	4632      	mov	r2, r6
 8003c1a:	9805      	ldr	r0, [sp, #20]
 8003c1c:	f001 fd68 	bl	80056f0 <__lshift>
 8003c20:	4681      	mov	r9, r0
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d0d8      	beq.n	8003bd8 <_strtod_l+0x750>
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	dd08      	ble.n	8003c3c <_strtod_l+0x7b4>
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	9805      	ldr	r0, [sp, #20]
 8003c30:	f001 fd5e 	bl	80056f0 <__lshift>
 8003c34:	4680      	mov	r8, r0
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f ae41 	beq.w	80038be <_strtod_l+0x436>
 8003c3c:	464a      	mov	r2, r9
 8003c3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003c40:	9805      	ldr	r0, [sp, #20]
 8003c42:	f001 fddd 	bl	8005800 <__mdiff>
 8003c46:	4604      	mov	r4, r0
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	f43f ae38 	beq.w	80038be <_strtod_l+0x436>
 8003c4e:	68c3      	ldr	r3, [r0, #12]
 8003c50:	4641      	mov	r1, r8
 8003c52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003c54:	2300      	movs	r3, #0
 8003c56:	60c3      	str	r3, [r0, #12]
 8003c58:	f001 fdb6 	bl	80057c8 <__mcmp>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	da45      	bge.n	8003cec <_strtod_l+0x864>
 8003c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003c62:	ea53 030a 	orrs.w	r3, r3, sl
 8003c66:	d16b      	bne.n	8003d40 <_strtod_l+0x8b8>
 8003c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d167      	bne.n	8003d40 <_strtod_l+0x8b8>
 8003c70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003c74:	0d1b      	lsrs	r3, r3, #20
 8003c76:	051b      	lsls	r3, r3, #20
 8003c78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003c7c:	d960      	bls.n	8003d40 <_strtod_l+0x8b8>
 8003c7e:	6963      	ldr	r3, [r4, #20]
 8003c80:	b913      	cbnz	r3, 8003c88 <_strtod_l+0x800>
 8003c82:	6923      	ldr	r3, [r4, #16]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	dd5b      	ble.n	8003d40 <_strtod_l+0x8b8>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	9805      	ldr	r0, [sp, #20]
 8003c8e:	f001 fd2f 	bl	80056f0 <__lshift>
 8003c92:	4641      	mov	r1, r8
 8003c94:	4604      	mov	r4, r0
 8003c96:	f001 fd97 	bl	80057c8 <__mcmp>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	dd50      	ble.n	8003d40 <_strtod_l+0x8b8>
 8003c9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003ca2:	9a08      	ldr	r2, [sp, #32]
 8003ca4:	0d1b      	lsrs	r3, r3, #20
 8003ca6:	051b      	lsls	r3, r3, #20
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	d06a      	beq.n	8003d82 <_strtod_l+0x8fa>
 8003cac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8003cb0:	d867      	bhi.n	8003d82 <_strtod_l+0x8fa>
 8003cb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8003cb6:	f67f ae98 	bls.w	80039ea <_strtod_l+0x562>
 8003cba:	4650      	mov	r0, sl
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <_strtod_l+0x85c>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f7fc fcbd 	bl	8000640 <__aeabi_dmul>
 8003cc6:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <_strtod_l+0x860>)
 8003cc8:	4682      	mov	sl, r0
 8003cca:	400b      	ands	r3, r1
 8003ccc:	468b      	mov	fp, r1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f47f ae00 	bne.w	80038d4 <_strtod_l+0x44c>
 8003cd4:	2322      	movs	r3, #34	@ 0x22
 8003cd6:	9a05      	ldr	r2, [sp, #20]
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e5fb      	b.n	80038d4 <_strtod_l+0x44c>
 8003cdc:	08006838 	.word	0x08006838
 8003ce0:	fffffc02 	.word	0xfffffc02
 8003ce4:	39500000 	.word	0x39500000
 8003ce8:	7ff00000 	.word	0x7ff00000
 8003cec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003cf0:	d165      	bne.n	8003dbe <_strtod_l+0x936>
 8003cf2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8003cf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003cf8:	b35a      	cbz	r2, 8003d52 <_strtod_l+0x8ca>
 8003cfa:	4a99      	ldr	r2, [pc, #612]	@ (8003f60 <_strtod_l+0xad8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d12b      	bne.n	8003d58 <_strtod_l+0x8d0>
 8003d00:	9b08      	ldr	r3, [sp, #32]
 8003d02:	4651      	mov	r1, sl
 8003d04:	b303      	cbz	r3, 8003d48 <_strtod_l+0x8c0>
 8003d06:	465a      	mov	r2, fp
 8003d08:	4b96      	ldr	r3, [pc, #600]	@ (8003f64 <_strtod_l+0xadc>)
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d14:	d81b      	bhi.n	8003d4e <_strtod_l+0x8c6>
 8003d16:	0d1b      	lsrs	r3, r3, #20
 8003d18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	4299      	cmp	r1, r3
 8003d22:	d119      	bne.n	8003d58 <_strtod_l+0x8d0>
 8003d24:	4b90      	ldr	r3, [pc, #576]	@ (8003f68 <_strtod_l+0xae0>)
 8003d26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d102      	bne.n	8003d32 <_strtod_l+0x8aa>
 8003d2c:	3101      	adds	r1, #1
 8003d2e:	f43f adc6 	beq.w	80038be <_strtod_l+0x436>
 8003d32:	f04f 0a00 	mov.w	sl, #0
 8003d36:	4b8b      	ldr	r3, [pc, #556]	@ (8003f64 <_strtod_l+0xadc>)
 8003d38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8003d40:	9b08      	ldr	r3, [sp, #32]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1b9      	bne.n	8003cba <_strtod_l+0x832>
 8003d46:	e5c5      	b.n	80038d4 <_strtod_l+0x44c>
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d4c:	e7e8      	b.n	8003d20 <_strtod_l+0x898>
 8003d4e:	4613      	mov	r3, r2
 8003d50:	e7e6      	b.n	8003d20 <_strtod_l+0x898>
 8003d52:	ea53 030a 	orrs.w	r3, r3, sl
 8003d56:	d0a2      	beq.n	8003c9e <_strtod_l+0x816>
 8003d58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003d5a:	b1db      	cbz	r3, 8003d94 <_strtod_l+0x90c>
 8003d5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d5e:	4213      	tst	r3, r2
 8003d60:	d0ee      	beq.n	8003d40 <_strtod_l+0x8b8>
 8003d62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d64:	4650      	mov	r0, sl
 8003d66:	4659      	mov	r1, fp
 8003d68:	9a08      	ldr	r2, [sp, #32]
 8003d6a:	b1bb      	cbz	r3, 8003d9c <_strtod_l+0x914>
 8003d6c:	f7ff fb68 	bl	8003440 <sulp>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d78:	f7fc faac 	bl	80002d4 <__adddf3>
 8003d7c:	4682      	mov	sl, r0
 8003d7e:	468b      	mov	fp, r1
 8003d80:	e7de      	b.n	8003d40 <_strtod_l+0x8b8>
 8003d82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003d86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003d8a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8003d8e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003d92:	e7d5      	b.n	8003d40 <_strtod_l+0x8b8>
 8003d94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003d96:	ea13 0f0a 	tst.w	r3, sl
 8003d9a:	e7e1      	b.n	8003d60 <_strtod_l+0x8d8>
 8003d9c:	f7ff fb50 	bl	8003440 <sulp>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003da8:	f7fc fa92 	bl	80002d0 <__aeabi_dsub>
 8003dac:	2200      	movs	r2, #0
 8003dae:	2300      	movs	r3, #0
 8003db0:	4682      	mov	sl, r0
 8003db2:	468b      	mov	fp, r1
 8003db4:	f7fc feac 	bl	8000b10 <__aeabi_dcmpeq>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d0c1      	beq.n	8003d40 <_strtod_l+0x8b8>
 8003dbc:	e615      	b.n	80039ea <_strtod_l+0x562>
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f001 fe71 	bl	8005aa8 <__ratio>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003dcc:	4606      	mov	r6, r0
 8003dce:	460f      	mov	r7, r1
 8003dd0:	f7fc feb2 	bl	8000b38 <__aeabi_dcmple>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d06d      	beq.n	8003eb4 <_strtod_l+0xa2c>
 8003dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d178      	bne.n	8003ed0 <_strtod_l+0xa48>
 8003dde:	f1ba 0f00 	cmp.w	sl, #0
 8003de2:	d156      	bne.n	8003e92 <_strtod_l+0xa0a>
 8003de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d158      	bne.n	8003ea0 <_strtod_l+0xa18>
 8003dee:	2200      	movs	r2, #0
 8003df0:	4630      	mov	r0, r6
 8003df2:	4639      	mov	r1, r7
 8003df4:	4b5d      	ldr	r3, [pc, #372]	@ (8003f6c <_strtod_l+0xae4>)
 8003df6:	f7fc fe95 	bl	8000b24 <__aeabi_dcmplt>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d157      	bne.n	8003eae <_strtod_l+0xa26>
 8003dfe:	4630      	mov	r0, r6
 8003e00:	4639      	mov	r1, r7
 8003e02:	2200      	movs	r2, #0
 8003e04:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <_strtod_l+0xae8>)
 8003e06:	f7fc fc1b 	bl	8000640 <__aeabi_dmul>
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	460f      	mov	r7, r1
 8003e0e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8003e12:	9606      	str	r6, [sp, #24]
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e1a:	4d52      	ldr	r5, [pc, #328]	@ (8003f64 <_strtod_l+0xadc>)
 8003e1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003e20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e22:	401d      	ands	r5, r3
 8003e24:	4b53      	ldr	r3, [pc, #332]	@ (8003f74 <_strtod_l+0xaec>)
 8003e26:	429d      	cmp	r5, r3
 8003e28:	f040 80aa 	bne.w	8003f80 <_strtod_l+0xaf8>
 8003e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e2e:	4650      	mov	r0, sl
 8003e30:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8003e34:	4659      	mov	r1, fp
 8003e36:	f001 fd77 	bl	8005928 <__ulp>
 8003e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e3e:	f7fc fbff 	bl	8000640 <__aeabi_dmul>
 8003e42:	4652      	mov	r2, sl
 8003e44:	465b      	mov	r3, fp
 8003e46:	f7fc fa45 	bl	80002d4 <__adddf3>
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4945      	ldr	r1, [pc, #276]	@ (8003f64 <_strtod_l+0xadc>)
 8003e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f78 <_strtod_l+0xaf0>)
 8003e50:	4019      	ands	r1, r3
 8003e52:	4291      	cmp	r1, r2
 8003e54:	4682      	mov	sl, r0
 8003e56:	d942      	bls.n	8003ede <_strtod_l+0xa56>
 8003e58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8003e5a:	4b43      	ldr	r3, [pc, #268]	@ (8003f68 <_strtod_l+0xae0>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d103      	bne.n	8003e68 <_strtod_l+0x9e0>
 8003e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003e62:	3301      	adds	r3, #1
 8003e64:	f43f ad2b 	beq.w	80038be <_strtod_l+0x436>
 8003e68:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8003e6c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8003f68 <_strtod_l+0xae0>
 8003e70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8003e72:	9805      	ldr	r0, [sp, #20]
 8003e74:	f001 fa26 	bl	80052c4 <_Bfree>
 8003e78:	4649      	mov	r1, r9
 8003e7a:	9805      	ldr	r0, [sp, #20]
 8003e7c:	f001 fa22 	bl	80052c4 <_Bfree>
 8003e80:	4641      	mov	r1, r8
 8003e82:	9805      	ldr	r0, [sp, #20]
 8003e84:	f001 fa1e 	bl	80052c4 <_Bfree>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	9805      	ldr	r0, [sp, #20]
 8003e8c:	f001 fa1a 	bl	80052c4 <_Bfree>
 8003e90:	e618      	b.n	8003ac4 <_strtod_l+0x63c>
 8003e92:	f1ba 0f01 	cmp.w	sl, #1
 8003e96:	d103      	bne.n	8003ea0 <_strtod_l+0xa18>
 8003e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f43f ada5 	beq.w	80039ea <_strtod_l+0x562>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <_strtod_l+0xaf4>)
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eaa:	4f30      	ldr	r7, [pc, #192]	@ (8003f6c <_strtod_l+0xae4>)
 8003eac:	e7b3      	b.n	8003e16 <_strtod_l+0x98e>
 8003eae:	2600      	movs	r6, #0
 8003eb0:	4f2f      	ldr	r7, [pc, #188]	@ (8003f70 <_strtod_l+0xae8>)
 8003eb2:	e7ac      	b.n	8003e0e <_strtod_l+0x986>
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f70 <_strtod_l+0xae8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f7fc fbc0 	bl	8000640 <__aeabi_dmul>
 8003ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ec2:	4606      	mov	r6, r0
 8003ec4:	460f      	mov	r7, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0a1      	beq.n	8003e0e <_strtod_l+0x986>
 8003eca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8003ece:	e7a2      	b.n	8003e16 <_strtod_l+0x98e>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4b26      	ldr	r3, [pc, #152]	@ (8003f6c <_strtod_l+0xae4>)
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003edc:	e79b      	b.n	8003e16 <_strtod_l+0x98e>
 8003ede:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8003ee2:	9b08      	ldr	r3, [sp, #32]
 8003ee4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1c1      	bne.n	8003e70 <_strtod_l+0x9e8>
 8003eec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8003ef0:	0d1b      	lsrs	r3, r3, #20
 8003ef2:	051b      	lsls	r3, r3, #20
 8003ef4:	429d      	cmp	r5, r3
 8003ef6:	d1bb      	bne.n	8003e70 <_strtod_l+0x9e8>
 8003ef8:	4630      	mov	r0, r6
 8003efa:	4639      	mov	r1, r7
 8003efc:	f7fc ffd8 	bl	8000eb0 <__aeabi_d2lz>
 8003f00:	f7fc fb70 	bl	80005e4 <__aeabi_l2d>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc f9e0 	bl	80002d0 <__aeabi_dsub>
 8003f10:	460b      	mov	r3, r1
 8003f12:	4602      	mov	r2, r0
 8003f14:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8003f18:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f1e:	ea46 060a 	orr.w	r6, r6, sl
 8003f22:	431e      	orrs	r6, r3
 8003f24:	d069      	beq.n	8003ffa <_strtod_l+0xb72>
 8003f26:	a30a      	add	r3, pc, #40	@ (adr r3, 8003f50 <_strtod_l+0xac8>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc fdfa 	bl	8000b24 <__aeabi_dcmplt>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f47f accf 	bne.w	80038d4 <_strtod_l+0x44c>
 8003f36:	a308      	add	r3, pc, #32	@ (adr r3, 8003f58 <_strtod_l+0xad0>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f40:	f7fc fe0e 	bl	8000b60 <__aeabi_dcmpgt>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d093      	beq.n	8003e70 <_strtod_l+0x9e8>
 8003f48:	e4c4      	b.n	80038d4 <_strtod_l+0x44c>
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w
 8003f50:	94a03595 	.word	0x94a03595
 8003f54:	3fdfffff 	.word	0x3fdfffff
 8003f58:	35afe535 	.word	0x35afe535
 8003f5c:	3fe00000 	.word	0x3fe00000
 8003f60:	000fffff 	.word	0x000fffff
 8003f64:	7ff00000 	.word	0x7ff00000
 8003f68:	7fefffff 	.word	0x7fefffff
 8003f6c:	3ff00000 	.word	0x3ff00000
 8003f70:	3fe00000 	.word	0x3fe00000
 8003f74:	7fe00000 	.word	0x7fe00000
 8003f78:	7c9fffff 	.word	0x7c9fffff
 8003f7c:	bff00000 	.word	0xbff00000
 8003f80:	9b08      	ldr	r3, [sp, #32]
 8003f82:	b323      	cbz	r3, 8003fce <_strtod_l+0xb46>
 8003f84:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8003f88:	d821      	bhi.n	8003fce <_strtod_l+0xb46>
 8003f8a:	a327      	add	r3, pc, #156	@ (adr r3, 8004028 <_strtod_l+0xba0>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	4630      	mov	r0, r6
 8003f92:	4639      	mov	r1, r7
 8003f94:	f7fc fdd0 	bl	8000b38 <__aeabi_dcmple>
 8003f98:	b1a0      	cbz	r0, 8003fc4 <_strtod_l+0xb3c>
 8003f9a:	4639      	mov	r1, r7
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f7fc fde9 	bl	8000b74 <__aeabi_d2uiz>
 8003fa2:	2801      	cmp	r0, #1
 8003fa4:	bf38      	it	cc
 8003fa6:	2001      	movcc	r0, #1
 8003fa8:	f7fc fad0 	bl	800054c <__aeabi_ui2d>
 8003fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	b9fb      	cbnz	r3, 8003ff4 <_strtod_l+0xb6c>
 8003fb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fb8:	9014      	str	r0, [sp, #80]	@ 0x50
 8003fba:	9315      	str	r3, [sp, #84]	@ 0x54
 8003fbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8003fc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8003fc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003fc6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8003fca:	1b5b      	subs	r3, r3, r5
 8003fcc:	9311      	str	r3, [sp, #68]	@ 0x44
 8003fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fd2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8003fd6:	f001 fca7 	bl	8005928 <__ulp>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4650      	mov	r0, sl
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	f7fc fb2d 	bl	8000640 <__aeabi_dmul>
 8003fe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003fea:	f7fc f973 	bl	80002d4 <__adddf3>
 8003fee:	4682      	mov	sl, r0
 8003ff0:	468b      	mov	fp, r1
 8003ff2:	e776      	b.n	8003ee2 <_strtod_l+0xa5a>
 8003ff4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8003ff8:	e7e0      	b.n	8003fbc <_strtod_l+0xb34>
 8003ffa:	a30d      	add	r3, pc, #52	@ (adr r3, 8004030 <_strtod_l+0xba8>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc fd90 	bl	8000b24 <__aeabi_dcmplt>
 8004004:	e79e      	b.n	8003f44 <_strtod_l+0xabc>
 8004006:	2300      	movs	r3, #0
 8004008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800400a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800400c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	f7ff ba77 	b.w	8003502 <_strtod_l+0x7a>
 8004014:	2a65      	cmp	r2, #101	@ 0x65
 8004016:	f43f ab6e 	beq.w	80036f6 <_strtod_l+0x26e>
 800401a:	2a45      	cmp	r2, #69	@ 0x45
 800401c:	f43f ab6b 	beq.w	80036f6 <_strtod_l+0x26e>
 8004020:	2301      	movs	r3, #1
 8004022:	f7ff bba6 	b.w	8003772 <_strtod_l+0x2ea>
 8004026:	bf00      	nop
 8004028:	ffc00000 	.word	0xffc00000
 800402c:	41dfffff 	.word	0x41dfffff
 8004030:	94a03595 	.word	0x94a03595
 8004034:	3fcfffff 	.word	0x3fcfffff

08004038 <strtod>:
 8004038:	460a      	mov	r2, r1
 800403a:	4601      	mov	r1, r0
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <strtod+0x10>)
 800403e:	4b03      	ldr	r3, [pc, #12]	@ (800404c <strtod+0x14>)
 8004040:	6800      	ldr	r0, [r0, #0]
 8004042:	f7ff ba21 	b.w	8003488 <_strtod_l>
 8004046:	bf00      	nop
 8004048:	20000184 	.word	0x20000184
 800404c:	20000018 	.word	0x20000018

08004050 <_fwalk_sglue>:
 8004050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004054:	4607      	mov	r7, r0
 8004056:	4688      	mov	r8, r1
 8004058:	4614      	mov	r4, r2
 800405a:	2600      	movs	r6, #0
 800405c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004060:	f1b9 0901 	subs.w	r9, r9, #1
 8004064:	d505      	bpl.n	8004072 <_fwalk_sglue+0x22>
 8004066:	6824      	ldr	r4, [r4, #0]
 8004068:	2c00      	cmp	r4, #0
 800406a:	d1f7      	bne.n	800405c <_fwalk_sglue+0xc>
 800406c:	4630      	mov	r0, r6
 800406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004072:	89ab      	ldrh	r3, [r5, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d907      	bls.n	8004088 <_fwalk_sglue+0x38>
 8004078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800407c:	3301      	adds	r3, #1
 800407e:	d003      	beq.n	8004088 <_fwalk_sglue+0x38>
 8004080:	4629      	mov	r1, r5
 8004082:	4638      	mov	r0, r7
 8004084:	47c0      	blx	r8
 8004086:	4306      	orrs	r6, r0
 8004088:	3568      	adds	r5, #104	@ 0x68
 800408a:	e7e9      	b.n	8004060 <_fwalk_sglue+0x10>

0800408c <strncmp>:
 800408c:	b510      	push	{r4, lr}
 800408e:	b16a      	cbz	r2, 80040ac <strncmp+0x20>
 8004090:	3901      	subs	r1, #1
 8004092:	1884      	adds	r4, r0, r2
 8004094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004098:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800409c:	429a      	cmp	r2, r3
 800409e:	d103      	bne.n	80040a8 <strncmp+0x1c>
 80040a0:	42a0      	cmp	r0, r4
 80040a2:	d001      	beq.n	80040a8 <strncmp+0x1c>
 80040a4:	2a00      	cmp	r2, #0
 80040a6:	d1f5      	bne.n	8004094 <strncmp+0x8>
 80040a8:	1ad0      	subs	r0, r2, r3
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	4610      	mov	r0, r2
 80040ae:	e7fc      	b.n	80040aa <strncmp+0x1e>

080040b0 <memset>:
 80040b0:	4603      	mov	r3, r0
 80040b2:	4402      	add	r2, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <_close_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	2300      	movs	r3, #0
 80040c4:	4d05      	ldr	r5, [pc, #20]	@ (80040dc <_close_r+0x1c>)
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fd fabf 	bl	800164e <_close>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_close_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_close_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000428 	.word	0x20000428

080040e0 <_lseek_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	2200      	movs	r2, #0
 80040ea:	4d05      	ldr	r5, [pc, #20]	@ (8004100 <_lseek_r+0x20>)
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fd fad1 	bl	8001696 <_lseek>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_lseek_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_lseek_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	20000428 	.word	0x20000428

08004104 <_read_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	2200      	movs	r2, #0
 800410e:	4d05      	ldr	r5, [pc, #20]	@ (8004124 <_read_r+0x20>)
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fd fa62 	bl	80015dc <_read>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_read_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_read_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000428 	.word	0x20000428

08004128 <_write_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	2200      	movs	r2, #0
 8004132:	4d05      	ldr	r5, [pc, #20]	@ (8004148 <_write_r+0x20>)
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fd fa6d 	bl	8001616 <_write>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_write_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_write_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	20000428 	.word	0x20000428

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	@ (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000184 	.word	0x20000184

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	2600      	movs	r6, #0
 800415c:	4d0c      	ldr	r5, [pc, #48]	@ (8004190 <__libc_init_array+0x38>)
 800415e:	4c0d      	ldr	r4, [pc, #52]	@ (8004194 <__libc_init_array+0x3c>)
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	f002 fb18 	bl	800679c <_init>
 800416c:	2600      	movs	r6, #0
 800416e:	4d0a      	ldr	r5, [pc, #40]	@ (8004198 <__libc_init_array+0x40>)
 8004170:	4c0a      	ldr	r4, [pc, #40]	@ (800419c <__libc_init_array+0x44>)
 8004172:	1b64      	subs	r4, r4, r5
 8004174:	10a4      	asrs	r4, r4, #2
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08006bdc 	.word	0x08006bdc
 8004194:	08006bdc 	.word	0x08006bdc
 8004198:	08006bdc 	.word	0x08006bdc
 800419c:	08006be0 	.word	0x08006be0

080041a0 <__retarget_lock_init_recursive>:
 80041a0:	4770      	bx	lr

080041a2 <__retarget_lock_acquire_recursive>:
 80041a2:	4770      	bx	lr

080041a4 <__retarget_lock_release_recursive>:
 80041a4:	4770      	bx	lr

080041a6 <memcpy>:
 80041a6:	440a      	add	r2, r1
 80041a8:	4291      	cmp	r1, r2
 80041aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80041ae:	d100      	bne.n	80041b2 <memcpy+0xc>
 80041b0:	4770      	bx	lr
 80041b2:	b510      	push	{r4, lr}
 80041b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b8:	4291      	cmp	r1, r2
 80041ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041be:	d1f9      	bne.n	80041b4 <memcpy+0xe>
 80041c0:	bd10      	pop	{r4, pc}
	...

080041c4 <nan>:
 80041c4:	2000      	movs	r0, #0
 80041c6:	4901      	ldr	r1, [pc, #4]	@ (80041cc <nan+0x8>)
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	7ff80000 	.word	0x7ff80000

080041d0 <_free_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4605      	mov	r5, r0
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d040      	beq.n	800425a <_free_r+0x8a>
 80041d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041dc:	1f0c      	subs	r4, r1, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bfb8      	it	lt
 80041e2:	18e4      	addlt	r4, r4, r3
 80041e4:	f001 f822 	bl	800522c <__malloc_lock>
 80041e8:	4a1c      	ldr	r2, [pc, #112]	@ (800425c <_free_r+0x8c>)
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	b933      	cbnz	r3, 80041fc <_free_r+0x2c>
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	6014      	str	r4, [r2, #0]
 80041f2:	4628      	mov	r0, r5
 80041f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041f8:	f001 b81e 	b.w	8005238 <__malloc_unlock>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d908      	bls.n	8004212 <_free_r+0x42>
 8004200:	6820      	ldr	r0, [r4, #0]
 8004202:	1821      	adds	r1, r4, r0
 8004204:	428b      	cmp	r3, r1
 8004206:	bf01      	itttt	eq
 8004208:	6819      	ldreq	r1, [r3, #0]
 800420a:	685b      	ldreq	r3, [r3, #4]
 800420c:	1809      	addeq	r1, r1, r0
 800420e:	6021      	streq	r1, [r4, #0]
 8004210:	e7ed      	b.n	80041ee <_free_r+0x1e>
 8004212:	461a      	mov	r2, r3
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b10b      	cbz	r3, 800421c <_free_r+0x4c>
 8004218:	42a3      	cmp	r3, r4
 800421a:	d9fa      	bls.n	8004212 <_free_r+0x42>
 800421c:	6811      	ldr	r1, [r2, #0]
 800421e:	1850      	adds	r0, r2, r1
 8004220:	42a0      	cmp	r0, r4
 8004222:	d10b      	bne.n	800423c <_free_r+0x6c>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	4401      	add	r1, r0
 8004228:	1850      	adds	r0, r2, r1
 800422a:	4283      	cmp	r3, r0
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	d1e0      	bne.n	80041f2 <_free_r+0x22>
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4408      	add	r0, r1
 8004236:	6010      	str	r0, [r2, #0]
 8004238:	6053      	str	r3, [r2, #4]
 800423a:	e7da      	b.n	80041f2 <_free_r+0x22>
 800423c:	d902      	bls.n	8004244 <_free_r+0x74>
 800423e:	230c      	movs	r3, #12
 8004240:	602b      	str	r3, [r5, #0]
 8004242:	e7d6      	b.n	80041f2 <_free_r+0x22>
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	1821      	adds	r1, r4, r0
 8004248:	428b      	cmp	r3, r1
 800424a:	bf01      	itttt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	1809      	addeq	r1, r1, r0
 8004252:	6021      	streq	r1, [r4, #0]
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	6054      	str	r4, [r2, #4]
 8004258:	e7cb      	b.n	80041f2 <_free_r+0x22>
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	20000434 	.word	0x20000434

08004260 <rshift>:
 8004260:	6903      	ldr	r3, [r0, #16]
 8004262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800426a:	f100 0414 	add.w	r4, r0, #20
 800426e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004272:	dd46      	ble.n	8004302 <rshift+0xa2>
 8004274:	f011 011f 	ands.w	r1, r1, #31
 8004278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800427c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004280:	d10c      	bne.n	800429c <rshift+0x3c>
 8004282:	4629      	mov	r1, r5
 8004284:	f100 0710 	add.w	r7, r0, #16
 8004288:	42b1      	cmp	r1, r6
 800428a:	d335      	bcc.n	80042f8 <rshift+0x98>
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	1eea      	subs	r2, r5, #3
 8004292:	4296      	cmp	r6, r2
 8004294:	bf38      	it	cc
 8004296:	2300      	movcc	r3, #0
 8004298:	4423      	add	r3, r4
 800429a:	e015      	b.n	80042c8 <rshift+0x68>
 800429c:	46a1      	mov	r9, r4
 800429e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80042a2:	f1c1 0820 	rsb	r8, r1, #32
 80042a6:	40cf      	lsrs	r7, r1
 80042a8:	f105 0e04 	add.w	lr, r5, #4
 80042ac:	4576      	cmp	r6, lr
 80042ae:	46f4      	mov	ip, lr
 80042b0:	d816      	bhi.n	80042e0 <rshift+0x80>
 80042b2:	1a9a      	subs	r2, r3, r2
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	3a04      	subs	r2, #4
 80042b8:	3501      	adds	r5, #1
 80042ba:	42ae      	cmp	r6, r5
 80042bc:	bf38      	it	cc
 80042be:	2200      	movcc	r2, #0
 80042c0:	18a3      	adds	r3, r4, r2
 80042c2:	50a7      	str	r7, [r4, r2]
 80042c4:	b107      	cbz	r7, 80042c8 <rshift+0x68>
 80042c6:	3304      	adds	r3, #4
 80042c8:	42a3      	cmp	r3, r4
 80042ca:	eba3 0204 	sub.w	r2, r3, r4
 80042ce:	bf08      	it	eq
 80042d0:	2300      	moveq	r3, #0
 80042d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80042d6:	6102      	str	r2, [r0, #16]
 80042d8:	bf08      	it	eq
 80042da:	6143      	streq	r3, [r0, #20]
 80042dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042e0:	f8dc c000 	ldr.w	ip, [ip]
 80042e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80042e8:	ea4c 0707 	orr.w	r7, ip, r7
 80042ec:	f849 7b04 	str.w	r7, [r9], #4
 80042f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80042f4:	40cf      	lsrs	r7, r1
 80042f6:	e7d9      	b.n	80042ac <rshift+0x4c>
 80042f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80042fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8004300:	e7c2      	b.n	8004288 <rshift+0x28>
 8004302:	4623      	mov	r3, r4
 8004304:	e7e0      	b.n	80042c8 <rshift+0x68>

08004306 <__hexdig_fun>:
 8004306:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800430a:	2b09      	cmp	r3, #9
 800430c:	d802      	bhi.n	8004314 <__hexdig_fun+0xe>
 800430e:	3820      	subs	r0, #32
 8004310:	b2c0      	uxtb	r0, r0
 8004312:	4770      	bx	lr
 8004314:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8004318:	2b05      	cmp	r3, #5
 800431a:	d801      	bhi.n	8004320 <__hexdig_fun+0x1a>
 800431c:	3847      	subs	r0, #71	@ 0x47
 800431e:	e7f7      	b.n	8004310 <__hexdig_fun+0xa>
 8004320:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8004324:	2b05      	cmp	r3, #5
 8004326:	d801      	bhi.n	800432c <__hexdig_fun+0x26>
 8004328:	3827      	subs	r0, #39	@ 0x27
 800432a:	e7f1      	b.n	8004310 <__hexdig_fun+0xa>
 800432c:	2000      	movs	r0, #0
 800432e:	4770      	bx	lr

08004330 <__gethex>:
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	468a      	mov	sl, r1
 8004336:	4690      	mov	r8, r2
 8004338:	b085      	sub	sp, #20
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	680b      	ldr	r3, [r1, #0]
 800433e:	9001      	str	r0, [sp, #4]
 8004340:	1c9c      	adds	r4, r3, #2
 8004342:	46a1      	mov	r9, r4
 8004344:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004348:	2830      	cmp	r0, #48	@ 0x30
 800434a:	d0fa      	beq.n	8004342 <__gethex+0x12>
 800434c:	eba9 0303 	sub.w	r3, r9, r3
 8004350:	f1a3 0b02 	sub.w	fp, r3, #2
 8004354:	f7ff ffd7 	bl	8004306 <__hexdig_fun>
 8004358:	4605      	mov	r5, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d168      	bne.n	8004430 <__gethex+0x100>
 800435e:	2201      	movs	r2, #1
 8004360:	4648      	mov	r0, r9
 8004362:	499f      	ldr	r1, [pc, #636]	@ (80045e0 <__gethex+0x2b0>)
 8004364:	f7ff fe92 	bl	800408c <strncmp>
 8004368:	4607      	mov	r7, r0
 800436a:	2800      	cmp	r0, #0
 800436c:	d167      	bne.n	800443e <__gethex+0x10e>
 800436e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8004372:	4626      	mov	r6, r4
 8004374:	f7ff ffc7 	bl	8004306 <__hexdig_fun>
 8004378:	2800      	cmp	r0, #0
 800437a:	d062      	beq.n	8004442 <__gethex+0x112>
 800437c:	4623      	mov	r3, r4
 800437e:	7818      	ldrb	r0, [r3, #0]
 8004380:	4699      	mov	r9, r3
 8004382:	2830      	cmp	r0, #48	@ 0x30
 8004384:	f103 0301 	add.w	r3, r3, #1
 8004388:	d0f9      	beq.n	800437e <__gethex+0x4e>
 800438a:	f7ff ffbc 	bl	8004306 <__hexdig_fun>
 800438e:	fab0 f580 	clz	r5, r0
 8004392:	f04f 0b01 	mov.w	fp, #1
 8004396:	096d      	lsrs	r5, r5, #5
 8004398:	464a      	mov	r2, r9
 800439a:	4616      	mov	r6, r2
 800439c:	7830      	ldrb	r0, [r6, #0]
 800439e:	3201      	adds	r2, #1
 80043a0:	f7ff ffb1 	bl	8004306 <__hexdig_fun>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d1f8      	bne.n	800439a <__gethex+0x6a>
 80043a8:	2201      	movs	r2, #1
 80043aa:	4630      	mov	r0, r6
 80043ac:	498c      	ldr	r1, [pc, #560]	@ (80045e0 <__gethex+0x2b0>)
 80043ae:	f7ff fe6d 	bl	800408c <strncmp>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d13f      	bne.n	8004436 <__gethex+0x106>
 80043b6:	b944      	cbnz	r4, 80043ca <__gethex+0x9a>
 80043b8:	1c74      	adds	r4, r6, #1
 80043ba:	4622      	mov	r2, r4
 80043bc:	4616      	mov	r6, r2
 80043be:	7830      	ldrb	r0, [r6, #0]
 80043c0:	3201      	adds	r2, #1
 80043c2:	f7ff ffa0 	bl	8004306 <__hexdig_fun>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d1f8      	bne.n	80043bc <__gethex+0x8c>
 80043ca:	1ba4      	subs	r4, r4, r6
 80043cc:	00a7      	lsls	r7, r4, #2
 80043ce:	7833      	ldrb	r3, [r6, #0]
 80043d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80043d4:	2b50      	cmp	r3, #80	@ 0x50
 80043d6:	d13e      	bne.n	8004456 <__gethex+0x126>
 80043d8:	7873      	ldrb	r3, [r6, #1]
 80043da:	2b2b      	cmp	r3, #43	@ 0x2b
 80043dc:	d033      	beq.n	8004446 <__gethex+0x116>
 80043de:	2b2d      	cmp	r3, #45	@ 0x2d
 80043e0:	d034      	beq.n	800444c <__gethex+0x11c>
 80043e2:	2400      	movs	r4, #0
 80043e4:	1c71      	adds	r1, r6, #1
 80043e6:	7808      	ldrb	r0, [r1, #0]
 80043e8:	f7ff ff8d 	bl	8004306 <__hexdig_fun>
 80043ec:	1e43      	subs	r3, r0, #1
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b18      	cmp	r3, #24
 80043f2:	d830      	bhi.n	8004456 <__gethex+0x126>
 80043f4:	f1a0 0210 	sub.w	r2, r0, #16
 80043f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80043fc:	f7ff ff83 	bl	8004306 <__hexdig_fun>
 8004400:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8004404:	fa5f fc8c 	uxtb.w	ip, ip
 8004408:	f1bc 0f18 	cmp.w	ip, #24
 800440c:	f04f 030a 	mov.w	r3, #10
 8004410:	d91e      	bls.n	8004450 <__gethex+0x120>
 8004412:	b104      	cbz	r4, 8004416 <__gethex+0xe6>
 8004414:	4252      	negs	r2, r2
 8004416:	4417      	add	r7, r2
 8004418:	f8ca 1000 	str.w	r1, [sl]
 800441c:	b1ed      	cbz	r5, 800445a <__gethex+0x12a>
 800441e:	f1bb 0f00 	cmp.w	fp, #0
 8004422:	bf0c      	ite	eq
 8004424:	2506      	moveq	r5, #6
 8004426:	2500      	movne	r5, #0
 8004428:	4628      	mov	r0, r5
 800442a:	b005      	add	sp, #20
 800442c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004430:	2500      	movs	r5, #0
 8004432:	462c      	mov	r4, r5
 8004434:	e7b0      	b.n	8004398 <__gethex+0x68>
 8004436:	2c00      	cmp	r4, #0
 8004438:	d1c7      	bne.n	80043ca <__gethex+0x9a>
 800443a:	4627      	mov	r7, r4
 800443c:	e7c7      	b.n	80043ce <__gethex+0x9e>
 800443e:	464e      	mov	r6, r9
 8004440:	462f      	mov	r7, r5
 8004442:	2501      	movs	r5, #1
 8004444:	e7c3      	b.n	80043ce <__gethex+0x9e>
 8004446:	2400      	movs	r4, #0
 8004448:	1cb1      	adds	r1, r6, #2
 800444a:	e7cc      	b.n	80043e6 <__gethex+0xb6>
 800444c:	2401      	movs	r4, #1
 800444e:	e7fb      	b.n	8004448 <__gethex+0x118>
 8004450:	fb03 0002 	mla	r0, r3, r2, r0
 8004454:	e7ce      	b.n	80043f4 <__gethex+0xc4>
 8004456:	4631      	mov	r1, r6
 8004458:	e7de      	b.n	8004418 <__gethex+0xe8>
 800445a:	4629      	mov	r1, r5
 800445c:	eba6 0309 	sub.w	r3, r6, r9
 8004460:	3b01      	subs	r3, #1
 8004462:	2b07      	cmp	r3, #7
 8004464:	dc0a      	bgt.n	800447c <__gethex+0x14c>
 8004466:	9801      	ldr	r0, [sp, #4]
 8004468:	f000 feec 	bl	8005244 <_Balloc>
 800446c:	4604      	mov	r4, r0
 800446e:	b940      	cbnz	r0, 8004482 <__gethex+0x152>
 8004470:	4602      	mov	r2, r0
 8004472:	21e4      	movs	r1, #228	@ 0xe4
 8004474:	4b5b      	ldr	r3, [pc, #364]	@ (80045e4 <__gethex+0x2b4>)
 8004476:	485c      	ldr	r0, [pc, #368]	@ (80045e8 <__gethex+0x2b8>)
 8004478:	f001 fd08 	bl	8005e8c <__assert_func>
 800447c:	3101      	adds	r1, #1
 800447e:	105b      	asrs	r3, r3, #1
 8004480:	e7ef      	b.n	8004462 <__gethex+0x132>
 8004482:	2300      	movs	r3, #0
 8004484:	f100 0a14 	add.w	sl, r0, #20
 8004488:	4655      	mov	r5, sl
 800448a:	469b      	mov	fp, r3
 800448c:	45b1      	cmp	r9, r6
 800448e:	d337      	bcc.n	8004500 <__gethex+0x1d0>
 8004490:	f845 bb04 	str.w	fp, [r5], #4
 8004494:	eba5 050a 	sub.w	r5, r5, sl
 8004498:	10ad      	asrs	r5, r5, #2
 800449a:	6125      	str	r5, [r4, #16]
 800449c:	4658      	mov	r0, fp
 800449e:	f000 ffc3 	bl	8005428 <__hi0bits>
 80044a2:	016d      	lsls	r5, r5, #5
 80044a4:	f8d8 6000 	ldr.w	r6, [r8]
 80044a8:	1a2d      	subs	r5, r5, r0
 80044aa:	42b5      	cmp	r5, r6
 80044ac:	dd54      	ble.n	8004558 <__gethex+0x228>
 80044ae:	1bad      	subs	r5, r5, r6
 80044b0:	4629      	mov	r1, r5
 80044b2:	4620      	mov	r0, r4
 80044b4:	f001 fb4b 	bl	8005b4e <__any_on>
 80044b8:	4681      	mov	r9, r0
 80044ba:	b178      	cbz	r0, 80044dc <__gethex+0x1ac>
 80044bc:	f04f 0901 	mov.w	r9, #1
 80044c0:	1e6b      	subs	r3, r5, #1
 80044c2:	1159      	asrs	r1, r3, #5
 80044c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	fa09 f202 	lsl.w	r2, r9, r2
 80044d0:	420a      	tst	r2, r1
 80044d2:	d003      	beq.n	80044dc <__gethex+0x1ac>
 80044d4:	454b      	cmp	r3, r9
 80044d6:	dc36      	bgt.n	8004546 <__gethex+0x216>
 80044d8:	f04f 0902 	mov.w	r9, #2
 80044dc:	4629      	mov	r1, r5
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff febe 	bl	8004260 <rshift>
 80044e4:	442f      	add	r7, r5
 80044e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80044ea:	42bb      	cmp	r3, r7
 80044ec:	da42      	bge.n	8004574 <__gethex+0x244>
 80044ee:	4621      	mov	r1, r4
 80044f0:	9801      	ldr	r0, [sp, #4]
 80044f2:	f000 fee7 	bl	80052c4 <_Bfree>
 80044f6:	2300      	movs	r3, #0
 80044f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044fa:	25a3      	movs	r5, #163	@ 0xa3
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e793      	b.n	8004428 <__gethex+0xf8>
 8004500:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8004504:	2a2e      	cmp	r2, #46	@ 0x2e
 8004506:	d012      	beq.n	800452e <__gethex+0x1fe>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d104      	bne.n	8004516 <__gethex+0x1e6>
 800450c:	f845 bb04 	str.w	fp, [r5], #4
 8004510:	f04f 0b00 	mov.w	fp, #0
 8004514:	465b      	mov	r3, fp
 8004516:	7830      	ldrb	r0, [r6, #0]
 8004518:	9303      	str	r3, [sp, #12]
 800451a:	f7ff fef4 	bl	8004306 <__hexdig_fun>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	f000 000f 	and.w	r0, r0, #15
 8004524:	4098      	lsls	r0, r3
 8004526:	ea4b 0b00 	orr.w	fp, fp, r0
 800452a:	3304      	adds	r3, #4
 800452c:	e7ae      	b.n	800448c <__gethex+0x15c>
 800452e:	45b1      	cmp	r9, r6
 8004530:	d8ea      	bhi.n	8004508 <__gethex+0x1d8>
 8004532:	2201      	movs	r2, #1
 8004534:	4630      	mov	r0, r6
 8004536:	492a      	ldr	r1, [pc, #168]	@ (80045e0 <__gethex+0x2b0>)
 8004538:	9303      	str	r3, [sp, #12]
 800453a:	f7ff fda7 	bl	800408c <strncmp>
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	2800      	cmp	r0, #0
 8004542:	d1e1      	bne.n	8004508 <__gethex+0x1d8>
 8004544:	e7a2      	b.n	800448c <__gethex+0x15c>
 8004546:	4620      	mov	r0, r4
 8004548:	1ea9      	subs	r1, r5, #2
 800454a:	f001 fb00 	bl	8005b4e <__any_on>
 800454e:	2800      	cmp	r0, #0
 8004550:	d0c2      	beq.n	80044d8 <__gethex+0x1a8>
 8004552:	f04f 0903 	mov.w	r9, #3
 8004556:	e7c1      	b.n	80044dc <__gethex+0x1ac>
 8004558:	da09      	bge.n	800456e <__gethex+0x23e>
 800455a:	1b75      	subs	r5, r6, r5
 800455c:	4621      	mov	r1, r4
 800455e:	462a      	mov	r2, r5
 8004560:	9801      	ldr	r0, [sp, #4]
 8004562:	f001 f8c5 	bl	80056f0 <__lshift>
 8004566:	4604      	mov	r4, r0
 8004568:	1b7f      	subs	r7, r7, r5
 800456a:	f100 0a14 	add.w	sl, r0, #20
 800456e:	f04f 0900 	mov.w	r9, #0
 8004572:	e7b8      	b.n	80044e6 <__gethex+0x1b6>
 8004574:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004578:	42bd      	cmp	r5, r7
 800457a:	dd6f      	ble.n	800465c <__gethex+0x32c>
 800457c:	1bed      	subs	r5, r5, r7
 800457e:	42ae      	cmp	r6, r5
 8004580:	dc34      	bgt.n	80045ec <__gethex+0x2bc>
 8004582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d022      	beq.n	80045d0 <__gethex+0x2a0>
 800458a:	2b03      	cmp	r3, #3
 800458c:	d024      	beq.n	80045d8 <__gethex+0x2a8>
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <__gethex+0x28e>
 8004592:	42ae      	cmp	r6, r5
 8004594:	d113      	bne.n	80045be <__gethex+0x28e>
 8004596:	2e01      	cmp	r6, #1
 8004598:	d10b      	bne.n	80045b2 <__gethex+0x282>
 800459a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800459e:	9a02      	ldr	r2, [sp, #8]
 80045a0:	2562      	movs	r5, #98	@ 0x62
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	2301      	movs	r3, #1
 80045a6:	6123      	str	r3, [r4, #16]
 80045a8:	f8ca 3000 	str.w	r3, [sl]
 80045ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045ae:	601c      	str	r4, [r3, #0]
 80045b0:	e73a      	b.n	8004428 <__gethex+0xf8>
 80045b2:	4620      	mov	r0, r4
 80045b4:	1e71      	subs	r1, r6, #1
 80045b6:	f001 faca 	bl	8005b4e <__any_on>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d1ed      	bne.n	800459a <__gethex+0x26a>
 80045be:	4621      	mov	r1, r4
 80045c0:	9801      	ldr	r0, [sp, #4]
 80045c2:	f000 fe7f 	bl	80052c4 <_Bfree>
 80045c6:	2300      	movs	r3, #0
 80045c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045ca:	2550      	movs	r5, #80	@ 0x50
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e72b      	b.n	8004428 <__gethex+0xf8>
 80045d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f3      	bne.n	80045be <__gethex+0x28e>
 80045d6:	e7e0      	b.n	800459a <__gethex+0x26a>
 80045d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1dd      	bne.n	800459a <__gethex+0x26a>
 80045de:	e7ee      	b.n	80045be <__gethex+0x28e>
 80045e0:	080067fe 	.word	0x080067fe
 80045e4:	08006969 	.word	0x08006969
 80045e8:	0800697a 	.word	0x0800697a
 80045ec:	1e6f      	subs	r7, r5, #1
 80045ee:	f1b9 0f00 	cmp.w	r9, #0
 80045f2:	d130      	bne.n	8004656 <__gethex+0x326>
 80045f4:	b127      	cbz	r7, 8004600 <__gethex+0x2d0>
 80045f6:	4639      	mov	r1, r7
 80045f8:	4620      	mov	r0, r4
 80045fa:	f001 faa8 	bl	8005b4e <__any_on>
 80045fe:	4681      	mov	r9, r0
 8004600:	2301      	movs	r3, #1
 8004602:	4629      	mov	r1, r5
 8004604:	1b76      	subs	r6, r6, r5
 8004606:	2502      	movs	r5, #2
 8004608:	117a      	asrs	r2, r7, #5
 800460a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800460e:	f007 071f 	and.w	r7, r7, #31
 8004612:	40bb      	lsls	r3, r7
 8004614:	4213      	tst	r3, r2
 8004616:	4620      	mov	r0, r4
 8004618:	bf18      	it	ne
 800461a:	f049 0902 	orrne.w	r9, r9, #2
 800461e:	f7ff fe1f 	bl	8004260 <rshift>
 8004622:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8004626:	f1b9 0f00 	cmp.w	r9, #0
 800462a:	d047      	beq.n	80046bc <__gethex+0x38c>
 800462c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d015      	beq.n	8004660 <__gethex+0x330>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d017      	beq.n	8004668 <__gethex+0x338>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d109      	bne.n	8004650 <__gethex+0x320>
 800463c:	f019 0f02 	tst.w	r9, #2
 8004640:	d006      	beq.n	8004650 <__gethex+0x320>
 8004642:	f8da 3000 	ldr.w	r3, [sl]
 8004646:	ea49 0903 	orr.w	r9, r9, r3
 800464a:	f019 0f01 	tst.w	r9, #1
 800464e:	d10e      	bne.n	800466e <__gethex+0x33e>
 8004650:	f045 0510 	orr.w	r5, r5, #16
 8004654:	e032      	b.n	80046bc <__gethex+0x38c>
 8004656:	f04f 0901 	mov.w	r9, #1
 800465a:	e7d1      	b.n	8004600 <__gethex+0x2d0>
 800465c:	2501      	movs	r5, #1
 800465e:	e7e2      	b.n	8004626 <__gethex+0x2f6>
 8004660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004662:	f1c3 0301 	rsb	r3, r3, #1
 8004666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <__gethex+0x320>
 800466e:	f04f 0c00 	mov.w	ip, #0
 8004672:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004676:	f104 0314 	add.w	r3, r4, #20
 800467a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800467e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004682:	4618      	mov	r0, r3
 8004684:	f853 2b04 	ldr.w	r2, [r3], #4
 8004688:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800468c:	d01b      	beq.n	80046c6 <__gethex+0x396>
 800468e:	3201      	adds	r2, #1
 8004690:	6002      	str	r2, [r0, #0]
 8004692:	2d02      	cmp	r5, #2
 8004694:	f104 0314 	add.w	r3, r4, #20
 8004698:	d13c      	bne.n	8004714 <__gethex+0x3e4>
 800469a:	f8d8 2000 	ldr.w	r2, [r8]
 800469e:	3a01      	subs	r2, #1
 80046a0:	42b2      	cmp	r2, r6
 80046a2:	d109      	bne.n	80046b8 <__gethex+0x388>
 80046a4:	2201      	movs	r2, #1
 80046a6:	1171      	asrs	r1, r6, #5
 80046a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046ac:	f006 061f 	and.w	r6, r6, #31
 80046b0:	fa02 f606 	lsl.w	r6, r2, r6
 80046b4:	421e      	tst	r6, r3
 80046b6:	d13a      	bne.n	800472e <__gethex+0x3fe>
 80046b8:	f045 0520 	orr.w	r5, r5, #32
 80046bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046be:	601c      	str	r4, [r3, #0]
 80046c0:	9b02      	ldr	r3, [sp, #8]
 80046c2:	601f      	str	r7, [r3, #0]
 80046c4:	e6b0      	b.n	8004428 <__gethex+0xf8>
 80046c6:	4299      	cmp	r1, r3
 80046c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80046cc:	d8d9      	bhi.n	8004682 <__gethex+0x352>
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	459b      	cmp	fp, r3
 80046d2:	db17      	blt.n	8004704 <__gethex+0x3d4>
 80046d4:	6861      	ldr	r1, [r4, #4]
 80046d6:	9801      	ldr	r0, [sp, #4]
 80046d8:	3101      	adds	r1, #1
 80046da:	f000 fdb3 	bl	8005244 <_Balloc>
 80046de:	4681      	mov	r9, r0
 80046e0:	b918      	cbnz	r0, 80046ea <__gethex+0x3ba>
 80046e2:	4602      	mov	r2, r0
 80046e4:	2184      	movs	r1, #132	@ 0x84
 80046e6:	4b19      	ldr	r3, [pc, #100]	@ (800474c <__gethex+0x41c>)
 80046e8:	e6c5      	b.n	8004476 <__gethex+0x146>
 80046ea:	6922      	ldr	r2, [r4, #16]
 80046ec:	f104 010c 	add.w	r1, r4, #12
 80046f0:	3202      	adds	r2, #2
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	300c      	adds	r0, #12
 80046f6:	f7ff fd56 	bl	80041a6 <memcpy>
 80046fa:	4621      	mov	r1, r4
 80046fc:	9801      	ldr	r0, [sp, #4]
 80046fe:	f000 fde1 	bl	80052c4 <_Bfree>
 8004702:	464c      	mov	r4, r9
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	6122      	str	r2, [r4, #16]
 800470a:	2201      	movs	r2, #1
 800470c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004710:	615a      	str	r2, [r3, #20]
 8004712:	e7be      	b.n	8004692 <__gethex+0x362>
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	455a      	cmp	r2, fp
 8004718:	dd0b      	ble.n	8004732 <__gethex+0x402>
 800471a:	2101      	movs	r1, #1
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fd9f 	bl	8004260 <rshift>
 8004722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004726:	3701      	adds	r7, #1
 8004728:	42bb      	cmp	r3, r7
 800472a:	f6ff aee0 	blt.w	80044ee <__gethex+0x1be>
 800472e:	2501      	movs	r5, #1
 8004730:	e7c2      	b.n	80046b8 <__gethex+0x388>
 8004732:	f016 061f 	ands.w	r6, r6, #31
 8004736:	d0fa      	beq.n	800472e <__gethex+0x3fe>
 8004738:	4453      	add	r3, sl
 800473a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800473e:	f000 fe73 	bl	8005428 <__hi0bits>
 8004742:	f1c6 0620 	rsb	r6, r6, #32
 8004746:	42b0      	cmp	r0, r6
 8004748:	dbe7      	blt.n	800471a <__gethex+0x3ea>
 800474a:	e7f0      	b.n	800472e <__gethex+0x3fe>
 800474c:	08006969 	.word	0x08006969

08004750 <L_shift>:
 8004750:	f1c2 0208 	rsb	r2, r2, #8
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	f1c2 0620 	rsb	r6, r2, #32
 800475c:	6843      	ldr	r3, [r0, #4]
 800475e:	6804      	ldr	r4, [r0, #0]
 8004760:	fa03 f506 	lsl.w	r5, r3, r6
 8004764:	432c      	orrs	r4, r5
 8004766:	40d3      	lsrs	r3, r2
 8004768:	6004      	str	r4, [r0, #0]
 800476a:	f840 3f04 	str.w	r3, [r0, #4]!
 800476e:	4288      	cmp	r0, r1
 8004770:	d3f4      	bcc.n	800475c <L_shift+0xc>
 8004772:	bd70      	pop	{r4, r5, r6, pc}

08004774 <__match>:
 8004774:	b530      	push	{r4, r5, lr}
 8004776:	6803      	ldr	r3, [r0, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477e:	b914      	cbnz	r4, 8004786 <__match+0x12>
 8004780:	6003      	str	r3, [r0, #0]
 8004782:	2001      	movs	r0, #1
 8004784:	bd30      	pop	{r4, r5, pc}
 8004786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800478e:	2d19      	cmp	r5, #25
 8004790:	bf98      	it	ls
 8004792:	3220      	addls	r2, #32
 8004794:	42a2      	cmp	r2, r4
 8004796:	d0f0      	beq.n	800477a <__match+0x6>
 8004798:	2000      	movs	r0, #0
 800479a:	e7f3      	b.n	8004784 <__match+0x10>

0800479c <__hexnan>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	2500      	movs	r5, #0
 80047a2:	680b      	ldr	r3, [r1, #0]
 80047a4:	4682      	mov	sl, r0
 80047a6:	115e      	asrs	r6, r3, #5
 80047a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80047ac:	f013 031f 	ands.w	r3, r3, #31
 80047b0:	bf18      	it	ne
 80047b2:	3604      	addne	r6, #4
 80047b4:	1f37      	subs	r7, r6, #4
 80047b6:	4690      	mov	r8, r2
 80047b8:	46b9      	mov	r9, r7
 80047ba:	463c      	mov	r4, r7
 80047bc:	46ab      	mov	fp, r5
 80047be:	b087      	sub	sp, #28
 80047c0:	6801      	ldr	r1, [r0, #0]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	f846 5c04 	str.w	r5, [r6, #-4]
 80047c8:	9502      	str	r5, [sp, #8]
 80047ca:	784a      	ldrb	r2, [r1, #1]
 80047cc:	1c4b      	adds	r3, r1, #1
 80047ce:	9303      	str	r3, [sp, #12]
 80047d0:	b342      	cbz	r2, 8004824 <__hexnan+0x88>
 80047d2:	4610      	mov	r0, r2
 80047d4:	9105      	str	r1, [sp, #20]
 80047d6:	9204      	str	r2, [sp, #16]
 80047d8:	f7ff fd95 	bl	8004306 <__hexdig_fun>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d151      	bne.n	8004884 <__hexnan+0xe8>
 80047e0:	9a04      	ldr	r2, [sp, #16]
 80047e2:	9905      	ldr	r1, [sp, #20]
 80047e4:	2a20      	cmp	r2, #32
 80047e6:	d818      	bhi.n	800481a <__hexnan+0x7e>
 80047e8:	9b02      	ldr	r3, [sp, #8]
 80047ea:	459b      	cmp	fp, r3
 80047ec:	dd13      	ble.n	8004816 <__hexnan+0x7a>
 80047ee:	454c      	cmp	r4, r9
 80047f0:	d206      	bcs.n	8004800 <__hexnan+0x64>
 80047f2:	2d07      	cmp	r5, #7
 80047f4:	dc04      	bgt.n	8004800 <__hexnan+0x64>
 80047f6:	462a      	mov	r2, r5
 80047f8:	4649      	mov	r1, r9
 80047fa:	4620      	mov	r0, r4
 80047fc:	f7ff ffa8 	bl	8004750 <L_shift>
 8004800:	4544      	cmp	r4, r8
 8004802:	d952      	bls.n	80048aa <__hexnan+0x10e>
 8004804:	2300      	movs	r3, #0
 8004806:	f1a4 0904 	sub.w	r9, r4, #4
 800480a:	f844 3c04 	str.w	r3, [r4, #-4]
 800480e:	461d      	mov	r5, r3
 8004810:	464c      	mov	r4, r9
 8004812:	f8cd b008 	str.w	fp, [sp, #8]
 8004816:	9903      	ldr	r1, [sp, #12]
 8004818:	e7d7      	b.n	80047ca <__hexnan+0x2e>
 800481a:	2a29      	cmp	r2, #41	@ 0x29
 800481c:	d157      	bne.n	80048ce <__hexnan+0x132>
 800481e:	3102      	adds	r1, #2
 8004820:	f8ca 1000 	str.w	r1, [sl]
 8004824:	f1bb 0f00 	cmp.w	fp, #0
 8004828:	d051      	beq.n	80048ce <__hexnan+0x132>
 800482a:	454c      	cmp	r4, r9
 800482c:	d206      	bcs.n	800483c <__hexnan+0xa0>
 800482e:	2d07      	cmp	r5, #7
 8004830:	dc04      	bgt.n	800483c <__hexnan+0xa0>
 8004832:	462a      	mov	r2, r5
 8004834:	4649      	mov	r1, r9
 8004836:	4620      	mov	r0, r4
 8004838:	f7ff ff8a 	bl	8004750 <L_shift>
 800483c:	4544      	cmp	r4, r8
 800483e:	d936      	bls.n	80048ae <__hexnan+0x112>
 8004840:	4623      	mov	r3, r4
 8004842:	f1a8 0204 	sub.w	r2, r8, #4
 8004846:	f853 1b04 	ldr.w	r1, [r3], #4
 800484a:	429f      	cmp	r7, r3
 800484c:	f842 1f04 	str.w	r1, [r2, #4]!
 8004850:	d2f9      	bcs.n	8004846 <__hexnan+0xaa>
 8004852:	1b3b      	subs	r3, r7, r4
 8004854:	f023 0303 	bic.w	r3, r3, #3
 8004858:	3304      	adds	r3, #4
 800485a:	3401      	adds	r4, #1
 800485c:	3e03      	subs	r6, #3
 800485e:	42b4      	cmp	r4, r6
 8004860:	bf88      	it	hi
 8004862:	2304      	movhi	r3, #4
 8004864:	2200      	movs	r2, #0
 8004866:	4443      	add	r3, r8
 8004868:	f843 2b04 	str.w	r2, [r3], #4
 800486c:	429f      	cmp	r7, r3
 800486e:	d2fb      	bcs.n	8004868 <__hexnan+0xcc>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	b91b      	cbnz	r3, 800487c <__hexnan+0xe0>
 8004874:	4547      	cmp	r7, r8
 8004876:	d128      	bne.n	80048ca <__hexnan+0x12e>
 8004878:	2301      	movs	r3, #1
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	2005      	movs	r0, #5
 800487e:	b007      	add	sp, #28
 8004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004884:	3501      	adds	r5, #1
 8004886:	2d08      	cmp	r5, #8
 8004888:	f10b 0b01 	add.w	fp, fp, #1
 800488c:	dd06      	ble.n	800489c <__hexnan+0x100>
 800488e:	4544      	cmp	r4, r8
 8004890:	d9c1      	bls.n	8004816 <__hexnan+0x7a>
 8004892:	2300      	movs	r3, #0
 8004894:	2501      	movs	r5, #1
 8004896:	f844 3c04 	str.w	r3, [r4, #-4]
 800489a:	3c04      	subs	r4, #4
 800489c:	6822      	ldr	r2, [r4, #0]
 800489e:	f000 000f 	and.w	r0, r0, #15
 80048a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80048a6:	6020      	str	r0, [r4, #0]
 80048a8:	e7b5      	b.n	8004816 <__hexnan+0x7a>
 80048aa:	2508      	movs	r5, #8
 80048ac:	e7b3      	b.n	8004816 <__hexnan+0x7a>
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0dd      	beq.n	8004870 <__hexnan+0xd4>
 80048b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048b8:	f1c3 0320 	rsb	r3, r3, #32
 80048bc:	40da      	lsrs	r2, r3
 80048be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80048c2:	4013      	ands	r3, r2
 80048c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80048c8:	e7d2      	b.n	8004870 <__hexnan+0xd4>
 80048ca:	3f04      	subs	r7, #4
 80048cc:	e7d0      	b.n	8004870 <__hexnan+0xd4>
 80048ce:	2004      	movs	r0, #4
 80048d0:	e7d5      	b.n	800487e <__hexnan+0xe2>

080048d2 <_sungetc_r>:
 80048d2:	b538      	push	{r3, r4, r5, lr}
 80048d4:	1c4b      	adds	r3, r1, #1
 80048d6:	4614      	mov	r4, r2
 80048d8:	d103      	bne.n	80048e2 <_sungetc_r+0x10>
 80048da:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80048de:	4628      	mov	r0, r5
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	8993      	ldrh	r3, [r2, #12]
 80048e4:	b2cd      	uxtb	r5, r1
 80048e6:	f023 0320 	bic.w	r3, r3, #32
 80048ea:	8193      	strh	r3, [r2, #12]
 80048ec:	6853      	ldr	r3, [r2, #4]
 80048ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048f0:	b18a      	cbz	r2, 8004916 <_sungetc_r+0x44>
 80048f2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80048f4:	429a      	cmp	r2, r3
 80048f6:	dd08      	ble.n	800490a <_sungetc_r+0x38>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	6022      	str	r2, [r4, #0]
 80048fe:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	3301      	adds	r3, #1
 8004906:	6063      	str	r3, [r4, #4]
 8004908:	e7e9      	b.n	80048de <_sungetc_r+0xc>
 800490a:	4621      	mov	r1, r4
 800490c:	f001 f940 	bl	8005b90 <__submore>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0f1      	beq.n	80048f8 <_sungetc_r+0x26>
 8004914:	e7e1      	b.n	80048da <_sungetc_r+0x8>
 8004916:	6921      	ldr	r1, [r4, #16]
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	b141      	cbz	r1, 800492e <_sungetc_r+0x5c>
 800491c:	4291      	cmp	r1, r2
 800491e:	d206      	bcs.n	800492e <_sungetc_r+0x5c>
 8004920:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004924:	42a9      	cmp	r1, r5
 8004926:	d102      	bne.n	800492e <_sungetc_r+0x5c>
 8004928:	3a01      	subs	r2, #1
 800492a:	6022      	str	r2, [r4, #0]
 800492c:	e7ea      	b.n	8004904 <_sungetc_r+0x32>
 800492e:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004932:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004936:	6363      	str	r3, [r4, #52]	@ 0x34
 8004938:	2303      	movs	r3, #3
 800493a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800493c:	4623      	mov	r3, r4
 800493e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	2301      	movs	r3, #1
 8004946:	e7de      	b.n	8004906 <_sungetc_r+0x34>

08004948 <__ssrefill_r>:
 8004948:	b510      	push	{r4, lr}
 800494a:	460c      	mov	r4, r1
 800494c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800494e:	b169      	cbz	r1, 800496c <__ssrefill_r+0x24>
 8004950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004954:	4299      	cmp	r1, r3
 8004956:	d001      	beq.n	800495c <__ssrefill_r+0x14>
 8004958:	f7ff fc3a 	bl	80041d0 <_free_r>
 800495c:	2000      	movs	r0, #0
 800495e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004960:	6360      	str	r0, [r4, #52]	@ 0x34
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	b113      	cbz	r3, 800496c <__ssrefill_r+0x24>
 8004966:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	bd10      	pop	{r4, pc}
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	6063      	str	r3, [r4, #4]
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	f043 0320 	orr.w	r3, r3, #32
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	e7f3      	b.n	800496a <__ssrefill_r+0x22>
	...

08004984 <__ssvfiscanf_r>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	460c      	mov	r4, r1
 800498a:	2100      	movs	r1, #0
 800498c:	4606      	mov	r6, r0
 800498e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004992:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004996:	49aa      	ldr	r1, [pc, #680]	@ (8004c40 <__ssvfiscanf_r+0x2bc>)
 8004998:	f10d 0804 	add.w	r8, sp, #4
 800499c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800499e:	49a9      	ldr	r1, [pc, #676]	@ (8004c44 <__ssvfiscanf_r+0x2c0>)
 80049a0:	4fa9      	ldr	r7, [pc, #676]	@ (8004c48 <__ssvfiscanf_r+0x2c4>)
 80049a2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80049a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	7813      	ldrb	r3, [r2, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8159 	beq.w	8004c64 <__ssvfiscanf_r+0x2e0>
 80049b2:	5cf9      	ldrb	r1, [r7, r3]
 80049b4:	1c55      	adds	r5, r2, #1
 80049b6:	f011 0108 	ands.w	r1, r1, #8
 80049ba:	d019      	beq.n	80049f0 <__ssvfiscanf_r+0x6c>
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dd0f      	ble.n	80049e2 <__ssvfiscanf_r+0x5e>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	5cba      	ldrb	r2, [r7, r2]
 80049c8:	0712      	lsls	r2, r2, #28
 80049ca:	d401      	bmi.n	80049d0 <__ssvfiscanf_r+0x4c>
 80049cc:	462a      	mov	r2, r5
 80049ce:	e7ec      	b.n	80049aa <__ssvfiscanf_r+0x26>
 80049d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80049d2:	3301      	adds	r3, #1
 80049d4:	3201      	adds	r2, #1
 80049d6:	9245      	str	r2, [sp, #276]	@ 0x114
 80049d8:	6862      	ldr	r2, [r4, #4]
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	3a01      	subs	r2, #1
 80049de:	6062      	str	r2, [r4, #4]
 80049e0:	e7ec      	b.n	80049bc <__ssvfiscanf_r+0x38>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4630      	mov	r0, r6
 80049e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80049e8:	4798      	blx	r3
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0e9      	beq.n	80049c2 <__ssvfiscanf_r+0x3e>
 80049ee:	e7ed      	b.n	80049cc <__ssvfiscanf_r+0x48>
 80049f0:	2b25      	cmp	r3, #37	@ 0x25
 80049f2:	d012      	beq.n	8004a1a <__ssvfiscanf_r+0x96>
 80049f4:	4699      	mov	r9, r3
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f340 8094 	ble.w	8004b26 <__ssvfiscanf_r+0x1a2>
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	7813      	ldrb	r3, [r2, #0]
 8004a02:	454b      	cmp	r3, r9
 8004a04:	f040 812e 	bne.w	8004c64 <__ssvfiscanf_r+0x2e0>
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004a12:	6022      	str	r2, [r4, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	9345      	str	r3, [sp, #276]	@ 0x114
 8004a18:	e7d8      	b.n	80049cc <__ssvfiscanf_r+0x48>
 8004a1a:	9141      	str	r1, [sp, #260]	@ 0x104
 8004a1c:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004a1e:	7853      	ldrb	r3, [r2, #1]
 8004a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a22:	bf04      	itt	eq
 8004a24:	2310      	moveq	r3, #16
 8004a26:	1c95      	addeq	r5, r2, #2
 8004a28:	f04f 020a 	mov.w	r2, #10
 8004a2c:	bf08      	it	eq
 8004a2e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004a30:	46a9      	mov	r9, r5
 8004a32:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004a36:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	d91e      	bls.n	8004a7c <__ssvfiscanf_r+0xf8>
 8004a3e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8004c4c <__ssvfiscanf_r+0x2c8>
 8004a42:	2203      	movs	r2, #3
 8004a44:	4650      	mov	r0, sl
 8004a46:	f001 fa13 	bl	8005e70 <memchr>
 8004a4a:	b138      	cbz	r0, 8004a5c <__ssvfiscanf_r+0xd8>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	464d      	mov	r5, r9
 8004a50:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004a52:	eba0 000a 	sub.w	r0, r0, sl
 8004a56:	4083      	lsls	r3, r0
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8004a5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a60:	2b78      	cmp	r3, #120	@ 0x78
 8004a62:	d806      	bhi.n	8004a72 <__ssvfiscanf_r+0xee>
 8004a64:	2b57      	cmp	r3, #87	@ 0x57
 8004a66:	d810      	bhi.n	8004a8a <__ssvfiscanf_r+0x106>
 8004a68:	2b25      	cmp	r3, #37	@ 0x25
 8004a6a:	d0c3      	beq.n	80049f4 <__ssvfiscanf_r+0x70>
 8004a6c:	d856      	bhi.n	8004b1c <__ssvfiscanf_r+0x198>
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d064      	beq.n	8004b3c <__ssvfiscanf_r+0x1b8>
 8004a72:	2303      	movs	r3, #3
 8004a74:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004a76:	230a      	movs	r3, #10
 8004a78:	9342      	str	r3, [sp, #264]	@ 0x108
 8004a7a:	e077      	b.n	8004b6c <__ssvfiscanf_r+0x1e8>
 8004a7c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004a7e:	464d      	mov	r5, r9
 8004a80:	fb02 1103 	mla	r1, r2, r3, r1
 8004a84:	3930      	subs	r1, #48	@ 0x30
 8004a86:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004a88:	e7d2      	b.n	8004a30 <__ssvfiscanf_r+0xac>
 8004a8a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004a8e:	2a20      	cmp	r2, #32
 8004a90:	d8ef      	bhi.n	8004a72 <__ssvfiscanf_r+0xee>
 8004a92:	a101      	add	r1, pc, #4	@ (adr r1, 8004a98 <__ssvfiscanf_r+0x114>)
 8004a94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a98:	08004b4b 	.word	0x08004b4b
 8004a9c:	08004a73 	.word	0x08004a73
 8004aa0:	08004a73 	.word	0x08004a73
 8004aa4:	08004ba5 	.word	0x08004ba5
 8004aa8:	08004a73 	.word	0x08004a73
 8004aac:	08004a73 	.word	0x08004a73
 8004ab0:	08004a73 	.word	0x08004a73
 8004ab4:	08004a73 	.word	0x08004a73
 8004ab8:	08004a73 	.word	0x08004a73
 8004abc:	08004a73 	.word	0x08004a73
 8004ac0:	08004a73 	.word	0x08004a73
 8004ac4:	08004bbb 	.word	0x08004bbb
 8004ac8:	08004ba1 	.word	0x08004ba1
 8004acc:	08004b23 	.word	0x08004b23
 8004ad0:	08004b23 	.word	0x08004b23
 8004ad4:	08004b23 	.word	0x08004b23
 8004ad8:	08004a73 	.word	0x08004a73
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004a73 	.word	0x08004a73
 8004ae4:	08004a73 	.word	0x08004a73
 8004ae8:	08004a73 	.word	0x08004a73
 8004aec:	08004a73 	.word	0x08004a73
 8004af0:	08004bcb 	.word	0x08004bcb
 8004af4:	08004b65 	.word	0x08004b65
 8004af8:	08004b43 	.word	0x08004b43
 8004afc:	08004a73 	.word	0x08004a73
 8004b00:	08004a73 	.word	0x08004a73
 8004b04:	08004bc7 	.word	0x08004bc7
 8004b08:	08004a73 	.word	0x08004a73
 8004b0c:	08004ba1 	.word	0x08004ba1
 8004b10:	08004a73 	.word	0x08004a73
 8004b14:	08004a73 	.word	0x08004a73
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	3b45      	subs	r3, #69	@ 0x45
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d8a7      	bhi.n	8004a72 <__ssvfiscanf_r+0xee>
 8004b22:	2305      	movs	r3, #5
 8004b24:	e021      	b.n	8004b6a <__ssvfiscanf_r+0x1e6>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4630      	mov	r0, r6
 8004b2a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b2c:	4798      	blx	r3
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	f43f af65 	beq.w	80049fe <__ssvfiscanf_r+0x7a>
 8004b34:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f040 808c 	bne.w	8004c54 <__ssvfiscanf_r+0x2d0>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b40:	e08c      	b.n	8004c5c <__ssvfiscanf_r+0x2d8>
 8004b42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b44:	f042 0220 	orr.w	r2, r2, #32
 8004b48:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b4a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b50:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b52:	2210      	movs	r2, #16
 8004b54:	2b6e      	cmp	r3, #110	@ 0x6e
 8004b56:	9242      	str	r2, [sp, #264]	@ 0x108
 8004b58:	d902      	bls.n	8004b60 <__ssvfiscanf_r+0x1dc>
 8004b5a:	e005      	b.n	8004b68 <__ssvfiscanf_r+0x1e4>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004b60:	2303      	movs	r3, #3
 8004b62:	e002      	b.n	8004b6a <__ssvfiscanf_r+0x1e6>
 8004b64:	2308      	movs	r3, #8
 8004b66:	9342      	str	r3, [sp, #264]	@ 0x108
 8004b68:	2304      	movs	r3, #4
 8004b6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dd39      	ble.n	8004be6 <__ssvfiscanf_r+0x262>
 8004b72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b74:	0659      	lsls	r1, r3, #25
 8004b76:	d404      	bmi.n	8004b82 <__ssvfiscanf_r+0x1fe>
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	5cba      	ldrb	r2, [r7, r2]
 8004b7e:	0712      	lsls	r2, r2, #28
 8004b80:	d438      	bmi.n	8004bf4 <__ssvfiscanf_r+0x270>
 8004b82:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	dc47      	bgt.n	8004c18 <__ssvfiscanf_r+0x294>
 8004b88:	466b      	mov	r3, sp
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	a941      	add	r1, sp, #260	@ 0x104
 8004b90:	f000 f91e 	bl	8004dd0 <_scanf_chars>
 8004b94:	2801      	cmp	r0, #1
 8004b96:	d065      	beq.n	8004c64 <__ssvfiscanf_r+0x2e0>
 8004b98:	2802      	cmp	r0, #2
 8004b9a:	f47f af17 	bne.w	80049cc <__ssvfiscanf_r+0x48>
 8004b9e:	e7c9      	b.n	8004b34 <__ssvfiscanf_r+0x1b0>
 8004ba0:	220a      	movs	r2, #10
 8004ba2:	e7d7      	b.n	8004b54 <__ssvfiscanf_r+0x1d0>
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f000 fa5e 	bl	8005068 <__sccl>
 8004bac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004bae:	4605      	mov	r5, r0
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bb4:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7d7      	b.n	8004b6a <__ssvfiscanf_r+0x1e6>
 8004bba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bc0:	9341      	str	r3, [sp, #260]	@ 0x104
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e7d1      	b.n	8004b6a <__ssvfiscanf_r+0x1e6>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e7cf      	b.n	8004b6a <__ssvfiscanf_r+0x1e6>
 8004bca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004bcc:	06c3      	lsls	r3, r0, #27
 8004bce:	f53f aefd 	bmi.w	80049cc <__ssvfiscanf_r+0x48>
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004bd6:	1d19      	adds	r1, r3, #4
 8004bd8:	9100      	str	r1, [sp, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	07c0      	lsls	r0, r0, #31
 8004bde:	bf4c      	ite	mi
 8004be0:	801a      	strhmi	r2, [r3, #0]
 8004be2:	601a      	strpl	r2, [r3, #0]
 8004be4:	e6f2      	b.n	80049cc <__ssvfiscanf_r+0x48>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4630      	mov	r0, r6
 8004bea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004bec:	4798      	blx	r3
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d0bf      	beq.n	8004b72 <__ssvfiscanf_r+0x1ee>
 8004bf2:	e79f      	b.n	8004b34 <__ssvfiscanf_r+0x1b0>
 8004bf4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004bf6:	3201      	adds	r2, #1
 8004bf8:	9245      	str	r2, [sp, #276]	@ 0x114
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	3a01      	subs	r2, #1
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	6062      	str	r2, [r4, #4]
 8004c02:	dd02      	ble.n	8004c0a <__ssvfiscanf_r+0x286>
 8004c04:	3301      	adds	r3, #1
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	e7b6      	b.n	8004b78 <__ssvfiscanf_r+0x1f4>
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004c10:	4798      	blx	r3
 8004c12:	2800      	cmp	r0, #0
 8004c14:	d0b0      	beq.n	8004b78 <__ssvfiscanf_r+0x1f4>
 8004c16:	e78d      	b.n	8004b34 <__ssvfiscanf_r+0x1b0>
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	dc06      	bgt.n	8004c2a <__ssvfiscanf_r+0x2a6>
 8004c1c:	466b      	mov	r3, sp
 8004c1e:	4622      	mov	r2, r4
 8004c20:	4630      	mov	r0, r6
 8004c22:	a941      	add	r1, sp, #260	@ 0x104
 8004c24:	f000 f92e 	bl	8004e84 <_scanf_i>
 8004c28:	e7b4      	b.n	8004b94 <__ssvfiscanf_r+0x210>
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <__ssvfiscanf_r+0x2cc>)
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f43f aecd 	beq.w	80049cc <__ssvfiscanf_r+0x48>
 8004c32:	466b      	mov	r3, sp
 8004c34:	4622      	mov	r2, r4
 8004c36:	4630      	mov	r0, r6
 8004c38:	a941      	add	r1, sp, #260	@ 0x104
 8004c3a:	f3af 8000 	nop.w
 8004c3e:	e7a9      	b.n	8004b94 <__ssvfiscanf_r+0x210>
 8004c40:	080048d3 	.word	0x080048d3
 8004c44:	08004949 	.word	0x08004949
 8004c48:	08006869 	.word	0x08006869
 8004c4c:	080069da 	.word	0x080069da
 8004c50:	00000000 	.word	0x00000000
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	065b      	lsls	r3, r3, #25
 8004c58:	f53f af70 	bmi.w	8004b3c <__ssvfiscanf_r+0x1b8>
 8004c5c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004c66:	e7f9      	b.n	8004c5c <__ssvfiscanf_r+0x2d8>

08004c68 <sbrk_aligned>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ca8 <sbrk_aligned+0x40>)
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	6831      	ldr	r1, [r6, #0]
 8004c70:	4605      	mov	r5, r0
 8004c72:	b911      	cbnz	r1, 8004c7a <sbrk_aligned+0x12>
 8004c74:	f001 f8ec 	bl	8005e50 <_sbrk_r>
 8004c78:	6030      	str	r0, [r6, #0]
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f001 f8e7 	bl	8005e50 <_sbrk_r>
 8004c82:	1c43      	adds	r3, r0, #1
 8004c84:	d103      	bne.n	8004c8e <sbrk_aligned+0x26>
 8004c86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	f024 0403 	bic.w	r4, r4, #3
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d0f8      	beq.n	8004c8a <sbrk_aligned+0x22>
 8004c98:	1a21      	subs	r1, r4, r0
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f001 f8d8 	bl	8005e50 <_sbrk_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1f2      	bne.n	8004c8a <sbrk_aligned+0x22>
 8004ca4:	e7ef      	b.n	8004c86 <sbrk_aligned+0x1e>
 8004ca6:	bf00      	nop
 8004ca8:	20000430 	.word	0x20000430

08004cac <_malloc_r>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	1ccd      	adds	r5, r1, #3
 8004cb2:	f025 0503 	bic.w	r5, r5, #3
 8004cb6:	3508      	adds	r5, #8
 8004cb8:	2d0c      	cmp	r5, #12
 8004cba:	bf38      	it	cc
 8004cbc:	250c      	movcc	r5, #12
 8004cbe:	2d00      	cmp	r5, #0
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	db01      	blt.n	8004cc8 <_malloc_r+0x1c>
 8004cc4:	42a9      	cmp	r1, r5
 8004cc6:	d904      	bls.n	8004cd2 <_malloc_r+0x26>
 8004cc8:	230c      	movs	r3, #12
 8004cca:	6033      	str	r3, [r6, #0]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004da8 <_malloc_r+0xfc>
 8004cd6:	f000 faa9 	bl	800522c <__malloc_lock>
 8004cda:	f8d8 3000 	ldr.w	r3, [r8]
 8004cde:	461c      	mov	r4, r3
 8004ce0:	bb44      	cbnz	r4, 8004d34 <_malloc_r+0x88>
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ffbf 	bl	8004c68 <sbrk_aligned>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	4604      	mov	r4, r0
 8004cee:	d158      	bne.n	8004da2 <_malloc_r+0xf6>
 8004cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf4:	4627      	mov	r7, r4
 8004cf6:	2f00      	cmp	r7, #0
 8004cf8:	d143      	bne.n	8004d82 <_malloc_r+0xd6>
 8004cfa:	2c00      	cmp	r4, #0
 8004cfc:	d04b      	beq.n	8004d96 <_malloc_r+0xea>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	4639      	mov	r1, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	eb04 0903 	add.w	r9, r4, r3
 8004d08:	f001 f8a2 	bl	8005e50 <_sbrk_r>
 8004d0c:	4581      	cmp	r9, r0
 8004d0e:	d142      	bne.n	8004d96 <_malloc_r+0xea>
 8004d10:	6821      	ldr	r1, [r4, #0]
 8004d12:	4630      	mov	r0, r6
 8004d14:	1a6d      	subs	r5, r5, r1
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7ff ffa6 	bl	8004c68 <sbrk_aligned>
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	d03a      	beq.n	8004d96 <_malloc_r+0xea>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	442b      	add	r3, r5
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	bb62      	cbnz	r2, 8004d88 <_malloc_r+0xdc>
 8004d2e:	f8c8 7000 	str.w	r7, [r8]
 8004d32:	e00f      	b.n	8004d54 <_malloc_r+0xa8>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	1b52      	subs	r2, r2, r5
 8004d38:	d420      	bmi.n	8004d7c <_malloc_r+0xd0>
 8004d3a:	2a0b      	cmp	r2, #11
 8004d3c:	d917      	bls.n	8004d6e <_malloc_r+0xc2>
 8004d3e:	1961      	adds	r1, r4, r5
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	6025      	str	r5, [r4, #0]
 8004d44:	bf18      	it	ne
 8004d46:	6059      	strne	r1, [r3, #4]
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	bf08      	it	eq
 8004d4c:	f8c8 1000 	streq.w	r1, [r8]
 8004d50:	5162      	str	r2, [r4, r5]
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	4630      	mov	r0, r6
 8004d56:	f000 fa6f 	bl	8005238 <__malloc_unlock>
 8004d5a:	f104 000b 	add.w	r0, r4, #11
 8004d5e:	1d23      	adds	r3, r4, #4
 8004d60:	f020 0007 	bic.w	r0, r0, #7
 8004d64:	1ac2      	subs	r2, r0, r3
 8004d66:	bf1c      	itt	ne
 8004d68:	1a1b      	subne	r3, r3, r0
 8004d6a:	50a3      	strne	r3, [r4, r2]
 8004d6c:	e7af      	b.n	8004cce <_malloc_r+0x22>
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	bf0c      	ite	eq
 8004d74:	f8c8 2000 	streq.w	r2, [r8]
 8004d78:	605a      	strne	r2, [r3, #4]
 8004d7a:	e7eb      	b.n	8004d54 <_malloc_r+0xa8>
 8004d7c:	4623      	mov	r3, r4
 8004d7e:	6864      	ldr	r4, [r4, #4]
 8004d80:	e7ae      	b.n	8004ce0 <_malloc_r+0x34>
 8004d82:	463c      	mov	r4, r7
 8004d84:	687f      	ldr	r7, [r7, #4]
 8004d86:	e7b6      	b.n	8004cf6 <_malloc_r+0x4a>
 8004d88:	461a      	mov	r2, r3
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d1fb      	bne.n	8004d88 <_malloc_r+0xdc>
 8004d90:	2300      	movs	r3, #0
 8004d92:	6053      	str	r3, [r2, #4]
 8004d94:	e7de      	b.n	8004d54 <_malloc_r+0xa8>
 8004d96:	230c      	movs	r3, #12
 8004d98:	4630      	mov	r0, r6
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f000 fa4c 	bl	8005238 <__malloc_unlock>
 8004da0:	e794      	b.n	8004ccc <_malloc_r+0x20>
 8004da2:	6005      	str	r5, [r0, #0]
 8004da4:	e7d6      	b.n	8004d54 <_malloc_r+0xa8>
 8004da6:	bf00      	nop
 8004da8:	20000434 	.word	0x20000434

08004dac <__ascii_mbtowc>:
 8004dac:	b082      	sub	sp, #8
 8004dae:	b901      	cbnz	r1, 8004db2 <__ascii_mbtowc+0x6>
 8004db0:	a901      	add	r1, sp, #4
 8004db2:	b142      	cbz	r2, 8004dc6 <__ascii_mbtowc+0x1a>
 8004db4:	b14b      	cbz	r3, 8004dca <__ascii_mbtowc+0x1e>
 8004db6:	7813      	ldrb	r3, [r2, #0]
 8004db8:	600b      	str	r3, [r1, #0]
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	1e10      	subs	r0, r2, #0
 8004dbe:	bf18      	it	ne
 8004dc0:	2001      	movne	r0, #1
 8004dc2:	b002      	add	sp, #8
 8004dc4:	4770      	bx	lr
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	e7fb      	b.n	8004dc2 <__ascii_mbtowc+0x16>
 8004dca:	f06f 0001 	mvn.w	r0, #1
 8004dce:	e7f8      	b.n	8004dc2 <__ascii_mbtowc+0x16>

08004dd0 <_scanf_chars>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	688a      	ldr	r2, [r1, #8]
 8004dd8:	4680      	mov	r8, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	b932      	cbnz	r2, 8004dec <_scanf_chars+0x1c>
 8004dde:	698a      	ldr	r2, [r1, #24]
 8004de0:	2a00      	cmp	r2, #0
 8004de2:	bf14      	ite	ne
 8004de4:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8004de8:	2201      	moveq	r2, #1
 8004dea:	608a      	str	r2, [r1, #8]
 8004dec:	2700      	movs	r7, #0
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8004e80 <_scanf_chars+0xb0>
 8004df4:	06d1      	lsls	r1, r2, #27
 8004df6:	bf5f      	itttt	pl
 8004df8:	681a      	ldrpl	r2, [r3, #0]
 8004dfa:	1d11      	addpl	r1, r2, #4
 8004dfc:	6019      	strpl	r1, [r3, #0]
 8004dfe:	6816      	ldrpl	r6, [r2, #0]
 8004e00:	69a0      	ldr	r0, [r4, #24]
 8004e02:	b188      	cbz	r0, 8004e28 <_scanf_chars+0x58>
 8004e04:	2801      	cmp	r0, #1
 8004e06:	d107      	bne.n	8004e18 <_scanf_chars+0x48>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	6963      	ldr	r3, [r4, #20]
 8004e0e:	5c9b      	ldrb	r3, [r3, r2]
 8004e10:	b953      	cbnz	r3, 8004e28 <_scanf_chars+0x58>
 8004e12:	2f00      	cmp	r7, #0
 8004e14:	d031      	beq.n	8004e7a <_scanf_chars+0xaa>
 8004e16:	e022      	b.n	8004e5e <_scanf_chars+0x8e>
 8004e18:	2802      	cmp	r0, #2
 8004e1a:	d120      	bne.n	8004e5e <_scanf_chars+0x8e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004e24:	071b      	lsls	r3, r3, #28
 8004e26:	d41a      	bmi.n	8004e5e <_scanf_chars+0x8e>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	3701      	adds	r7, #1
 8004e2c:	06da      	lsls	r2, r3, #27
 8004e2e:	bf5e      	ittt	pl
 8004e30:	682b      	ldrpl	r3, [r5, #0]
 8004e32:	781b      	ldrbpl	r3, [r3, #0]
 8004e34:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004e38:	682a      	ldr	r2, [r5, #0]
 8004e3a:	686b      	ldr	r3, [r5, #4]
 8004e3c:	3201      	adds	r2, #1
 8004e3e:	602a      	str	r2, [r5, #0]
 8004e40:	68a2      	ldr	r2, [r4, #8]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	606b      	str	r3, [r5, #4]
 8004e48:	60a2      	str	r2, [r4, #8]
 8004e4a:	b142      	cbz	r2, 8004e5e <_scanf_chars+0x8e>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dcd7      	bgt.n	8004e00 <_scanf_chars+0x30>
 8004e50:	4629      	mov	r1, r5
 8004e52:	4640      	mov	r0, r8
 8004e54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004e58:	4798      	blx	r3
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d0d0      	beq.n	8004e00 <_scanf_chars+0x30>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	f013 0310 	ands.w	r3, r3, #16
 8004e64:	d105      	bne.n	8004e72 <_scanf_chars+0xa2>
 8004e66:	68e2      	ldr	r2, [r4, #12]
 8004e68:	3201      	adds	r2, #1
 8004e6a:	60e2      	str	r2, [r4, #12]
 8004e6c:	69a2      	ldr	r2, [r4, #24]
 8004e6e:	b102      	cbz	r2, 8004e72 <_scanf_chars+0xa2>
 8004e70:	7033      	strb	r3, [r6, #0]
 8004e72:	2000      	movs	r0, #0
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	443b      	add	r3, r7
 8004e78:	6123      	str	r3, [r4, #16]
 8004e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e7e:	bf00      	nop
 8004e80:	08006869 	.word	0x08006869

08004e84 <_scanf_i>:
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	4b72      	ldr	r3, [pc, #456]	@ (8005058 <_scanf_i+0x1d4>)
 8004e8e:	b087      	sub	sp, #28
 8004e90:	4682      	mov	sl, r0
 8004e92:	4616      	mov	r6, r2
 8004e94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004e9e:	4b6f      	ldr	r3, [pc, #444]	@ (800505c <_scanf_i+0x1d8>)
 8004ea0:	69a1      	ldr	r1, [r4, #24]
 8004ea2:	4a6f      	ldr	r2, [pc, #444]	@ (8005060 <_scanf_i+0x1dc>)
 8004ea4:	4627      	mov	r7, r4
 8004ea6:	2903      	cmp	r1, #3
 8004ea8:	bf08      	it	eq
 8004eaa:	461a      	moveq	r2, r3
 8004eac:	68a3      	ldr	r3, [r4, #8]
 8004eae:	9201      	str	r2, [sp, #4]
 8004eb0:	1e5a      	subs	r2, r3, #1
 8004eb2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004eb6:	bf81      	itttt	hi
 8004eb8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004ebc:	eb03 0905 	addhi.w	r9, r3, r5
 8004ec0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004ec4:	60a3      	strhi	r3, [r4, #8]
 8004ec6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004eca:	bf98      	it	ls
 8004ecc:	f04f 0900 	movls.w	r9, #0
 8004ed0:	463d      	mov	r5, r7
 8004ed2:	f04f 0b00 	mov.w	fp, #0
 8004ed6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	6831      	ldr	r1, [r6, #0]
 8004ede:	ab03      	add	r3, sp, #12
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	7809      	ldrb	r1, [r1, #0]
 8004ee4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004ee8:	f000 ffc2 	bl	8005e70 <memchr>
 8004eec:	b328      	cbz	r0, 8004f3a <_scanf_i+0xb6>
 8004eee:	f1bb 0f01 	cmp.w	fp, #1
 8004ef2:	d159      	bne.n	8004fa8 <_scanf_i+0x124>
 8004ef4:	6862      	ldr	r2, [r4, #4]
 8004ef6:	b92a      	cbnz	r2, 8004f04 <_scanf_i+0x80>
 8004ef8:	2108      	movs	r1, #8
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	6061      	str	r1, [r4, #4]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f02:	6022      	str	r2, [r4, #0]
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	68a2      	ldr	r2, [r4, #8]
 8004f0e:	1e51      	subs	r1, r2, #1
 8004f10:	60a1      	str	r1, [r4, #8]
 8004f12:	b192      	cbz	r2, 8004f3a <_scanf_i+0xb6>
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1c51      	adds	r1, r2, #1
 8004f18:	6031      	str	r1, [r6, #0]
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	f805 2b01 	strb.w	r2, [r5], #1
 8004f20:	6872      	ldr	r2, [r6, #4]
 8004f22:	3a01      	subs	r2, #1
 8004f24:	2a00      	cmp	r2, #0
 8004f26:	6072      	str	r2, [r6, #4]
 8004f28:	dc07      	bgt.n	8004f3a <_scanf_i+0xb6>
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004f32:	4790      	blx	r2
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f040 8085 	bne.w	8005044 <_scanf_i+0x1c0>
 8004f3a:	f10b 0b01 	add.w	fp, fp, #1
 8004f3e:	f1bb 0f03 	cmp.w	fp, #3
 8004f42:	d1cb      	bne.n	8004edc <_scanf_i+0x58>
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	b90b      	cbnz	r3, 8004f4c <_scanf_i+0xc8>
 8004f48:	230a      	movs	r3, #10
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	4945      	ldr	r1, [pc, #276]	@ (8005064 <_scanf_i+0x1e0>)
 8004f50:	6960      	ldr	r0, [r4, #20]
 8004f52:	1ac9      	subs	r1, r1, r3
 8004f54:	f000 f888 	bl	8005068 <__sccl>
 8004f58:	f04f 0b00 	mov.w	fp, #0
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03d      	beq.n	8004fe0 <_scanf_i+0x15c>
 8004f64:	6831      	ldr	r1, [r6, #0]
 8004f66:	6960      	ldr	r0, [r4, #20]
 8004f68:	f891 c000 	ldrb.w	ip, [r1]
 8004f6c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d035      	beq.n	8004fe0 <_scanf_i+0x15c>
 8004f74:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004f78:	d124      	bne.n	8004fc4 <_scanf_i+0x140>
 8004f7a:	0510      	lsls	r0, r2, #20
 8004f7c:	d522      	bpl.n	8004fc4 <_scanf_i+0x140>
 8004f7e:	f10b 0b01 	add.w	fp, fp, #1
 8004f82:	f1b9 0f00 	cmp.w	r9, #0
 8004f86:	d003      	beq.n	8004f90 <_scanf_i+0x10c>
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8004f8e:	60a3      	str	r3, [r4, #8]
 8004f90:	6873      	ldr	r3, [r6, #4]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	6073      	str	r3, [r6, #4]
 8004f98:	dd1b      	ble.n	8004fd2 <_scanf_i+0x14e>
 8004f9a:	6833      	ldr	r3, [r6, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	6033      	str	r3, [r6, #0]
 8004fa0:	68a3      	ldr	r3, [r4, #8]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	60a3      	str	r3, [r4, #8]
 8004fa6:	e7d9      	b.n	8004f5c <_scanf_i+0xd8>
 8004fa8:	f1bb 0f02 	cmp.w	fp, #2
 8004fac:	d1ae      	bne.n	8004f0c <_scanf_i+0x88>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8004fb4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004fb8:	d1bf      	bne.n	8004f3a <_scanf_i+0xb6>
 8004fba:	2110      	movs	r1, #16
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fc0:	6061      	str	r1, [r4, #4]
 8004fc2:	e7a2      	b.n	8004f0a <_scanf_i+0x86>
 8004fc4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004fc8:	6022      	str	r2, [r4, #0]
 8004fca:	780b      	ldrb	r3, [r1, #0]
 8004fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8004fd0:	e7de      	b.n	8004f90 <_scanf_i+0x10c>
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4650      	mov	r0, sl
 8004fd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fda:	4798      	blx	r3
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0df      	beq.n	8004fa0 <_scanf_i+0x11c>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	05d9      	lsls	r1, r3, #23
 8004fe4:	d50d      	bpl.n	8005002 <_scanf_i+0x17e>
 8004fe6:	42bd      	cmp	r5, r7
 8004fe8:	d909      	bls.n	8004ffe <_scanf_i+0x17a>
 8004fea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004fee:	4632      	mov	r2, r6
 8004ff0:	4650      	mov	r0, sl
 8004ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ff6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8004ffa:	4798      	blx	r3
 8004ffc:	464d      	mov	r5, r9
 8004ffe:	42bd      	cmp	r5, r7
 8005000:	d028      	beq.n	8005054 <_scanf_i+0x1d0>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	f012 0210 	ands.w	r2, r2, #16
 8005008:	d113      	bne.n	8005032 <_scanf_i+0x1ae>
 800500a:	702a      	strb	r2, [r5, #0]
 800500c:	4639      	mov	r1, r7
 800500e:	6863      	ldr	r3, [r4, #4]
 8005010:	4650      	mov	r0, sl
 8005012:	9e01      	ldr	r6, [sp, #4]
 8005014:	47b0      	blx	r6
 8005016:	f8d8 3000 	ldr.w	r3, [r8]
 800501a:	6821      	ldr	r1, [r4, #0]
 800501c:	1d1a      	adds	r2, r3, #4
 800501e:	f8c8 2000 	str.w	r2, [r8]
 8005022:	f011 0f20 	tst.w	r1, #32
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	d00f      	beq.n	800504a <_scanf_i+0x1c6>
 800502a:	6018      	str	r0, [r3, #0]
 800502c:	68e3      	ldr	r3, [r4, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60e3      	str	r3, [r4, #12]
 8005032:	2000      	movs	r0, #0
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	1bed      	subs	r5, r5, r7
 8005038:	445d      	add	r5, fp
 800503a:	442b      	add	r3, r5
 800503c:	6123      	str	r3, [r4, #16]
 800503e:	b007      	add	sp, #28
 8005040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005044:	f04f 0b00 	mov.w	fp, #0
 8005048:	e7ca      	b.n	8004fe0 <_scanf_i+0x15c>
 800504a:	07ca      	lsls	r2, r1, #31
 800504c:	bf4c      	ite	mi
 800504e:	8018      	strhmi	r0, [r3, #0]
 8005050:	6018      	strpl	r0, [r3, #0]
 8005052:	e7eb      	b.n	800502c <_scanf_i+0x1a8>
 8005054:	2001      	movs	r0, #1
 8005056:	e7f2      	b.n	800503e <_scanf_i+0x1ba>
 8005058:	080067c8 	.word	0x080067c8
 800505c:	08005d51 	.word	0x08005d51
 8005060:	08005e31 	.word	0x08005e31
 8005064:	080069ee 	.word	0x080069ee

08005068 <__sccl>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	780b      	ldrb	r3, [r1, #0]
 800506c:	4604      	mov	r4, r0
 800506e:	2b5e      	cmp	r3, #94	@ 0x5e
 8005070:	bf0b      	itete	eq
 8005072:	784b      	ldrbeq	r3, [r1, #1]
 8005074:	1c4a      	addne	r2, r1, #1
 8005076:	1c8a      	addeq	r2, r1, #2
 8005078:	2100      	movne	r1, #0
 800507a:	bf08      	it	eq
 800507c:	2101      	moveq	r1, #1
 800507e:	3801      	subs	r0, #1
 8005080:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005084:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005088:	42a8      	cmp	r0, r5
 800508a:	d1fb      	bne.n	8005084 <__sccl+0x1c>
 800508c:	b90b      	cbnz	r3, 8005092 <__sccl+0x2a>
 800508e:	1e50      	subs	r0, r2, #1
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	f081 0101 	eor.w	r1, r1, #1
 8005096:	4610      	mov	r0, r2
 8005098:	54e1      	strb	r1, [r4, r3]
 800509a:	4602      	mov	r2, r0
 800509c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050a0:	2d2d      	cmp	r5, #45	@ 0x2d
 80050a2:	d005      	beq.n	80050b0 <__sccl+0x48>
 80050a4:	2d5d      	cmp	r5, #93	@ 0x5d
 80050a6:	d016      	beq.n	80050d6 <__sccl+0x6e>
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	d0f1      	beq.n	8005090 <__sccl+0x28>
 80050ac:	462b      	mov	r3, r5
 80050ae:	e7f2      	b.n	8005096 <__sccl+0x2e>
 80050b0:	7846      	ldrb	r6, [r0, #1]
 80050b2:	2e5d      	cmp	r6, #93	@ 0x5d
 80050b4:	d0fa      	beq.n	80050ac <__sccl+0x44>
 80050b6:	42b3      	cmp	r3, r6
 80050b8:	dcf8      	bgt.n	80050ac <__sccl+0x44>
 80050ba:	461a      	mov	r2, r3
 80050bc:	3002      	adds	r0, #2
 80050be:	3201      	adds	r2, #1
 80050c0:	4296      	cmp	r6, r2
 80050c2:	54a1      	strb	r1, [r4, r2]
 80050c4:	dcfb      	bgt.n	80050be <__sccl+0x56>
 80050c6:	1af2      	subs	r2, r6, r3
 80050c8:	3a01      	subs	r2, #1
 80050ca:	42b3      	cmp	r3, r6
 80050cc:	bfa8      	it	ge
 80050ce:	2200      	movge	r2, #0
 80050d0:	1c5d      	adds	r5, r3, #1
 80050d2:	18ab      	adds	r3, r5, r2
 80050d4:	e7e1      	b.n	800509a <__sccl+0x32>
 80050d6:	4610      	mov	r0, r2
 80050d8:	e7da      	b.n	8005090 <__sccl+0x28>
	...

080050dc <__sflush_r>:
 80050dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	0716      	lsls	r6, r2, #28
 80050e4:	4605      	mov	r5, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	d454      	bmi.n	8005194 <__sflush_r+0xb8>
 80050ea:	684b      	ldr	r3, [r1, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	dc02      	bgt.n	80050f6 <__sflush_r+0x1a>
 80050f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	dd48      	ble.n	8005188 <__sflush_r+0xac>
 80050f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	d045      	beq.n	8005188 <__sflush_r+0xac>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005102:	682f      	ldr	r7, [r5, #0]
 8005104:	6a21      	ldr	r1, [r4, #32]
 8005106:	602b      	str	r3, [r5, #0]
 8005108:	d030      	beq.n	800516c <__sflush_r+0x90>
 800510a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	0759      	lsls	r1, r3, #29
 8005110:	d505      	bpl.n	800511e <__sflush_r+0x42>
 8005112:	6863      	ldr	r3, [r4, #4]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005118:	b10b      	cbz	r3, 800511e <__sflush_r+0x42>
 800511a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800511c:	1ad2      	subs	r2, r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	4628      	mov	r0, r5
 8005122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005124:	6a21      	ldr	r1, [r4, #32]
 8005126:	47b0      	blx	r6
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	d106      	bne.n	800513c <__sflush_r+0x60>
 800512e:	6829      	ldr	r1, [r5, #0]
 8005130:	291d      	cmp	r1, #29
 8005132:	d82b      	bhi.n	800518c <__sflush_r+0xb0>
 8005134:	4a28      	ldr	r2, [pc, #160]	@ (80051d8 <__sflush_r+0xfc>)
 8005136:	410a      	asrs	r2, r1
 8005138:	07d6      	lsls	r6, r2, #31
 800513a:	d427      	bmi.n	800518c <__sflush_r+0xb0>
 800513c:	2200      	movs	r2, #0
 800513e:	6062      	str	r2, [r4, #4]
 8005140:	6922      	ldr	r2, [r4, #16]
 8005142:	04d9      	lsls	r1, r3, #19
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	d504      	bpl.n	8005152 <__sflush_r+0x76>
 8005148:	1c42      	adds	r2, r0, #1
 800514a:	d101      	bne.n	8005150 <__sflush_r+0x74>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b903      	cbnz	r3, 8005152 <__sflush_r+0x76>
 8005150:	6560      	str	r0, [r4, #84]	@ 0x54
 8005152:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005154:	602f      	str	r7, [r5, #0]
 8005156:	b1b9      	cbz	r1, 8005188 <__sflush_r+0xac>
 8005158:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800515c:	4299      	cmp	r1, r3
 800515e:	d002      	beq.n	8005166 <__sflush_r+0x8a>
 8005160:	4628      	mov	r0, r5
 8005162:	f7ff f835 	bl	80041d0 <_free_r>
 8005166:	2300      	movs	r3, #0
 8005168:	6363      	str	r3, [r4, #52]	@ 0x34
 800516a:	e00d      	b.n	8005188 <__sflush_r+0xac>
 800516c:	2301      	movs	r3, #1
 800516e:	4628      	mov	r0, r5
 8005170:	47b0      	blx	r6
 8005172:	4602      	mov	r2, r0
 8005174:	1c50      	adds	r0, r2, #1
 8005176:	d1c9      	bne.n	800510c <__sflush_r+0x30>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0c6      	beq.n	800510c <__sflush_r+0x30>
 800517e:	2b1d      	cmp	r3, #29
 8005180:	d001      	beq.n	8005186 <__sflush_r+0xaa>
 8005182:	2b16      	cmp	r3, #22
 8005184:	d11d      	bne.n	80051c2 <__sflush_r+0xe6>
 8005186:	602f      	str	r7, [r5, #0]
 8005188:	2000      	movs	r0, #0
 800518a:	e021      	b.n	80051d0 <__sflush_r+0xf4>
 800518c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005190:	b21b      	sxth	r3, r3
 8005192:	e01a      	b.n	80051ca <__sflush_r+0xee>
 8005194:	690f      	ldr	r7, [r1, #16]
 8005196:	2f00      	cmp	r7, #0
 8005198:	d0f6      	beq.n	8005188 <__sflush_r+0xac>
 800519a:	0793      	lsls	r3, r2, #30
 800519c:	bf18      	it	ne
 800519e:	2300      	movne	r3, #0
 80051a0:	680e      	ldr	r6, [r1, #0]
 80051a2:	bf08      	it	eq
 80051a4:	694b      	ldreq	r3, [r1, #20]
 80051a6:	1bf6      	subs	r6, r6, r7
 80051a8:	600f      	str	r7, [r1, #0]
 80051aa:	608b      	str	r3, [r1, #8]
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	ddeb      	ble.n	8005188 <__sflush_r+0xac>
 80051b0:	4633      	mov	r3, r6
 80051b2:	463a      	mov	r2, r7
 80051b4:	4628      	mov	r0, r5
 80051b6:	6a21      	ldr	r1, [r4, #32]
 80051b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80051bc:	47e0      	blx	ip
 80051be:	2800      	cmp	r0, #0
 80051c0:	dc07      	bgt.n	80051d2 <__sflush_r+0xf6>
 80051c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d2:	4407      	add	r7, r0
 80051d4:	1a36      	subs	r6, r6, r0
 80051d6:	e7e9      	b.n	80051ac <__sflush_r+0xd0>
 80051d8:	dfbffffe 	.word	0xdfbffffe

080051dc <_fflush_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	690b      	ldr	r3, [r1, #16]
 80051e0:	4605      	mov	r5, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	b913      	cbnz	r3, 80051ec <_fflush_r+0x10>
 80051e6:	2500      	movs	r5, #0
 80051e8:	4628      	mov	r0, r5
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	b118      	cbz	r0, 80051f6 <_fflush_r+0x1a>
 80051ee:	6a03      	ldr	r3, [r0, #32]
 80051f0:	b90b      	cbnz	r3, 80051f6 <_fflush_r+0x1a>
 80051f2:	f7fe f90d 	bl	8003410 <__sinit>
 80051f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f3      	beq.n	80051e6 <_fflush_r+0xa>
 80051fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005200:	07d0      	lsls	r0, r2, #31
 8005202:	d404      	bmi.n	800520e <_fflush_r+0x32>
 8005204:	0599      	lsls	r1, r3, #22
 8005206:	d402      	bmi.n	800520e <_fflush_r+0x32>
 8005208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800520a:	f7fe ffca 	bl	80041a2 <__retarget_lock_acquire_recursive>
 800520e:	4628      	mov	r0, r5
 8005210:	4621      	mov	r1, r4
 8005212:	f7ff ff63 	bl	80050dc <__sflush_r>
 8005216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005218:	4605      	mov	r5, r0
 800521a:	07da      	lsls	r2, r3, #31
 800521c:	d4e4      	bmi.n	80051e8 <_fflush_r+0xc>
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	059b      	lsls	r3, r3, #22
 8005222:	d4e1      	bmi.n	80051e8 <_fflush_r+0xc>
 8005224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005226:	f7fe ffbd 	bl	80041a4 <__retarget_lock_release_recursive>
 800522a:	e7dd      	b.n	80051e8 <_fflush_r+0xc>

0800522c <__malloc_lock>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__malloc_lock+0x8>)
 800522e:	f7fe bfb8 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	2000042c 	.word	0x2000042c

08005238 <__malloc_unlock>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__malloc_unlock+0x8>)
 800523a:	f7fe bfb3 	b.w	80041a4 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	2000042c 	.word	0x2000042c

08005244 <_Balloc>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	69c6      	ldr	r6, [r0, #28]
 8005248:	4604      	mov	r4, r0
 800524a:	460d      	mov	r5, r1
 800524c:	b976      	cbnz	r6, 800526c <_Balloc+0x28>
 800524e:	2010      	movs	r0, #16
 8005250:	f000 fe4e 	bl	8005ef0 <malloc>
 8005254:	4602      	mov	r2, r0
 8005256:	61e0      	str	r0, [r4, #28]
 8005258:	b920      	cbnz	r0, 8005264 <_Balloc+0x20>
 800525a:	216b      	movs	r1, #107	@ 0x6b
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <_Balloc+0x78>)
 800525e:	4818      	ldr	r0, [pc, #96]	@ (80052c0 <_Balloc+0x7c>)
 8005260:	f000 fe14 	bl	8005e8c <__assert_func>
 8005264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005268:	6006      	str	r6, [r0, #0]
 800526a:	60c6      	str	r6, [r0, #12]
 800526c:	69e6      	ldr	r6, [r4, #28]
 800526e:	68f3      	ldr	r3, [r6, #12]
 8005270:	b183      	cbz	r3, 8005294 <_Balloc+0x50>
 8005272:	69e3      	ldr	r3, [r4, #28]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800527a:	b9b8      	cbnz	r0, 80052ac <_Balloc+0x68>
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f605 	lsl.w	r6, r1, r5
 8005282:	1d72      	adds	r2, r6, #5
 8005284:	4620      	mov	r0, r4
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	f000 fe1e 	bl	8005ec8 <_calloc_r>
 800528c:	b160      	cbz	r0, 80052a8 <_Balloc+0x64>
 800528e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005292:	e00e      	b.n	80052b2 <_Balloc+0x6e>
 8005294:	2221      	movs	r2, #33	@ 0x21
 8005296:	2104      	movs	r1, #4
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fe15 	bl	8005ec8 <_calloc_r>
 800529e:	69e3      	ldr	r3, [r4, #28]
 80052a0:	60f0      	str	r0, [r6, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e4      	bne.n	8005272 <_Balloc+0x2e>
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	6802      	ldr	r2, [r0, #0]
 80052ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052b2:	2300      	movs	r3, #0
 80052b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052b8:	e7f7      	b.n	80052aa <_Balloc+0x66>
 80052ba:	bf00      	nop
 80052bc:	080069f9 	.word	0x080069f9
 80052c0:	08006a10 	.word	0x08006a10

080052c4 <_Bfree>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	69c6      	ldr	r6, [r0, #28]
 80052c8:	4605      	mov	r5, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	b976      	cbnz	r6, 80052ec <_Bfree+0x28>
 80052ce:	2010      	movs	r0, #16
 80052d0:	f000 fe0e 	bl	8005ef0 <malloc>
 80052d4:	4602      	mov	r2, r0
 80052d6:	61e8      	str	r0, [r5, #28]
 80052d8:	b920      	cbnz	r0, 80052e4 <_Bfree+0x20>
 80052da:	218f      	movs	r1, #143	@ 0x8f
 80052dc:	4b08      	ldr	r3, [pc, #32]	@ (8005300 <_Bfree+0x3c>)
 80052de:	4809      	ldr	r0, [pc, #36]	@ (8005304 <_Bfree+0x40>)
 80052e0:	f000 fdd4 	bl	8005e8c <__assert_func>
 80052e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052e8:	6006      	str	r6, [r0, #0]
 80052ea:	60c6      	str	r6, [r0, #12]
 80052ec:	b13c      	cbz	r4, 80052fe <_Bfree+0x3a>
 80052ee:	69eb      	ldr	r3, [r5, #28]
 80052f0:	6862      	ldr	r2, [r4, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052f8:	6021      	str	r1, [r4, #0]
 80052fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	080069f9 	.word	0x080069f9
 8005304:	08006a10 	.word	0x08006a10

08005308 <__multadd>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	4607      	mov	r7, r0
 800530e:	460c      	mov	r4, r1
 8005310:	461e      	mov	r6, r3
 8005312:	2000      	movs	r0, #0
 8005314:	690d      	ldr	r5, [r1, #16]
 8005316:	f101 0c14 	add.w	ip, r1, #20
 800531a:	f8dc 3000 	ldr.w	r3, [ip]
 800531e:	3001      	adds	r0, #1
 8005320:	b299      	uxth	r1, r3
 8005322:	fb02 6101 	mla	r1, r2, r1, r6
 8005326:	0c1e      	lsrs	r6, r3, #16
 8005328:	0c0b      	lsrs	r3, r1, #16
 800532a:	fb02 3306 	mla	r3, r2, r6, r3
 800532e:	b289      	uxth	r1, r1
 8005330:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005334:	4285      	cmp	r5, r0
 8005336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800533a:	f84c 1b04 	str.w	r1, [ip], #4
 800533e:	dcec      	bgt.n	800531a <__multadd+0x12>
 8005340:	b30e      	cbz	r6, 8005386 <__multadd+0x7e>
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	42ab      	cmp	r3, r5
 8005346:	dc19      	bgt.n	800537c <__multadd+0x74>
 8005348:	6861      	ldr	r1, [r4, #4]
 800534a:	4638      	mov	r0, r7
 800534c:	3101      	adds	r1, #1
 800534e:	f7ff ff79 	bl	8005244 <_Balloc>
 8005352:	4680      	mov	r8, r0
 8005354:	b928      	cbnz	r0, 8005362 <__multadd+0x5a>
 8005356:	4602      	mov	r2, r0
 8005358:	21ba      	movs	r1, #186	@ 0xba
 800535a:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <__multadd+0x84>)
 800535c:	480c      	ldr	r0, [pc, #48]	@ (8005390 <__multadd+0x88>)
 800535e:	f000 fd95 	bl	8005e8c <__assert_func>
 8005362:	6922      	ldr	r2, [r4, #16]
 8005364:	f104 010c 	add.w	r1, r4, #12
 8005368:	3202      	adds	r2, #2
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	300c      	adds	r0, #12
 800536e:	f7fe ff1a 	bl	80041a6 <memcpy>
 8005372:	4621      	mov	r1, r4
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ffa5 	bl	80052c4 <_Bfree>
 800537a:	4644      	mov	r4, r8
 800537c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005380:	3501      	adds	r5, #1
 8005382:	615e      	str	r6, [r3, #20]
 8005384:	6125      	str	r5, [r4, #16]
 8005386:	4620      	mov	r0, r4
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	08006969 	.word	0x08006969
 8005390:	08006a10 	.word	0x08006a10

08005394 <__s2b>:
 8005394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005398:	4615      	mov	r5, r2
 800539a:	2209      	movs	r2, #9
 800539c:	461f      	mov	r7, r3
 800539e:	3308      	adds	r3, #8
 80053a0:	460c      	mov	r4, r1
 80053a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053a6:	4606      	mov	r6, r0
 80053a8:	2201      	movs	r2, #1
 80053aa:	2100      	movs	r1, #0
 80053ac:	429a      	cmp	r2, r3
 80053ae:	db09      	blt.n	80053c4 <__s2b+0x30>
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7ff ff47 	bl	8005244 <_Balloc>
 80053b6:	b940      	cbnz	r0, 80053ca <__s2b+0x36>
 80053b8:	4602      	mov	r2, r0
 80053ba:	21d3      	movs	r1, #211	@ 0xd3
 80053bc:	4b18      	ldr	r3, [pc, #96]	@ (8005420 <__s2b+0x8c>)
 80053be:	4819      	ldr	r0, [pc, #100]	@ (8005424 <__s2b+0x90>)
 80053c0:	f000 fd64 	bl	8005e8c <__assert_func>
 80053c4:	0052      	lsls	r2, r2, #1
 80053c6:	3101      	adds	r1, #1
 80053c8:	e7f0      	b.n	80053ac <__s2b+0x18>
 80053ca:	9b08      	ldr	r3, [sp, #32]
 80053cc:	2d09      	cmp	r5, #9
 80053ce:	6143      	str	r3, [r0, #20]
 80053d0:	f04f 0301 	mov.w	r3, #1
 80053d4:	6103      	str	r3, [r0, #16]
 80053d6:	dd16      	ble.n	8005406 <__s2b+0x72>
 80053d8:	f104 0909 	add.w	r9, r4, #9
 80053dc:	46c8      	mov	r8, r9
 80053de:	442c      	add	r4, r5
 80053e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80053e4:	4601      	mov	r1, r0
 80053e6:	220a      	movs	r2, #10
 80053e8:	4630      	mov	r0, r6
 80053ea:	3b30      	subs	r3, #48	@ 0x30
 80053ec:	f7ff ff8c 	bl	8005308 <__multadd>
 80053f0:	45a0      	cmp	r8, r4
 80053f2:	d1f5      	bne.n	80053e0 <__s2b+0x4c>
 80053f4:	f1a5 0408 	sub.w	r4, r5, #8
 80053f8:	444c      	add	r4, r9
 80053fa:	1b2d      	subs	r5, r5, r4
 80053fc:	1963      	adds	r3, r4, r5
 80053fe:	42bb      	cmp	r3, r7
 8005400:	db04      	blt.n	800540c <__s2b+0x78>
 8005402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005406:	2509      	movs	r5, #9
 8005408:	340a      	adds	r4, #10
 800540a:	e7f6      	b.n	80053fa <__s2b+0x66>
 800540c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005410:	4601      	mov	r1, r0
 8005412:	220a      	movs	r2, #10
 8005414:	4630      	mov	r0, r6
 8005416:	3b30      	subs	r3, #48	@ 0x30
 8005418:	f7ff ff76 	bl	8005308 <__multadd>
 800541c:	e7ee      	b.n	80053fc <__s2b+0x68>
 800541e:	bf00      	nop
 8005420:	08006969 	.word	0x08006969
 8005424:	08006a10 	.word	0x08006a10

08005428 <__hi0bits>:
 8005428:	4603      	mov	r3, r0
 800542a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800542e:	bf3a      	itte	cc
 8005430:	0403      	lslcc	r3, r0, #16
 8005432:	2010      	movcc	r0, #16
 8005434:	2000      	movcs	r0, #0
 8005436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543a:	bf3c      	itt	cc
 800543c:	021b      	lslcc	r3, r3, #8
 800543e:	3008      	addcc	r0, #8
 8005440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005444:	bf3c      	itt	cc
 8005446:	011b      	lslcc	r3, r3, #4
 8005448:	3004      	addcc	r0, #4
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544e:	bf3c      	itt	cc
 8005450:	009b      	lslcc	r3, r3, #2
 8005452:	3002      	addcc	r0, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	db05      	blt.n	8005464 <__hi0bits+0x3c>
 8005458:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800545c:	f100 0001 	add.w	r0, r0, #1
 8005460:	bf08      	it	eq
 8005462:	2020      	moveq	r0, #32
 8005464:	4770      	bx	lr

08005466 <__lo0bits>:
 8005466:	6803      	ldr	r3, [r0, #0]
 8005468:	4602      	mov	r2, r0
 800546a:	f013 0007 	ands.w	r0, r3, #7
 800546e:	d00b      	beq.n	8005488 <__lo0bits+0x22>
 8005470:	07d9      	lsls	r1, r3, #31
 8005472:	d421      	bmi.n	80054b8 <__lo0bits+0x52>
 8005474:	0798      	lsls	r0, r3, #30
 8005476:	bf49      	itett	mi
 8005478:	085b      	lsrmi	r3, r3, #1
 800547a:	089b      	lsrpl	r3, r3, #2
 800547c:	2001      	movmi	r0, #1
 800547e:	6013      	strmi	r3, [r2, #0]
 8005480:	bf5c      	itt	pl
 8005482:	2002      	movpl	r0, #2
 8005484:	6013      	strpl	r3, [r2, #0]
 8005486:	4770      	bx	lr
 8005488:	b299      	uxth	r1, r3
 800548a:	b909      	cbnz	r1, 8005490 <__lo0bits+0x2a>
 800548c:	2010      	movs	r0, #16
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	b2d9      	uxtb	r1, r3
 8005492:	b909      	cbnz	r1, 8005498 <__lo0bits+0x32>
 8005494:	3008      	adds	r0, #8
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	0719      	lsls	r1, r3, #28
 800549a:	bf04      	itt	eq
 800549c:	091b      	lsreq	r3, r3, #4
 800549e:	3004      	addeq	r0, #4
 80054a0:	0799      	lsls	r1, r3, #30
 80054a2:	bf04      	itt	eq
 80054a4:	089b      	lsreq	r3, r3, #2
 80054a6:	3002      	addeq	r0, #2
 80054a8:	07d9      	lsls	r1, r3, #31
 80054aa:	d403      	bmi.n	80054b4 <__lo0bits+0x4e>
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	f100 0001 	add.w	r0, r0, #1
 80054b2:	d003      	beq.n	80054bc <__lo0bits+0x56>
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4770      	bx	lr
 80054b8:	2000      	movs	r0, #0
 80054ba:	4770      	bx	lr
 80054bc:	2020      	movs	r0, #32
 80054be:	4770      	bx	lr

080054c0 <__i2b>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	460c      	mov	r4, r1
 80054c4:	2101      	movs	r1, #1
 80054c6:	f7ff febd 	bl	8005244 <_Balloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	b928      	cbnz	r0, 80054da <__i2b+0x1a>
 80054ce:	f240 1145 	movw	r1, #325	@ 0x145
 80054d2:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <__i2b+0x24>)
 80054d4:	4804      	ldr	r0, [pc, #16]	@ (80054e8 <__i2b+0x28>)
 80054d6:	f000 fcd9 	bl	8005e8c <__assert_func>
 80054da:	2301      	movs	r3, #1
 80054dc:	6144      	str	r4, [r0, #20]
 80054de:	6103      	str	r3, [r0, #16]
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	bf00      	nop
 80054e4:	08006969 	.word	0x08006969
 80054e8:	08006a10 	.word	0x08006a10

080054ec <__multiply>:
 80054ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	4614      	mov	r4, r2
 80054f2:	690a      	ldr	r2, [r1, #16]
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	460f      	mov	r7, r1
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bfa2      	ittt	ge
 80054fc:	4623      	movge	r3, r4
 80054fe:	460c      	movge	r4, r1
 8005500:	461f      	movge	r7, r3
 8005502:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005506:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	6861      	ldr	r1, [r4, #4]
 800550e:	eb0a 0609 	add.w	r6, sl, r9
 8005512:	42b3      	cmp	r3, r6
 8005514:	b085      	sub	sp, #20
 8005516:	bfb8      	it	lt
 8005518:	3101      	addlt	r1, #1
 800551a:	f7ff fe93 	bl	8005244 <_Balloc>
 800551e:	b930      	cbnz	r0, 800552e <__multiply+0x42>
 8005520:	4602      	mov	r2, r0
 8005522:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005526:	4b43      	ldr	r3, [pc, #268]	@ (8005634 <__multiply+0x148>)
 8005528:	4843      	ldr	r0, [pc, #268]	@ (8005638 <__multiply+0x14c>)
 800552a:	f000 fcaf 	bl	8005e8c <__assert_func>
 800552e:	f100 0514 	add.w	r5, r0, #20
 8005532:	462b      	mov	r3, r5
 8005534:	2200      	movs	r2, #0
 8005536:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800553a:	4543      	cmp	r3, r8
 800553c:	d321      	bcc.n	8005582 <__multiply+0x96>
 800553e:	f107 0114 	add.w	r1, r7, #20
 8005542:	f104 0214 	add.w	r2, r4, #20
 8005546:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800554a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800554e:	9302      	str	r3, [sp, #8]
 8005550:	1b13      	subs	r3, r2, r4
 8005552:	3b15      	subs	r3, #21
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	3304      	adds	r3, #4
 800555a:	f104 0715 	add.w	r7, r4, #21
 800555e:	42ba      	cmp	r2, r7
 8005560:	bf38      	it	cc
 8005562:	2304      	movcc	r3, #4
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	9b02      	ldr	r3, [sp, #8]
 8005568:	9103      	str	r1, [sp, #12]
 800556a:	428b      	cmp	r3, r1
 800556c:	d80c      	bhi.n	8005588 <__multiply+0x9c>
 800556e:	2e00      	cmp	r6, #0
 8005570:	dd03      	ble.n	800557a <__multiply+0x8e>
 8005572:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005576:	2b00      	cmp	r3, #0
 8005578:	d05a      	beq.n	8005630 <__multiply+0x144>
 800557a:	6106      	str	r6, [r0, #16]
 800557c:	b005      	add	sp, #20
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	f843 2b04 	str.w	r2, [r3], #4
 8005586:	e7d8      	b.n	800553a <__multiply+0x4e>
 8005588:	f8b1 a000 	ldrh.w	sl, [r1]
 800558c:	f1ba 0f00 	cmp.w	sl, #0
 8005590:	d023      	beq.n	80055da <__multiply+0xee>
 8005592:	46a9      	mov	r9, r5
 8005594:	f04f 0c00 	mov.w	ip, #0
 8005598:	f104 0e14 	add.w	lr, r4, #20
 800559c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80055a0:	f8d9 3000 	ldr.w	r3, [r9]
 80055a4:	fa1f fb87 	uxth.w	fp, r7
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	fb0a 330b 	mla	r3, sl, fp, r3
 80055ae:	4463      	add	r3, ip
 80055b0:	f8d9 c000 	ldr.w	ip, [r9]
 80055b4:	0c3f      	lsrs	r7, r7, #16
 80055b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055ba:	fb0a c707 	mla	r7, sl, r7, ip
 80055be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055c8:	4572      	cmp	r2, lr
 80055ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055ce:	f849 3b04 	str.w	r3, [r9], #4
 80055d2:	d8e3      	bhi.n	800559c <__multiply+0xb0>
 80055d4:	9b01      	ldr	r3, [sp, #4]
 80055d6:	f845 c003 	str.w	ip, [r5, r3]
 80055da:	9b03      	ldr	r3, [sp, #12]
 80055dc:	3104      	adds	r1, #4
 80055de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	d021      	beq.n	800562c <__multiply+0x140>
 80055e8:	46ae      	mov	lr, r5
 80055ea:	f04f 0a00 	mov.w	sl, #0
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	f104 0c14 	add.w	ip, r4, #20
 80055f4:	f8bc b000 	ldrh.w	fp, [ip]
 80055f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	fb09 770b 	mla	r7, r9, fp, r7
 8005602:	4457      	add	r7, sl
 8005604:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005608:	f84e 3b04 	str.w	r3, [lr], #4
 800560c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005614:	f8be 3000 	ldrh.w	r3, [lr]
 8005618:	4562      	cmp	r2, ip
 800561a:	fb09 330a 	mla	r3, r9, sl, r3
 800561e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005626:	d8e5      	bhi.n	80055f4 <__multiply+0x108>
 8005628:	9f01      	ldr	r7, [sp, #4]
 800562a:	51eb      	str	r3, [r5, r7]
 800562c:	3504      	adds	r5, #4
 800562e:	e79a      	b.n	8005566 <__multiply+0x7a>
 8005630:	3e01      	subs	r6, #1
 8005632:	e79c      	b.n	800556e <__multiply+0x82>
 8005634:	08006969 	.word	0x08006969
 8005638:	08006a10 	.word	0x08006a10

0800563c <__pow5mult>:
 800563c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005640:	4615      	mov	r5, r2
 8005642:	f012 0203 	ands.w	r2, r2, #3
 8005646:	4607      	mov	r7, r0
 8005648:	460e      	mov	r6, r1
 800564a:	d007      	beq.n	800565c <__pow5mult+0x20>
 800564c:	4c25      	ldr	r4, [pc, #148]	@ (80056e4 <__pow5mult+0xa8>)
 800564e:	3a01      	subs	r2, #1
 8005650:	2300      	movs	r3, #0
 8005652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005656:	f7ff fe57 	bl	8005308 <__multadd>
 800565a:	4606      	mov	r6, r0
 800565c:	10ad      	asrs	r5, r5, #2
 800565e:	d03d      	beq.n	80056dc <__pow5mult+0xa0>
 8005660:	69fc      	ldr	r4, [r7, #28]
 8005662:	b97c      	cbnz	r4, 8005684 <__pow5mult+0x48>
 8005664:	2010      	movs	r0, #16
 8005666:	f000 fc43 	bl	8005ef0 <malloc>
 800566a:	4602      	mov	r2, r0
 800566c:	61f8      	str	r0, [r7, #28]
 800566e:	b928      	cbnz	r0, 800567c <__pow5mult+0x40>
 8005670:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005674:	4b1c      	ldr	r3, [pc, #112]	@ (80056e8 <__pow5mult+0xac>)
 8005676:	481d      	ldr	r0, [pc, #116]	@ (80056ec <__pow5mult+0xb0>)
 8005678:	f000 fc08 	bl	8005e8c <__assert_func>
 800567c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005680:	6004      	str	r4, [r0, #0]
 8005682:	60c4      	str	r4, [r0, #12]
 8005684:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800568c:	b94c      	cbnz	r4, 80056a2 <__pow5mult+0x66>
 800568e:	f240 2171 	movw	r1, #625	@ 0x271
 8005692:	4638      	mov	r0, r7
 8005694:	f7ff ff14 	bl	80054c0 <__i2b>
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	f8c8 0008 	str.w	r0, [r8, #8]
 80056a0:	6003      	str	r3, [r0, #0]
 80056a2:	f04f 0900 	mov.w	r9, #0
 80056a6:	07eb      	lsls	r3, r5, #31
 80056a8:	d50a      	bpl.n	80056c0 <__pow5mult+0x84>
 80056aa:	4631      	mov	r1, r6
 80056ac:	4622      	mov	r2, r4
 80056ae:	4638      	mov	r0, r7
 80056b0:	f7ff ff1c 	bl	80054ec <__multiply>
 80056b4:	4680      	mov	r8, r0
 80056b6:	4631      	mov	r1, r6
 80056b8:	4638      	mov	r0, r7
 80056ba:	f7ff fe03 	bl	80052c4 <_Bfree>
 80056be:	4646      	mov	r6, r8
 80056c0:	106d      	asrs	r5, r5, #1
 80056c2:	d00b      	beq.n	80056dc <__pow5mult+0xa0>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	b938      	cbnz	r0, 80056d8 <__pow5mult+0x9c>
 80056c8:	4622      	mov	r2, r4
 80056ca:	4621      	mov	r1, r4
 80056cc:	4638      	mov	r0, r7
 80056ce:	f7ff ff0d 	bl	80054ec <__multiply>
 80056d2:	6020      	str	r0, [r4, #0]
 80056d4:	f8c0 9000 	str.w	r9, [r0]
 80056d8:	4604      	mov	r4, r0
 80056da:	e7e4      	b.n	80056a6 <__pow5mult+0x6a>
 80056dc:	4630      	mov	r0, r6
 80056de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e2:	bf00      	nop
 80056e4:	08006a6c 	.word	0x08006a6c
 80056e8:	080069f9 	.word	0x080069f9
 80056ec:	08006a10 	.word	0x08006a10

080056f0 <__lshift>:
 80056f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f4:	460c      	mov	r4, r1
 80056f6:	4607      	mov	r7, r0
 80056f8:	4691      	mov	r9, r2
 80056fa:	6923      	ldr	r3, [r4, #16]
 80056fc:	6849      	ldr	r1, [r1, #4]
 80056fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005708:	f108 0601 	add.w	r6, r8, #1
 800570c:	42b3      	cmp	r3, r6
 800570e:	db0b      	blt.n	8005728 <__lshift+0x38>
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff fd97 	bl	8005244 <_Balloc>
 8005716:	4605      	mov	r5, r0
 8005718:	b948      	cbnz	r0, 800572e <__lshift+0x3e>
 800571a:	4602      	mov	r2, r0
 800571c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005720:	4b27      	ldr	r3, [pc, #156]	@ (80057c0 <__lshift+0xd0>)
 8005722:	4828      	ldr	r0, [pc, #160]	@ (80057c4 <__lshift+0xd4>)
 8005724:	f000 fbb2 	bl	8005e8c <__assert_func>
 8005728:	3101      	adds	r1, #1
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	e7ee      	b.n	800570c <__lshift+0x1c>
 800572e:	2300      	movs	r3, #0
 8005730:	f100 0114 	add.w	r1, r0, #20
 8005734:	f100 0210 	add.w	r2, r0, #16
 8005738:	4618      	mov	r0, r3
 800573a:	4553      	cmp	r3, sl
 800573c:	db33      	blt.n	80057a6 <__lshift+0xb6>
 800573e:	6920      	ldr	r0, [r4, #16]
 8005740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005744:	f104 0314 	add.w	r3, r4, #20
 8005748:	f019 091f 	ands.w	r9, r9, #31
 800574c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005754:	d02b      	beq.n	80057ae <__lshift+0xbe>
 8005756:	468a      	mov	sl, r1
 8005758:	2200      	movs	r2, #0
 800575a:	f1c9 0e20 	rsb	lr, r9, #32
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	fa00 f009 	lsl.w	r0, r0, r9
 8005764:	4310      	orrs	r0, r2
 8005766:	f84a 0b04 	str.w	r0, [sl], #4
 800576a:	f853 2b04 	ldr.w	r2, [r3], #4
 800576e:	459c      	cmp	ip, r3
 8005770:	fa22 f20e 	lsr.w	r2, r2, lr
 8005774:	d8f3      	bhi.n	800575e <__lshift+0x6e>
 8005776:	ebac 0304 	sub.w	r3, ip, r4
 800577a:	3b15      	subs	r3, #21
 800577c:	f023 0303 	bic.w	r3, r3, #3
 8005780:	3304      	adds	r3, #4
 8005782:	f104 0015 	add.w	r0, r4, #21
 8005786:	4584      	cmp	ip, r0
 8005788:	bf38      	it	cc
 800578a:	2304      	movcc	r3, #4
 800578c:	50ca      	str	r2, [r1, r3]
 800578e:	b10a      	cbz	r2, 8005794 <__lshift+0xa4>
 8005790:	f108 0602 	add.w	r6, r8, #2
 8005794:	3e01      	subs	r6, #1
 8005796:	4638      	mov	r0, r7
 8005798:	4621      	mov	r1, r4
 800579a:	612e      	str	r6, [r5, #16]
 800579c:	f7ff fd92 	bl	80052c4 <_Bfree>
 80057a0:	4628      	mov	r0, r5
 80057a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80057aa:	3301      	adds	r3, #1
 80057ac:	e7c5      	b.n	800573a <__lshift+0x4a>
 80057ae:	3904      	subs	r1, #4
 80057b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b4:	459c      	cmp	ip, r3
 80057b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80057ba:	d8f9      	bhi.n	80057b0 <__lshift+0xc0>
 80057bc:	e7ea      	b.n	8005794 <__lshift+0xa4>
 80057be:	bf00      	nop
 80057c0:	08006969 	.word	0x08006969
 80057c4:	08006a10 	.word	0x08006a10

080057c8 <__mcmp>:
 80057c8:	4603      	mov	r3, r0
 80057ca:	690a      	ldr	r2, [r1, #16]
 80057cc:	6900      	ldr	r0, [r0, #16]
 80057ce:	b530      	push	{r4, r5, lr}
 80057d0:	1a80      	subs	r0, r0, r2
 80057d2:	d10e      	bne.n	80057f2 <__mcmp+0x2a>
 80057d4:	3314      	adds	r3, #20
 80057d6:	3114      	adds	r1, #20
 80057d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80057dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80057e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057e8:	4295      	cmp	r5, r2
 80057ea:	d003      	beq.n	80057f4 <__mcmp+0x2c>
 80057ec:	d205      	bcs.n	80057fa <__mcmp+0x32>
 80057ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057f2:	bd30      	pop	{r4, r5, pc}
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d3f3      	bcc.n	80057e0 <__mcmp+0x18>
 80057f8:	e7fb      	b.n	80057f2 <__mcmp+0x2a>
 80057fa:	2001      	movs	r0, #1
 80057fc:	e7f9      	b.n	80057f2 <__mcmp+0x2a>
	...

08005800 <__mdiff>:
 8005800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	4689      	mov	r9, r1
 8005806:	4606      	mov	r6, r0
 8005808:	4611      	mov	r1, r2
 800580a:	4648      	mov	r0, r9
 800580c:	4614      	mov	r4, r2
 800580e:	f7ff ffdb 	bl	80057c8 <__mcmp>
 8005812:	1e05      	subs	r5, r0, #0
 8005814:	d112      	bne.n	800583c <__mdiff+0x3c>
 8005816:	4629      	mov	r1, r5
 8005818:	4630      	mov	r0, r6
 800581a:	f7ff fd13 	bl	8005244 <_Balloc>
 800581e:	4602      	mov	r2, r0
 8005820:	b928      	cbnz	r0, 800582e <__mdiff+0x2e>
 8005822:	f240 2137 	movw	r1, #567	@ 0x237
 8005826:	4b3e      	ldr	r3, [pc, #248]	@ (8005920 <__mdiff+0x120>)
 8005828:	483e      	ldr	r0, [pc, #248]	@ (8005924 <__mdiff+0x124>)
 800582a:	f000 fb2f 	bl	8005e8c <__assert_func>
 800582e:	2301      	movs	r3, #1
 8005830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005834:	4610      	mov	r0, r2
 8005836:	b003      	add	sp, #12
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	bfbc      	itt	lt
 800583e:	464b      	movlt	r3, r9
 8005840:	46a1      	movlt	r9, r4
 8005842:	4630      	mov	r0, r6
 8005844:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005848:	bfba      	itte	lt
 800584a:	461c      	movlt	r4, r3
 800584c:	2501      	movlt	r5, #1
 800584e:	2500      	movge	r5, #0
 8005850:	f7ff fcf8 	bl	8005244 <_Balloc>
 8005854:	4602      	mov	r2, r0
 8005856:	b918      	cbnz	r0, 8005860 <__mdiff+0x60>
 8005858:	f240 2145 	movw	r1, #581	@ 0x245
 800585c:	4b30      	ldr	r3, [pc, #192]	@ (8005920 <__mdiff+0x120>)
 800585e:	e7e3      	b.n	8005828 <__mdiff+0x28>
 8005860:	f100 0b14 	add.w	fp, r0, #20
 8005864:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005868:	f109 0310 	add.w	r3, r9, #16
 800586c:	60c5      	str	r5, [r0, #12]
 800586e:	f04f 0c00 	mov.w	ip, #0
 8005872:	f109 0514 	add.w	r5, r9, #20
 8005876:	46d9      	mov	r9, fp
 8005878:	6926      	ldr	r6, [r4, #16]
 800587a:	f104 0e14 	add.w	lr, r4, #20
 800587e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005882:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	9b01      	ldr	r3, [sp, #4]
 800588a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800588e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005892:	b281      	uxth	r1, r0
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	fa1f f38a 	uxth.w	r3, sl
 800589a:	1a5b      	subs	r3, r3, r1
 800589c:	0c00      	lsrs	r0, r0, #16
 800589e:	4463      	add	r3, ip
 80058a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80058a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058ae:	4576      	cmp	r6, lr
 80058b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058b4:	f849 3b04 	str.w	r3, [r9], #4
 80058b8:	d8e6      	bhi.n	8005888 <__mdiff+0x88>
 80058ba:	1b33      	subs	r3, r6, r4
 80058bc:	3b15      	subs	r3, #21
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	3415      	adds	r4, #21
 80058c4:	3304      	adds	r3, #4
 80058c6:	42a6      	cmp	r6, r4
 80058c8:	bf38      	it	cc
 80058ca:	2304      	movcc	r3, #4
 80058cc:	441d      	add	r5, r3
 80058ce:	445b      	add	r3, fp
 80058d0:	461e      	mov	r6, r3
 80058d2:	462c      	mov	r4, r5
 80058d4:	4544      	cmp	r4, r8
 80058d6:	d30e      	bcc.n	80058f6 <__mdiff+0xf6>
 80058d8:	f108 0103 	add.w	r1, r8, #3
 80058dc:	1b49      	subs	r1, r1, r5
 80058de:	f021 0103 	bic.w	r1, r1, #3
 80058e2:	3d03      	subs	r5, #3
 80058e4:	45a8      	cmp	r8, r5
 80058e6:	bf38      	it	cc
 80058e8:	2100      	movcc	r1, #0
 80058ea:	440b      	add	r3, r1
 80058ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058f0:	b199      	cbz	r1, 800591a <__mdiff+0x11a>
 80058f2:	6117      	str	r7, [r2, #16]
 80058f4:	e79e      	b.n	8005834 <__mdiff+0x34>
 80058f6:	46e6      	mov	lr, ip
 80058f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80058fc:	fa1f fc81 	uxth.w	ip, r1
 8005900:	44f4      	add	ip, lr
 8005902:	0c08      	lsrs	r0, r1, #16
 8005904:	4471      	add	r1, lr
 8005906:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800590a:	b289      	uxth	r1, r1
 800590c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005910:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005914:	f846 1b04 	str.w	r1, [r6], #4
 8005918:	e7dc      	b.n	80058d4 <__mdiff+0xd4>
 800591a:	3f01      	subs	r7, #1
 800591c:	e7e6      	b.n	80058ec <__mdiff+0xec>
 800591e:	bf00      	nop
 8005920:	08006969 	.word	0x08006969
 8005924:	08006a10 	.word	0x08006a10

08005928 <__ulp>:
 8005928:	4b0e      	ldr	r3, [pc, #56]	@ (8005964 <__ulp+0x3c>)
 800592a:	400b      	ands	r3, r1
 800592c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005930:	2b00      	cmp	r3, #0
 8005932:	dc08      	bgt.n	8005946 <__ulp+0x1e>
 8005934:	425b      	negs	r3, r3
 8005936:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800593a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800593e:	da04      	bge.n	800594a <__ulp+0x22>
 8005940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005944:	4113      	asrs	r3, r2
 8005946:	2200      	movs	r2, #0
 8005948:	e008      	b.n	800595c <__ulp+0x34>
 800594a:	f1a2 0314 	sub.w	r3, r2, #20
 800594e:	2b1e      	cmp	r3, #30
 8005950:	bfd6      	itet	le
 8005952:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005956:	2201      	movgt	r2, #1
 8005958:	40da      	lsrle	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	7ff00000 	.word	0x7ff00000

08005968 <__b2d>:
 8005968:	6902      	ldr	r2, [r0, #16]
 800596a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596c:	f100 0614 	add.w	r6, r0, #20
 8005970:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005974:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005978:	4f1e      	ldr	r7, [pc, #120]	@ (80059f4 <__b2d+0x8c>)
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fd54 	bl	8005428 <__hi0bits>
 8005980:	4603      	mov	r3, r0
 8005982:	f1c0 0020 	rsb	r0, r0, #32
 8005986:	2b0a      	cmp	r3, #10
 8005988:	f1a2 0504 	sub.w	r5, r2, #4
 800598c:	6008      	str	r0, [r1, #0]
 800598e:	dc12      	bgt.n	80059b6 <__b2d+0x4e>
 8005990:	42ae      	cmp	r6, r5
 8005992:	bf2c      	ite	cs
 8005994:	2200      	movcs	r2, #0
 8005996:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800599a:	f1c3 0c0b 	rsb	ip, r3, #11
 800599e:	3315      	adds	r3, #21
 80059a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80059a4:	fa04 f303 	lsl.w	r3, r4, r3
 80059a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80059ac:	ea4e 0107 	orr.w	r1, lr, r7
 80059b0:	431a      	orrs	r2, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b6:	42ae      	cmp	r6, r5
 80059b8:	bf36      	itet	cc
 80059ba:	f1a2 0508 	subcc.w	r5, r2, #8
 80059be:	2200      	movcs	r2, #0
 80059c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80059c4:	3b0b      	subs	r3, #11
 80059c6:	d012      	beq.n	80059ee <__b2d+0x86>
 80059c8:	f1c3 0720 	rsb	r7, r3, #32
 80059cc:	fa22 f107 	lsr.w	r1, r2, r7
 80059d0:	409c      	lsls	r4, r3
 80059d2:	430c      	orrs	r4, r1
 80059d4:	42b5      	cmp	r5, r6
 80059d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80059da:	bf94      	ite	ls
 80059dc:	2400      	movls	r4, #0
 80059de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80059e2:	409a      	lsls	r2, r3
 80059e4:	40fc      	lsrs	r4, r7
 80059e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80059ea:	4322      	orrs	r2, r4
 80059ec:	e7e1      	b.n	80059b2 <__b2d+0x4a>
 80059ee:	ea44 0107 	orr.w	r1, r4, r7
 80059f2:	e7de      	b.n	80059b2 <__b2d+0x4a>
 80059f4:	3ff00000 	.word	0x3ff00000

080059f8 <__d2b>:
 80059f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80059fc:	2101      	movs	r1, #1
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	9e08      	ldr	r6, [sp, #32]
 8005a04:	f7ff fc1e 	bl	8005244 <_Balloc>
 8005a08:	4604      	mov	r4, r0
 8005a0a:	b930      	cbnz	r0, 8005a1a <__d2b+0x22>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <__d2b+0xa8>)
 8005a14:	4823      	ldr	r0, [pc, #140]	@ (8005aa4 <__d2b+0xac>)
 8005a16:	f000 fa39 	bl	8005e8c <__assert_func>
 8005a1a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a22:	b10d      	cbz	r5, 8005a28 <__d2b+0x30>
 8005a24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	f1b8 0300 	subs.w	r3, r8, #0
 8005a2e:	d024      	beq.n	8005a7a <__d2b+0x82>
 8005a30:	4668      	mov	r0, sp
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	f7ff fd17 	bl	8005466 <__lo0bits>
 8005a38:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a3c:	b1d8      	cbz	r0, 8005a76 <__d2b+0x7e>
 8005a3e:	f1c0 0320 	rsb	r3, r0, #32
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	430b      	orrs	r3, r1
 8005a48:	40c2      	lsrs	r2, r0
 8005a4a:	6163      	str	r3, [r4, #20]
 8005a4c:	9201      	str	r2, [sp, #4]
 8005a4e:	9b01      	ldr	r3, [sp, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bf0c      	ite	eq
 8005a54:	2201      	moveq	r2, #1
 8005a56:	2202      	movne	r2, #2
 8005a58:	61a3      	str	r3, [r4, #24]
 8005a5a:	6122      	str	r2, [r4, #16]
 8005a5c:	b1ad      	cbz	r5, 8005a8a <__d2b+0x92>
 8005a5e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a62:	4405      	add	r5, r0
 8005a64:	6035      	str	r5, [r6, #0]
 8005a66:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a6c:	6018      	str	r0, [r3, #0]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	b002      	add	sp, #8
 8005a72:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a76:	6161      	str	r1, [r4, #20]
 8005a78:	e7e9      	b.n	8005a4e <__d2b+0x56>
 8005a7a:	a801      	add	r0, sp, #4
 8005a7c:	f7ff fcf3 	bl	8005466 <__lo0bits>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	6163      	str	r3, [r4, #20]
 8005a86:	3020      	adds	r0, #32
 8005a88:	e7e7      	b.n	8005a5a <__d2b+0x62>
 8005a8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005a8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a92:	6030      	str	r0, [r6, #0]
 8005a94:	6918      	ldr	r0, [r3, #16]
 8005a96:	f7ff fcc7 	bl	8005428 <__hi0bits>
 8005a9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a9e:	e7e4      	b.n	8005a6a <__d2b+0x72>
 8005aa0:	08006969 	.word	0x08006969
 8005aa4:	08006a10 	.word	0x08006a10

08005aa8 <__ratio>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	b085      	sub	sp, #20
 8005aae:	e9cd 1000 	strd	r1, r0, [sp]
 8005ab2:	a902      	add	r1, sp, #8
 8005ab4:	f7ff ff58 	bl	8005968 <__b2d>
 8005ab8:	468b      	mov	fp, r1
 8005aba:	4606      	mov	r6, r0
 8005abc:	460f      	mov	r7, r1
 8005abe:	9800      	ldr	r0, [sp, #0]
 8005ac0:	a903      	add	r1, sp, #12
 8005ac2:	f7ff ff51 	bl	8005968 <__b2d>
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	9b01      	ldr	r3, [sp, #4]
 8005aca:	4689      	mov	r9, r1
 8005acc:	6919      	ldr	r1, [r3, #16]
 8005ace:	9b00      	ldr	r3, [sp, #0]
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	1ac9      	subs	r1, r1, r3
 8005ad8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfcd      	iteet	gt
 8005ae6:	463a      	movgt	r2, r7
 8005ae8:	462a      	movle	r2, r5
 8005aea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005aee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005af2:	bfd8      	it	le
 8005af4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005af8:	464b      	mov	r3, r9
 8005afa:	4622      	mov	r2, r4
 8005afc:	4659      	mov	r1, fp
 8005afe:	f7fa fec9 	bl	8000894 <__aeabi_ddiv>
 8005b02:	b005      	add	sp, #20
 8005b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b08 <__copybits>:
 8005b08:	3901      	subs	r1, #1
 8005b0a:	b570      	push	{r4, r5, r6, lr}
 8005b0c:	1149      	asrs	r1, r1, #5
 8005b0e:	6914      	ldr	r4, [r2, #16]
 8005b10:	3101      	adds	r1, #1
 8005b12:	f102 0314 	add.w	r3, r2, #20
 8005b16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b1e:	1f05      	subs	r5, r0, #4
 8005b20:	42a3      	cmp	r3, r4
 8005b22:	d30c      	bcc.n	8005b3e <__copybits+0x36>
 8005b24:	1aa3      	subs	r3, r4, r2
 8005b26:	3b11      	subs	r3, #17
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	3211      	adds	r2, #17
 8005b2e:	42a2      	cmp	r2, r4
 8005b30:	bf88      	it	hi
 8005b32:	2300      	movhi	r3, #0
 8005b34:	4418      	add	r0, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	4288      	cmp	r0, r1
 8005b3a:	d305      	bcc.n	8005b48 <__copybits+0x40>
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b42:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b46:	e7eb      	b.n	8005b20 <__copybits+0x18>
 8005b48:	f840 3b04 	str.w	r3, [r0], #4
 8005b4c:	e7f4      	b.n	8005b38 <__copybits+0x30>

08005b4e <__any_on>:
 8005b4e:	f100 0214 	add.w	r2, r0, #20
 8005b52:	6900      	ldr	r0, [r0, #16]
 8005b54:	114b      	asrs	r3, r1, #5
 8005b56:	4298      	cmp	r0, r3
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	db11      	blt.n	8005b80 <__any_on+0x32>
 8005b5c:	dd0a      	ble.n	8005b74 <__any_on+0x26>
 8005b5e:	f011 011f 	ands.w	r1, r1, #31
 8005b62:	d007      	beq.n	8005b74 <__any_on+0x26>
 8005b64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b68:	fa24 f001 	lsr.w	r0, r4, r1
 8005b6c:	fa00 f101 	lsl.w	r1, r0, r1
 8005b70:	428c      	cmp	r4, r1
 8005b72:	d10b      	bne.n	8005b8c <__any_on+0x3e>
 8005b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d803      	bhi.n	8005b84 <__any_on+0x36>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	4603      	mov	r3, r0
 8005b82:	e7f7      	b.n	8005b74 <__any_on+0x26>
 8005b84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d0f5      	beq.n	8005b78 <__any_on+0x2a>
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e7f6      	b.n	8005b7e <__any_on+0x30>

08005b90 <__submore>:
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	460c      	mov	r4, r1
 8005b96:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b9c:	4299      	cmp	r1, r3
 8005b9e:	d11b      	bne.n	8005bd8 <__submore+0x48>
 8005ba0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ba4:	f7ff f882 	bl	8004cac <_malloc_r>
 8005ba8:	b918      	cbnz	r0, 8005bb2 <__submore+0x22>
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bb6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005bb8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005bbc:	6360      	str	r0, [r4, #52]	@ 0x34
 8005bbe:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005bc2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005bc6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005bca:	7043      	strb	r3, [r0, #1]
 8005bcc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005bd0:	7003      	strb	r3, [r0, #0]
 8005bd2:	6020      	str	r0, [r4, #0]
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e7ea      	b.n	8005bae <__submore+0x1e>
 8005bd8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005bda:	0077      	lsls	r7, r6, #1
 8005bdc:	463a      	mov	r2, r7
 8005bde:	f000 f80f 	bl	8005c00 <_realloc_r>
 8005be2:	4605      	mov	r5, r0
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0e0      	beq.n	8005baa <__submore+0x1a>
 8005be8:	eb00 0806 	add.w	r8, r0, r6
 8005bec:	4601      	mov	r1, r0
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	f7fe fad8 	bl	80041a6 <memcpy>
 8005bf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005bfa:	f8c4 8000 	str.w	r8, [r4]
 8005bfe:	e7e9      	b.n	8005bd4 <__submore+0x44>

08005c00 <_realloc_r>:
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4680      	mov	r8, r0
 8005c06:	4615      	mov	r5, r2
 8005c08:	460c      	mov	r4, r1
 8005c0a:	b921      	cbnz	r1, 8005c16 <_realloc_r+0x16>
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	f7ff b84b 	b.w	8004cac <_malloc_r>
 8005c16:	b92a      	cbnz	r2, 8005c24 <_realloc_r+0x24>
 8005c18:	f7fe fada 	bl	80041d0 <_free_r>
 8005c1c:	2400      	movs	r4, #0
 8005c1e:	4620      	mov	r0, r4
 8005c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c24:	f000 f96c 	bl	8005f00 <_malloc_usable_size_r>
 8005c28:	4285      	cmp	r5, r0
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	d802      	bhi.n	8005c34 <_realloc_r+0x34>
 8005c2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c32:	d8f4      	bhi.n	8005c1e <_realloc_r+0x1e>
 8005c34:	4629      	mov	r1, r5
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff f838 	bl	8004cac <_malloc_r>
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d0ec      	beq.n	8005c1c <_realloc_r+0x1c>
 8005c42:	42b5      	cmp	r5, r6
 8005c44:	462a      	mov	r2, r5
 8005c46:	4621      	mov	r1, r4
 8005c48:	bf28      	it	cs
 8005c4a:	4632      	movcs	r2, r6
 8005c4c:	f7fe faab 	bl	80041a6 <memcpy>
 8005c50:	4621      	mov	r1, r4
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7fe fabc 	bl	80041d0 <_free_r>
 8005c58:	463c      	mov	r4, r7
 8005c5a:	e7e0      	b.n	8005c1e <_realloc_r+0x1e>

08005c5c <_strtol_l.constprop.0>:
 8005c5c:	2b24      	cmp	r3, #36	@ 0x24
 8005c5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c62:	4686      	mov	lr, r0
 8005c64:	4690      	mov	r8, r2
 8005c66:	d801      	bhi.n	8005c6c <_strtol_l.constprop.0+0x10>
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <_strtol_l.constprop.0+0x1e>
 8005c6c:	f7fe fa6e 	bl	800414c <__errno>
 8005c70:	2316      	movs	r3, #22
 8005c72:	6003      	str	r3, [r0, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	4833      	ldr	r0, [pc, #204]	@ (8005d4c <_strtol_l.constprop.0+0xf0>)
 8005c7e:	462a      	mov	r2, r5
 8005c80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c84:	5d06      	ldrb	r6, [r0, r4]
 8005c86:	f016 0608 	ands.w	r6, r6, #8
 8005c8a:	d1f8      	bne.n	8005c7e <_strtol_l.constprop.0+0x22>
 8005c8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c8e:	d12d      	bne.n	8005cec <_strtol_l.constprop.0+0x90>
 8005c90:	2601      	movs	r6, #1
 8005c92:	782c      	ldrb	r4, [r5, #0]
 8005c94:	1c95      	adds	r5, r2, #2
 8005c96:	f033 0210 	bics.w	r2, r3, #16
 8005c9a:	d109      	bne.n	8005cb0 <_strtol_l.constprop.0+0x54>
 8005c9c:	2c30      	cmp	r4, #48	@ 0x30
 8005c9e:	d12a      	bne.n	8005cf6 <_strtol_l.constprop.0+0x9a>
 8005ca0:	782a      	ldrb	r2, [r5, #0]
 8005ca2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ca6:	2a58      	cmp	r2, #88	@ 0x58
 8005ca8:	d125      	bne.n	8005cf6 <_strtol_l.constprop.0+0x9a>
 8005caa:	2310      	movs	r3, #16
 8005cac:	786c      	ldrb	r4, [r5, #1]
 8005cae:	3502      	adds	r5, #2
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005cb6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005cba:	fbbc f9f3 	udiv	r9, ip, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005cc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005cc8:	2f09      	cmp	r7, #9
 8005cca:	d81b      	bhi.n	8005d04 <_strtol_l.constprop.0+0xa8>
 8005ccc:	463c      	mov	r4, r7
 8005cce:	42a3      	cmp	r3, r4
 8005cd0:	dd27      	ble.n	8005d22 <_strtol_l.constprop.0+0xc6>
 8005cd2:	1c57      	adds	r7, r2, #1
 8005cd4:	d007      	beq.n	8005ce6 <_strtol_l.constprop.0+0x8a>
 8005cd6:	4581      	cmp	r9, r0
 8005cd8:	d320      	bcc.n	8005d1c <_strtol_l.constprop.0+0xc0>
 8005cda:	d101      	bne.n	8005ce0 <_strtol_l.constprop.0+0x84>
 8005cdc:	45a2      	cmp	sl, r4
 8005cde:	db1d      	blt.n	8005d1c <_strtol_l.constprop.0+0xc0>
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	fb00 4003 	mla	r0, r0, r3, r4
 8005ce6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cea:	e7eb      	b.n	8005cc4 <_strtol_l.constprop.0+0x68>
 8005cec:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cee:	bf04      	itt	eq
 8005cf0:	782c      	ldrbeq	r4, [r5, #0]
 8005cf2:	1c95      	addeq	r5, r2, #2
 8005cf4:	e7cf      	b.n	8005c96 <_strtol_l.constprop.0+0x3a>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1da      	bne.n	8005cb0 <_strtol_l.constprop.0+0x54>
 8005cfa:	2c30      	cmp	r4, #48	@ 0x30
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2308      	moveq	r3, #8
 8005d00:	230a      	movne	r3, #10
 8005d02:	e7d5      	b.n	8005cb0 <_strtol_l.constprop.0+0x54>
 8005d04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005d08:	2f19      	cmp	r7, #25
 8005d0a:	d801      	bhi.n	8005d10 <_strtol_l.constprop.0+0xb4>
 8005d0c:	3c37      	subs	r4, #55	@ 0x37
 8005d0e:	e7de      	b.n	8005cce <_strtol_l.constprop.0+0x72>
 8005d10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005d14:	2f19      	cmp	r7, #25
 8005d16:	d804      	bhi.n	8005d22 <_strtol_l.constprop.0+0xc6>
 8005d18:	3c57      	subs	r4, #87	@ 0x57
 8005d1a:	e7d8      	b.n	8005cce <_strtol_l.constprop.0+0x72>
 8005d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d20:	e7e1      	b.n	8005ce6 <_strtol_l.constprop.0+0x8a>
 8005d22:	1c53      	adds	r3, r2, #1
 8005d24:	d108      	bne.n	8005d38 <_strtol_l.constprop.0+0xdc>
 8005d26:	2322      	movs	r3, #34	@ 0x22
 8005d28:	4660      	mov	r0, ip
 8005d2a:	f8ce 3000 	str.w	r3, [lr]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	d0a0      	beq.n	8005c76 <_strtol_l.constprop.0+0x1a>
 8005d34:	1e69      	subs	r1, r5, #1
 8005d36:	e006      	b.n	8005d46 <_strtol_l.constprop.0+0xea>
 8005d38:	b106      	cbz	r6, 8005d3c <_strtol_l.constprop.0+0xe0>
 8005d3a:	4240      	negs	r0, r0
 8005d3c:	f1b8 0f00 	cmp.w	r8, #0
 8005d40:	d099      	beq.n	8005c76 <_strtol_l.constprop.0+0x1a>
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d1f6      	bne.n	8005d34 <_strtol_l.constprop.0+0xd8>
 8005d46:	f8c8 1000 	str.w	r1, [r8]
 8005d4a:	e794      	b.n	8005c76 <_strtol_l.constprop.0+0x1a>
 8005d4c:	08006869 	.word	0x08006869

08005d50 <_strtol_r>:
 8005d50:	f7ff bf84 	b.w	8005c5c <_strtol_l.constprop.0>

08005d54 <_strtoul_l.constprop.0>:
 8005d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d58:	4686      	mov	lr, r0
 8005d5a:	460d      	mov	r5, r1
 8005d5c:	4e33      	ldr	r6, [pc, #204]	@ (8005e2c <_strtoul_l.constprop.0+0xd8>)
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d64:	5d37      	ldrb	r7, [r6, r4]
 8005d66:	f017 0708 	ands.w	r7, r7, #8
 8005d6a:	d1f8      	bne.n	8005d5e <_strtoul_l.constprop.0+0xa>
 8005d6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005d6e:	d12f      	bne.n	8005dd0 <_strtoul_l.constprop.0+0x7c>
 8005d70:	2701      	movs	r7, #1
 8005d72:	782c      	ldrb	r4, [r5, #0]
 8005d74:	1c85      	adds	r5, r0, #2
 8005d76:	f033 0010 	bics.w	r0, r3, #16
 8005d7a:	d109      	bne.n	8005d90 <_strtoul_l.constprop.0+0x3c>
 8005d7c:	2c30      	cmp	r4, #48	@ 0x30
 8005d7e:	d12c      	bne.n	8005dda <_strtoul_l.constprop.0+0x86>
 8005d80:	7828      	ldrb	r0, [r5, #0]
 8005d82:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005d86:	2858      	cmp	r0, #88	@ 0x58
 8005d88:	d127      	bne.n	8005dda <_strtoul_l.constprop.0+0x86>
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	786c      	ldrb	r4, [r5, #1]
 8005d8e:	3502      	adds	r5, #2
 8005d90:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8005d94:	fbb8 f8f3 	udiv	r8, r8, r3
 8005d98:	2600      	movs	r6, #0
 8005d9a:	fb03 f908 	mul.w	r9, r3, r8
 8005d9e:	4630      	mov	r0, r6
 8005da0:	ea6f 0909 	mvn.w	r9, r9
 8005da4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005da8:	f1bc 0f09 	cmp.w	ip, #9
 8005dac:	d81c      	bhi.n	8005de8 <_strtoul_l.constprop.0+0x94>
 8005dae:	4664      	mov	r4, ip
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	dd2a      	ble.n	8005e0a <_strtoul_l.constprop.0+0xb6>
 8005db4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8005db8:	d007      	beq.n	8005dca <_strtoul_l.constprop.0+0x76>
 8005dba:	4580      	cmp	r8, r0
 8005dbc:	d322      	bcc.n	8005e04 <_strtoul_l.constprop.0+0xb0>
 8005dbe:	d101      	bne.n	8005dc4 <_strtoul_l.constprop.0+0x70>
 8005dc0:	45a1      	cmp	r9, r4
 8005dc2:	db1f      	blt.n	8005e04 <_strtoul_l.constprop.0+0xb0>
 8005dc4:	2601      	movs	r6, #1
 8005dc6:	fb00 4003 	mla	r0, r0, r3, r4
 8005dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dce:	e7e9      	b.n	8005da4 <_strtoul_l.constprop.0+0x50>
 8005dd0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005dd2:	bf04      	itt	eq
 8005dd4:	782c      	ldrbeq	r4, [r5, #0]
 8005dd6:	1c85      	addeq	r5, r0, #2
 8005dd8:	e7cd      	b.n	8005d76 <_strtoul_l.constprop.0+0x22>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1d8      	bne.n	8005d90 <_strtoul_l.constprop.0+0x3c>
 8005dde:	2c30      	cmp	r4, #48	@ 0x30
 8005de0:	bf0c      	ite	eq
 8005de2:	2308      	moveq	r3, #8
 8005de4:	230a      	movne	r3, #10
 8005de6:	e7d3      	b.n	8005d90 <_strtoul_l.constprop.0+0x3c>
 8005de8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005dec:	f1bc 0f19 	cmp.w	ip, #25
 8005df0:	d801      	bhi.n	8005df6 <_strtoul_l.constprop.0+0xa2>
 8005df2:	3c37      	subs	r4, #55	@ 0x37
 8005df4:	e7dc      	b.n	8005db0 <_strtoul_l.constprop.0+0x5c>
 8005df6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005dfa:	f1bc 0f19 	cmp.w	ip, #25
 8005dfe:	d804      	bhi.n	8005e0a <_strtoul_l.constprop.0+0xb6>
 8005e00:	3c57      	subs	r4, #87	@ 0x57
 8005e02:	e7d5      	b.n	8005db0 <_strtoul_l.constprop.0+0x5c>
 8005e04:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8005e08:	e7df      	b.n	8005dca <_strtoul_l.constprop.0+0x76>
 8005e0a:	1c73      	adds	r3, r6, #1
 8005e0c:	d106      	bne.n	8005e1c <_strtoul_l.constprop.0+0xc8>
 8005e0e:	2322      	movs	r3, #34	@ 0x22
 8005e10:	4630      	mov	r0, r6
 8005e12:	f8ce 3000 	str.w	r3, [lr]
 8005e16:	b932      	cbnz	r2, 8005e26 <_strtoul_l.constprop.0+0xd2>
 8005e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e1c:	b107      	cbz	r7, 8005e20 <_strtoul_l.constprop.0+0xcc>
 8005e1e:	4240      	negs	r0, r0
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d0f9      	beq.n	8005e18 <_strtoul_l.constprop.0+0xc4>
 8005e24:	b106      	cbz	r6, 8005e28 <_strtoul_l.constprop.0+0xd4>
 8005e26:	1e69      	subs	r1, r5, #1
 8005e28:	6011      	str	r1, [r2, #0]
 8005e2a:	e7f5      	b.n	8005e18 <_strtoul_l.constprop.0+0xc4>
 8005e2c:	08006869 	.word	0x08006869

08005e30 <_strtoul_r>:
 8005e30:	f7ff bf90 	b.w	8005d54 <_strtoul_l.constprop.0>

08005e34 <__ascii_wctomb>:
 8005e34:	4603      	mov	r3, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	b141      	cbz	r1, 8005e4c <__ascii_wctomb+0x18>
 8005e3a:	2aff      	cmp	r2, #255	@ 0xff
 8005e3c:	d904      	bls.n	8005e48 <__ascii_wctomb+0x14>
 8005e3e:	228a      	movs	r2, #138	@ 0x8a
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	4770      	bx	lr
 8005e48:	2001      	movs	r0, #1
 8005e4a:	700a      	strb	r2, [r1, #0]
 8005e4c:	4770      	bx	lr
	...

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	2300      	movs	r3, #0
 8005e54:	4d05      	ldr	r5, [pc, #20]	@ (8005e6c <_sbrk_r+0x1c>)
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb fc28 	bl	80016b0 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20000428 	.word	0x20000428

08005e70 <memchr>:
 8005e70:	4603      	mov	r3, r0
 8005e72:	b510      	push	{r4, lr}
 8005e74:	b2c9      	uxtb	r1, r1
 8005e76:	4402      	add	r2, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	d101      	bne.n	8005e82 <memchr+0x12>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e003      	b.n	8005e8a <memchr+0x1a>
 8005e82:	7804      	ldrb	r4, [r0, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	428c      	cmp	r4, r1
 8005e88:	d1f6      	bne.n	8005e78 <memchr+0x8>
 8005e8a:	bd10      	pop	{r4, pc}

08005e8c <__assert_func>:
 8005e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e8e:	4614      	mov	r4, r2
 8005e90:	461a      	mov	r2, r3
 8005e92:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <__assert_func+0x2c>)
 8005e94:	4605      	mov	r5, r0
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68d8      	ldr	r0, [r3, #12]
 8005e9a:	b954      	cbnz	r4, 8005eb2 <__assert_func+0x26>
 8005e9c:	4b07      	ldr	r3, [pc, #28]	@ (8005ebc <__assert_func+0x30>)
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ea4:	9100      	str	r1, [sp, #0]
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	4905      	ldr	r1, [pc, #20]	@ (8005ec0 <__assert_func+0x34>)
 8005eaa:	f000 f831 	bl	8005f10 <fiprintf>
 8005eae:	f000 f841 	bl	8005f34 <abort>
 8005eb2:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <__assert_func+0x38>)
 8005eb4:	e7f4      	b.n	8005ea0 <__assert_func+0x14>
 8005eb6:	bf00      	nop
 8005eb8:	20000184 	.word	0x20000184
 8005ebc:	08006ba3 	.word	0x08006ba3
 8005ec0:	08006b75 	.word	0x08006b75
 8005ec4:	08006b68 	.word	0x08006b68

08005ec8 <_calloc_r>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	fba1 5402 	umull	r5, r4, r1, r2
 8005ece:	b93c      	cbnz	r4, 8005ee0 <_calloc_r+0x18>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fe feeb 	bl	8004cac <_malloc_r>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	b928      	cbnz	r0, 8005ee6 <_calloc_r+0x1e>
 8005eda:	2600      	movs	r6, #0
 8005edc:	4630      	mov	r0, r6
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	220c      	movs	r2, #12
 8005ee2:	6002      	str	r2, [r0, #0]
 8005ee4:	e7f9      	b.n	8005eda <_calloc_r+0x12>
 8005ee6:	462a      	mov	r2, r5
 8005ee8:	4621      	mov	r1, r4
 8005eea:	f7fe f8e1 	bl	80040b0 <memset>
 8005eee:	e7f5      	b.n	8005edc <_calloc_r+0x14>

08005ef0 <malloc>:
 8005ef0:	4b02      	ldr	r3, [pc, #8]	@ (8005efc <malloc+0xc>)
 8005ef2:	4601      	mov	r1, r0
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	f7fe bed9 	b.w	8004cac <_malloc_r>
 8005efa:	bf00      	nop
 8005efc:	20000184 	.word	0x20000184

08005f00 <_malloc_usable_size_r>:
 8005f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f04:	1f18      	subs	r0, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bfbc      	itt	lt
 8005f0a:	580b      	ldrlt	r3, [r1, r0]
 8005f0c:	18c0      	addlt	r0, r0, r3
 8005f0e:	4770      	bx	lr

08005f10 <fiprintf>:
 8005f10:	b40e      	push	{r1, r2, r3}
 8005f12:	b503      	push	{r0, r1, lr}
 8005f14:	4601      	mov	r1, r0
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	4805      	ldr	r0, [pc, #20]	@ (8005f30 <fiprintf+0x20>)
 8005f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	f000 f835 	bl	8005f90 <_vfiprintf_r>
 8005f26:	b002      	add	sp, #8
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	b003      	add	sp, #12
 8005f2e:	4770      	bx	lr
 8005f30:	20000184 	.word	0x20000184

08005f34 <abort>:
 8005f34:	2006      	movs	r0, #6
 8005f36:	b508      	push	{r3, lr}
 8005f38:	f000 fc14 	bl	8006764 <raise>
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7fb fb42 	bl	80015c6 <_exit>

08005f42 <__sfputc_r>:
 8005f42:	6893      	ldr	r3, [r2, #8]
 8005f44:	b410      	push	{r4}
 8005f46:	3b01      	subs	r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	6093      	str	r3, [r2, #8]
 8005f4c:	da07      	bge.n	8005f5e <__sfputc_r+0x1c>
 8005f4e:	6994      	ldr	r4, [r2, #24]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	db01      	blt.n	8005f58 <__sfputc_r+0x16>
 8005f54:	290a      	cmp	r1, #10
 8005f56:	d102      	bne.n	8005f5e <__sfputc_r+0x1c>
 8005f58:	bc10      	pop	{r4}
 8005f5a:	f000 bac3 	b.w	80064e4 <__swbuf_r>
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	1c58      	adds	r0, r3, #1
 8005f62:	6010      	str	r0, [r2, #0]
 8005f64:	7019      	strb	r1, [r3, #0]
 8005f66:	4608      	mov	r0, r1
 8005f68:	bc10      	pop	{r4}
 8005f6a:	4770      	bx	lr

08005f6c <__sfputs_r>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	4606      	mov	r6, r0
 8005f70:	460f      	mov	r7, r1
 8005f72:	4614      	mov	r4, r2
 8005f74:	18d5      	adds	r5, r2, r3
 8005f76:	42ac      	cmp	r4, r5
 8005f78:	d101      	bne.n	8005f7e <__sfputs_r+0x12>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	e007      	b.n	8005f8e <__sfputs_r+0x22>
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4630      	mov	r0, r6
 8005f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f86:	f7ff ffdc 	bl	8005f42 <__sfputc_r>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d1f3      	bne.n	8005f76 <__sfputs_r+0xa>
 8005f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f90 <_vfiprintf_r>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	460d      	mov	r5, r1
 8005f96:	4614      	mov	r4, r2
 8005f98:	4698      	mov	r8, r3
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	b09d      	sub	sp, #116	@ 0x74
 8005f9e:	b118      	cbz	r0, 8005fa8 <_vfiprintf_r+0x18>
 8005fa0:	6a03      	ldr	r3, [r0, #32]
 8005fa2:	b90b      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x18>
 8005fa4:	f7fd fa34 	bl	8003410 <__sinit>
 8005fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005faa:	07d9      	lsls	r1, r3, #31
 8005fac:	d405      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fae:	89ab      	ldrh	r3, [r5, #12]
 8005fb0:	059a      	lsls	r2, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_vfiprintf_r+0x2a>
 8005fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fb6:	f7fe f8f4 	bl	80041a2 <__retarget_lock_acquire_recursive>
 8005fba:	89ab      	ldrh	r3, [r5, #12]
 8005fbc:	071b      	lsls	r3, r3, #28
 8005fbe:	d501      	bpl.n	8005fc4 <_vfiprintf_r+0x34>
 8005fc0:	692b      	ldr	r3, [r5, #16]
 8005fc2:	b99b      	cbnz	r3, 8005fec <_vfiprintf_r+0x5c>
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	f000 faca 	bl	8006560 <__swsetup_r>
 8005fcc:	b170      	cbz	r0, 8005fec <_vfiprintf_r+0x5c>
 8005fce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fd0:	07dc      	lsls	r4, r3, #31
 8005fd2:	d504      	bpl.n	8005fde <_vfiprintf_r+0x4e>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fd8:	b01d      	add	sp, #116	@ 0x74
 8005fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	0598      	lsls	r0, r3, #22
 8005fe2:	d4f7      	bmi.n	8005fd4 <_vfiprintf_r+0x44>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fe6:	f7fe f8dd 	bl	80041a4 <__retarget_lock_release_recursive>
 8005fea:	e7f3      	b.n	8005fd4 <_vfiprintf_r+0x44>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ff6:	2330      	movs	r3, #48	@ 0x30
 8005ff8:	f04f 0901 	mov.w	r9, #1
 8005ffc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006000:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80061ac <_vfiprintf_r+0x21c>
 8006004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006008:	4623      	mov	r3, r4
 800600a:	469a      	mov	sl, r3
 800600c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006010:	b10a      	cbz	r2, 8006016 <_vfiprintf_r+0x86>
 8006012:	2a25      	cmp	r2, #37	@ 0x25
 8006014:	d1f9      	bne.n	800600a <_vfiprintf_r+0x7a>
 8006016:	ebba 0b04 	subs.w	fp, sl, r4
 800601a:	d00b      	beq.n	8006034 <_vfiprintf_r+0xa4>
 800601c:	465b      	mov	r3, fp
 800601e:	4622      	mov	r2, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4630      	mov	r0, r6
 8006024:	f7ff ffa2 	bl	8005f6c <__sfputs_r>
 8006028:	3001      	adds	r0, #1
 800602a:	f000 80a7 	beq.w	800617c <_vfiprintf_r+0x1ec>
 800602e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006030:	445a      	add	r2, fp
 8006032:	9209      	str	r2, [sp, #36]	@ 0x24
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 809f 	beq.w	800617c <_vfiprintf_r+0x1ec>
 800603e:	2300      	movs	r3, #0
 8006040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006044:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006048:	f10a 0a01 	add.w	sl, sl, #1
 800604c:	9304      	str	r3, [sp, #16]
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006054:	931a      	str	r3, [sp, #104]	@ 0x68
 8006056:	4654      	mov	r4, sl
 8006058:	2205      	movs	r2, #5
 800605a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605e:	4853      	ldr	r0, [pc, #332]	@ (80061ac <_vfiprintf_r+0x21c>)
 8006060:	f7ff ff06 	bl	8005e70 <memchr>
 8006064:	9a04      	ldr	r2, [sp, #16]
 8006066:	b9d8      	cbnz	r0, 80060a0 <_vfiprintf_r+0x110>
 8006068:	06d1      	lsls	r1, r2, #27
 800606a:	bf44      	itt	mi
 800606c:	2320      	movmi	r3, #32
 800606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	bf44      	itt	mi
 8006076:	232b      	movmi	r3, #43	@ 0x2b
 8006078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800607c:	f89a 3000 	ldrb.w	r3, [sl]
 8006080:	2b2a      	cmp	r3, #42	@ 0x2a
 8006082:	d015      	beq.n	80060b0 <_vfiprintf_r+0x120>
 8006084:	4654      	mov	r4, sl
 8006086:	2000      	movs	r0, #0
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	9a07      	ldr	r2, [sp, #28]
 800608e:	4621      	mov	r1, r4
 8006090:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006094:	3b30      	subs	r3, #48	@ 0x30
 8006096:	2b09      	cmp	r3, #9
 8006098:	d94b      	bls.n	8006132 <_vfiprintf_r+0x1a2>
 800609a:	b1b0      	cbz	r0, 80060ca <_vfiprintf_r+0x13a>
 800609c:	9207      	str	r2, [sp, #28]
 800609e:	e014      	b.n	80060ca <_vfiprintf_r+0x13a>
 80060a0:	eba0 0308 	sub.w	r3, r0, r8
 80060a4:	fa09 f303 	lsl.w	r3, r9, r3
 80060a8:	4313      	orrs	r3, r2
 80060aa:	46a2      	mov	sl, r4
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	e7d2      	b.n	8006056 <_vfiprintf_r+0xc6>
 80060b0:	9b03      	ldr	r3, [sp, #12]
 80060b2:	1d19      	adds	r1, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bfbb      	ittet	lt
 80060bc:	425b      	neglt	r3, r3
 80060be:	f042 0202 	orrlt.w	r2, r2, #2
 80060c2:	9307      	strge	r3, [sp, #28]
 80060c4:	9307      	strlt	r3, [sp, #28]
 80060c6:	bfb8      	it	lt
 80060c8:	9204      	strlt	r2, [sp, #16]
 80060ca:	7823      	ldrb	r3, [r4, #0]
 80060cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ce:	d10a      	bne.n	80060e6 <_vfiprintf_r+0x156>
 80060d0:	7863      	ldrb	r3, [r4, #1]
 80060d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80060d4:	d132      	bne.n	800613c <_vfiprintf_r+0x1ac>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3402      	adds	r4, #2
 80060da:	1d1a      	adds	r2, r3, #4
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	9203      	str	r2, [sp, #12]
 80060e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060e4:	9305      	str	r3, [sp, #20]
 80060e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80061b0 <_vfiprintf_r+0x220>
 80060ea:	2203      	movs	r2, #3
 80060ec:	4650      	mov	r0, sl
 80060ee:	7821      	ldrb	r1, [r4, #0]
 80060f0:	f7ff febe 	bl	8005e70 <memchr>
 80060f4:	b138      	cbz	r0, 8006106 <_vfiprintf_r+0x176>
 80060f6:	2240      	movs	r2, #64	@ 0x40
 80060f8:	9b04      	ldr	r3, [sp, #16]
 80060fa:	eba0 000a 	sub.w	r0, r0, sl
 80060fe:	4082      	lsls	r2, r0
 8006100:	4313      	orrs	r3, r2
 8006102:	3401      	adds	r4, #1
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	2206      	movs	r2, #6
 800610c:	4829      	ldr	r0, [pc, #164]	@ (80061b4 <_vfiprintf_r+0x224>)
 800610e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006112:	f7ff fead 	bl	8005e70 <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d03f      	beq.n	800619a <_vfiprintf_r+0x20a>
 800611a:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <_vfiprintf_r+0x228>)
 800611c:	bb1b      	cbnz	r3, 8006166 <_vfiprintf_r+0x1d6>
 800611e:	9b03      	ldr	r3, [sp, #12]
 8006120:	3307      	adds	r3, #7
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	3308      	adds	r3, #8
 8006128:	9303      	str	r3, [sp, #12]
 800612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800612c:	443b      	add	r3, r7
 800612e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006130:	e76a      	b.n	8006008 <_vfiprintf_r+0x78>
 8006132:	460c      	mov	r4, r1
 8006134:	2001      	movs	r0, #1
 8006136:	fb0c 3202 	mla	r2, ip, r2, r3
 800613a:	e7a8      	b.n	800608e <_vfiprintf_r+0xfe>
 800613c:	2300      	movs	r3, #0
 800613e:	f04f 0c0a 	mov.w	ip, #10
 8006142:	4619      	mov	r1, r3
 8006144:	3401      	adds	r4, #1
 8006146:	9305      	str	r3, [sp, #20]
 8006148:	4620      	mov	r0, r4
 800614a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800614e:	3a30      	subs	r2, #48	@ 0x30
 8006150:	2a09      	cmp	r2, #9
 8006152:	d903      	bls.n	800615c <_vfiprintf_r+0x1cc>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0c6      	beq.n	80060e6 <_vfiprintf_r+0x156>
 8006158:	9105      	str	r1, [sp, #20]
 800615a:	e7c4      	b.n	80060e6 <_vfiprintf_r+0x156>
 800615c:	4604      	mov	r4, r0
 800615e:	2301      	movs	r3, #1
 8006160:	fb0c 2101 	mla	r1, ip, r1, r2
 8006164:	e7f0      	b.n	8006148 <_vfiprintf_r+0x1b8>
 8006166:	ab03      	add	r3, sp, #12
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	462a      	mov	r2, r5
 800616c:	4630      	mov	r0, r6
 800616e:	4b13      	ldr	r3, [pc, #76]	@ (80061bc <_vfiprintf_r+0x22c>)
 8006170:	a904      	add	r1, sp, #16
 8006172:	f3af 8000 	nop.w
 8006176:	4607      	mov	r7, r0
 8006178:	1c78      	adds	r0, r7, #1
 800617a:	d1d6      	bne.n	800612a <_vfiprintf_r+0x19a>
 800617c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	d405      	bmi.n	800618e <_vfiprintf_r+0x1fe>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	059a      	lsls	r2, r3, #22
 8006186:	d402      	bmi.n	800618e <_vfiprintf_r+0x1fe>
 8006188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800618a:	f7fe f80b 	bl	80041a4 <__retarget_lock_release_recursive>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	065b      	lsls	r3, r3, #25
 8006192:	f53f af1f 	bmi.w	8005fd4 <_vfiprintf_r+0x44>
 8006196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006198:	e71e      	b.n	8005fd8 <_vfiprintf_r+0x48>
 800619a:	ab03      	add	r3, sp, #12
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	462a      	mov	r2, r5
 80061a0:	4630      	mov	r0, r6
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <_vfiprintf_r+0x22c>)
 80061a4:	a904      	add	r1, sp, #16
 80061a6:	f000 f87d 	bl	80062a4 <_printf_i>
 80061aa:	e7e4      	b.n	8006176 <_vfiprintf_r+0x1e6>
 80061ac:	08006ba4 	.word	0x08006ba4
 80061b0:	080069da 	.word	0x080069da
 80061b4:	08006baa 	.word	0x08006baa
 80061b8:	00000000 	.word	0x00000000
 80061bc:	08005f6d 	.word	0x08005f6d

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	4607      	mov	r7, r0
 80061ce:	4293      	cmp	r3, r2
 80061d0:	bfb8      	it	lt
 80061d2:	4613      	movlt	r3, r2
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061da:	460c      	mov	r4, r1
 80061dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc2b      	bgt.n	8006260 <_printf_common+0xa0>
 8006208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	3b00      	subs	r3, #0
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d430      	bmi.n	800627a <_printf_common+0xba>
 8006218:	4641      	mov	r1, r8
 800621a:	4638      	mov	r0, r7
 800621c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d023      	beq.n	800626e <_printf_common+0xae>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf14      	ite	ne
 8006232:	2500      	movne	r5, #0
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	f04f 0600 	mov.w	r6, #0
 800623a:	bf08      	it	eq
 800623c:	68e5      	ldreq	r5, [r4, #12]
 800623e:	f104 041a 	add.w	r4, r4, #26
 8006242:	bf08      	it	eq
 8006244:	1aed      	subeq	r5, r5, r3
 8006246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800624a:	bf08      	it	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	4293      	cmp	r3, r2
 8006252:	bfc4      	itt	gt
 8006254:	1a9b      	subgt	r3, r3, r2
 8006256:	18ed      	addgt	r5, r5, r3
 8006258:	42b5      	cmp	r5, r6
 800625a:	d11a      	bne.n	8006292 <_printf_common+0xd2>
 800625c:	2000      	movs	r0, #0
 800625e:	e008      	b.n	8006272 <_printf_common+0xb2>
 8006260:	2301      	movs	r3, #1
 8006262:	4652      	mov	r2, sl
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d103      	bne.n	8006276 <_printf_common+0xb6>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	3501      	adds	r5, #1
 8006278:	e7c1      	b.n	80061fe <_printf_common+0x3e>
 800627a:	2030      	movs	r0, #48	@ 0x30
 800627c:	18e1      	adds	r1, r4, r3
 800627e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006288:	4422      	add	r2, r4
 800628a:	3302      	adds	r3, #2
 800628c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006290:	e7c2      	b.n	8006218 <_printf_common+0x58>
 8006292:	2301      	movs	r3, #1
 8006294:	4622      	mov	r2, r4
 8006296:	4641      	mov	r1, r8
 8006298:	4638      	mov	r0, r7
 800629a:	47c8      	blx	r9
 800629c:	3001      	adds	r0, #1
 800629e:	d0e6      	beq.n	800626e <_printf_common+0xae>
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7d9      	b.n	8006258 <_printf_common+0x98>

080062a4 <_printf_i>:
 80062a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	7e0f      	ldrb	r7, [r1, #24]
 80062aa:	4691      	mov	r9, r2
 80062ac:	2f78      	cmp	r7, #120	@ 0x78
 80062ae:	4680      	mov	r8, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	469a      	mov	sl, r3
 80062b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ba:	d807      	bhi.n	80062cc <_printf_i+0x28>
 80062bc:	2f62      	cmp	r7, #98	@ 0x62
 80062be:	d80a      	bhi.n	80062d6 <_printf_i+0x32>
 80062c0:	2f00      	cmp	r7, #0
 80062c2:	f000 80d3 	beq.w	800646c <_printf_i+0x1c8>
 80062c6:	2f58      	cmp	r7, #88	@ 0x58
 80062c8:	f000 80ba 	beq.w	8006440 <_printf_i+0x19c>
 80062cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062d4:	e03a      	b.n	800634c <_printf_i+0xa8>
 80062d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062da:	2b15      	cmp	r3, #21
 80062dc:	d8f6      	bhi.n	80062cc <_printf_i+0x28>
 80062de:	a101      	add	r1, pc, #4	@ (adr r1, 80062e4 <_printf_i+0x40>)
 80062e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e4:	0800633d 	.word	0x0800633d
 80062e8:	08006351 	.word	0x08006351
 80062ec:	080062cd 	.word	0x080062cd
 80062f0:	080062cd 	.word	0x080062cd
 80062f4:	080062cd 	.word	0x080062cd
 80062f8:	080062cd 	.word	0x080062cd
 80062fc:	08006351 	.word	0x08006351
 8006300:	080062cd 	.word	0x080062cd
 8006304:	080062cd 	.word	0x080062cd
 8006308:	080062cd 	.word	0x080062cd
 800630c:	080062cd 	.word	0x080062cd
 8006310:	08006453 	.word	0x08006453
 8006314:	0800637b 	.word	0x0800637b
 8006318:	0800640d 	.word	0x0800640d
 800631c:	080062cd 	.word	0x080062cd
 8006320:	080062cd 	.word	0x080062cd
 8006324:	08006475 	.word	0x08006475
 8006328:	080062cd 	.word	0x080062cd
 800632c:	0800637b 	.word	0x0800637b
 8006330:	080062cd 	.word	0x080062cd
 8006334:	080062cd 	.word	0x080062cd
 8006338:	08006415 	.word	0x08006415
 800633c:	6833      	ldr	r3, [r6, #0]
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6032      	str	r2, [r6, #0]
 8006344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800634c:	2301      	movs	r3, #1
 800634e:	e09e      	b.n	800648e <_printf_i+0x1ea>
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	1d19      	adds	r1, r3, #4
 8006356:	6031      	str	r1, [r6, #0]
 8006358:	0606      	lsls	r6, r0, #24
 800635a:	d501      	bpl.n	8006360 <_printf_i+0xbc>
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	e003      	b.n	8006368 <_printf_i+0xc4>
 8006360:	0645      	lsls	r5, r0, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0xb8>
 8006364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006368:	2d00      	cmp	r5, #0
 800636a:	da03      	bge.n	8006374 <_printf_i+0xd0>
 800636c:	232d      	movs	r3, #45	@ 0x2d
 800636e:	426d      	negs	r5, r5
 8006370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006374:	230a      	movs	r3, #10
 8006376:	4859      	ldr	r0, [pc, #356]	@ (80064dc <_printf_i+0x238>)
 8006378:	e011      	b.n	800639e <_printf_i+0xfa>
 800637a:	6821      	ldr	r1, [r4, #0]
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	0608      	lsls	r0, r1, #24
 8006380:	f853 5b04 	ldr.w	r5, [r3], #4
 8006384:	d402      	bmi.n	800638c <_printf_i+0xe8>
 8006386:	0649      	lsls	r1, r1, #25
 8006388:	bf48      	it	mi
 800638a:	b2ad      	uxthmi	r5, r5
 800638c:	2f6f      	cmp	r7, #111	@ 0x6f
 800638e:	6033      	str	r3, [r6, #0]
 8006390:	bf14      	ite	ne
 8006392:	230a      	movne	r3, #10
 8006394:	2308      	moveq	r3, #8
 8006396:	4851      	ldr	r0, [pc, #324]	@ (80064dc <_printf_i+0x238>)
 8006398:	2100      	movs	r1, #0
 800639a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800639e:	6866      	ldr	r6, [r4, #4]
 80063a0:	2e00      	cmp	r6, #0
 80063a2:	bfa8      	it	ge
 80063a4:	6821      	ldrge	r1, [r4, #0]
 80063a6:	60a6      	str	r6, [r4, #8]
 80063a8:	bfa4      	itt	ge
 80063aa:	f021 0104 	bicge.w	r1, r1, #4
 80063ae:	6021      	strge	r1, [r4, #0]
 80063b0:	b90d      	cbnz	r5, 80063b6 <_printf_i+0x112>
 80063b2:	2e00      	cmp	r6, #0
 80063b4:	d04b      	beq.n	800644e <_printf_i+0x1aa>
 80063b6:	4616      	mov	r6, r2
 80063b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063bc:	fb03 5711 	mls	r7, r3, r1, r5
 80063c0:	5dc7      	ldrb	r7, [r0, r7]
 80063c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063c6:	462f      	mov	r7, r5
 80063c8:	42bb      	cmp	r3, r7
 80063ca:	460d      	mov	r5, r1
 80063cc:	d9f4      	bls.n	80063b8 <_printf_i+0x114>
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d10b      	bne.n	80063ea <_printf_i+0x146>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	07df      	lsls	r7, r3, #31
 80063d6:	d508      	bpl.n	80063ea <_printf_i+0x146>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	6861      	ldr	r1, [r4, #4]
 80063dc:	4299      	cmp	r1, r3
 80063de:	bfde      	ittt	le
 80063e0:	2330      	movle	r3, #48	@ 0x30
 80063e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063e6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80063ea:	1b92      	subs	r2, r2, r6
 80063ec:	6122      	str	r2, [r4, #16]
 80063ee:	464b      	mov	r3, r9
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f8cd a000 	str.w	sl, [sp]
 80063f8:	aa03      	add	r2, sp, #12
 80063fa:	f7ff fee1 	bl	80061c0 <_printf_common>
 80063fe:	3001      	adds	r0, #1
 8006400:	d14a      	bne.n	8006498 <_printf_i+0x1f4>
 8006402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006406:	b004      	add	sp, #16
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	f043 0320 	orr.w	r3, r3, #32
 8006412:	6023      	str	r3, [r4, #0]
 8006414:	2778      	movs	r7, #120	@ 0x78
 8006416:	4832      	ldr	r0, [pc, #200]	@ (80064e0 <_printf_i+0x23c>)
 8006418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	6831      	ldr	r1, [r6, #0]
 8006420:	061f      	lsls	r7, r3, #24
 8006422:	f851 5b04 	ldr.w	r5, [r1], #4
 8006426:	d402      	bmi.n	800642e <_printf_i+0x18a>
 8006428:	065f      	lsls	r7, r3, #25
 800642a:	bf48      	it	mi
 800642c:	b2ad      	uxthmi	r5, r5
 800642e:	6031      	str	r1, [r6, #0]
 8006430:	07d9      	lsls	r1, r3, #31
 8006432:	bf44      	itt	mi
 8006434:	f043 0320 	orrmi.w	r3, r3, #32
 8006438:	6023      	strmi	r3, [r4, #0]
 800643a:	b11d      	cbz	r5, 8006444 <_printf_i+0x1a0>
 800643c:	2310      	movs	r3, #16
 800643e:	e7ab      	b.n	8006398 <_printf_i+0xf4>
 8006440:	4826      	ldr	r0, [pc, #152]	@ (80064dc <_printf_i+0x238>)
 8006442:	e7e9      	b.n	8006418 <_printf_i+0x174>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f023 0320 	bic.w	r3, r3, #32
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	e7f6      	b.n	800643c <_printf_i+0x198>
 800644e:	4616      	mov	r6, r2
 8006450:	e7bd      	b.n	80063ce <_printf_i+0x12a>
 8006452:	6833      	ldr	r3, [r6, #0]
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1d18      	adds	r0, r3, #4
 8006458:	6961      	ldr	r1, [r4, #20]
 800645a:	6030      	str	r0, [r6, #0]
 800645c:	062e      	lsls	r6, r5, #24
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	d501      	bpl.n	8006466 <_printf_i+0x1c2>
 8006462:	6019      	str	r1, [r3, #0]
 8006464:	e002      	b.n	800646c <_printf_i+0x1c8>
 8006466:	0668      	lsls	r0, r5, #25
 8006468:	d5fb      	bpl.n	8006462 <_printf_i+0x1be>
 800646a:	8019      	strh	r1, [r3, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	4616      	mov	r6, r2
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	e7bc      	b.n	80063ee <_printf_i+0x14a>
 8006474:	6833      	ldr	r3, [r6, #0]
 8006476:	2100      	movs	r1, #0
 8006478:	1d1a      	adds	r2, r3, #4
 800647a:	6032      	str	r2, [r6, #0]
 800647c:	681e      	ldr	r6, [r3, #0]
 800647e:	6862      	ldr	r2, [r4, #4]
 8006480:	4630      	mov	r0, r6
 8006482:	f7ff fcf5 	bl	8005e70 <memchr>
 8006486:	b108      	cbz	r0, 800648c <_printf_i+0x1e8>
 8006488:	1b80      	subs	r0, r0, r6
 800648a:	6060      	str	r0, [r4, #4]
 800648c:	6863      	ldr	r3, [r4, #4]
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	2300      	movs	r3, #0
 8006492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006496:	e7aa      	b.n	80063ee <_printf_i+0x14a>
 8006498:	4632      	mov	r2, r6
 800649a:	4649      	mov	r1, r9
 800649c:	4640      	mov	r0, r8
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	47d0      	blx	sl
 80064a2:	3001      	adds	r0, #1
 80064a4:	d0ad      	beq.n	8006402 <_printf_i+0x15e>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	079b      	lsls	r3, r3, #30
 80064aa:	d413      	bmi.n	80064d4 <_printf_i+0x230>
 80064ac:	68e0      	ldr	r0, [r4, #12]
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	4298      	cmp	r0, r3
 80064b2:	bfb8      	it	lt
 80064b4:	4618      	movlt	r0, r3
 80064b6:	e7a6      	b.n	8006406 <_printf_i+0x162>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4632      	mov	r2, r6
 80064bc:	4649      	mov	r1, r9
 80064be:	4640      	mov	r0, r8
 80064c0:	47d0      	blx	sl
 80064c2:	3001      	adds	r0, #1
 80064c4:	d09d      	beq.n	8006402 <_printf_i+0x15e>
 80064c6:	3501      	adds	r5, #1
 80064c8:	68e3      	ldr	r3, [r4, #12]
 80064ca:	9903      	ldr	r1, [sp, #12]
 80064cc:	1a5b      	subs	r3, r3, r1
 80064ce:	42ab      	cmp	r3, r5
 80064d0:	dcf2      	bgt.n	80064b8 <_printf_i+0x214>
 80064d2:	e7eb      	b.n	80064ac <_printf_i+0x208>
 80064d4:	2500      	movs	r5, #0
 80064d6:	f104 0619 	add.w	r6, r4, #25
 80064da:	e7f5      	b.n	80064c8 <_printf_i+0x224>
 80064dc:	08006bb1 	.word	0x08006bb1
 80064e0:	08006bc2 	.word	0x08006bc2

080064e4 <__swbuf_r>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	460e      	mov	r6, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	4605      	mov	r5, r0
 80064ec:	b118      	cbz	r0, 80064f6 <__swbuf_r+0x12>
 80064ee:	6a03      	ldr	r3, [r0, #32]
 80064f0:	b90b      	cbnz	r3, 80064f6 <__swbuf_r+0x12>
 80064f2:	f7fc ff8d 	bl	8003410 <__sinit>
 80064f6:	69a3      	ldr	r3, [r4, #24]
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	071a      	lsls	r2, r3, #28
 80064fe:	d501      	bpl.n	8006504 <__swbuf_r+0x20>
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	b943      	cbnz	r3, 8006516 <__swbuf_r+0x32>
 8006504:	4621      	mov	r1, r4
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f82a 	bl	8006560 <__swsetup_r>
 800650c:	b118      	cbz	r0, 8006516 <__swbuf_r+0x32>
 800650e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006512:	4638      	mov	r0, r7
 8006514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	6922      	ldr	r2, [r4, #16]
 800651a:	b2f6      	uxtb	r6, r6
 800651c:	1a98      	subs	r0, r3, r2
 800651e:	6963      	ldr	r3, [r4, #20]
 8006520:	4637      	mov	r7, r6
 8006522:	4283      	cmp	r3, r0
 8006524:	dc05      	bgt.n	8006532 <__swbuf_r+0x4e>
 8006526:	4621      	mov	r1, r4
 8006528:	4628      	mov	r0, r5
 800652a:	f7fe fe57 	bl	80051dc <_fflush_r>
 800652e:	2800      	cmp	r0, #0
 8006530:	d1ed      	bne.n	800650e <__swbuf_r+0x2a>
 8006532:	68a3      	ldr	r3, [r4, #8]
 8006534:	3b01      	subs	r3, #1
 8006536:	60a3      	str	r3, [r4, #8]
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	6022      	str	r2, [r4, #0]
 800653e:	701e      	strb	r6, [r3, #0]
 8006540:	6962      	ldr	r2, [r4, #20]
 8006542:	1c43      	adds	r3, r0, #1
 8006544:	429a      	cmp	r2, r3
 8006546:	d004      	beq.n	8006552 <__swbuf_r+0x6e>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	07db      	lsls	r3, r3, #31
 800654c:	d5e1      	bpl.n	8006512 <__swbuf_r+0x2e>
 800654e:	2e0a      	cmp	r6, #10
 8006550:	d1df      	bne.n	8006512 <__swbuf_r+0x2e>
 8006552:	4621      	mov	r1, r4
 8006554:	4628      	mov	r0, r5
 8006556:	f7fe fe41 	bl	80051dc <_fflush_r>
 800655a:	2800      	cmp	r0, #0
 800655c:	d0d9      	beq.n	8006512 <__swbuf_r+0x2e>
 800655e:	e7d6      	b.n	800650e <__swbuf_r+0x2a>

08006560 <__swsetup_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4b29      	ldr	r3, [pc, #164]	@ (8006608 <__swsetup_r+0xa8>)
 8006564:	4605      	mov	r5, r0
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	460c      	mov	r4, r1
 800656a:	b118      	cbz	r0, 8006574 <__swsetup_r+0x14>
 800656c:	6a03      	ldr	r3, [r0, #32]
 800656e:	b90b      	cbnz	r3, 8006574 <__swsetup_r+0x14>
 8006570:	f7fc ff4e 	bl	8003410 <__sinit>
 8006574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	d422      	bmi.n	80065c2 <__swsetup_r+0x62>
 800657c:	06da      	lsls	r2, r3, #27
 800657e:	d407      	bmi.n	8006590 <__swsetup_r+0x30>
 8006580:	2209      	movs	r2, #9
 8006582:	602a      	str	r2, [r5, #0]
 8006584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e033      	b.n	80065f8 <__swsetup_r+0x98>
 8006590:	0758      	lsls	r0, r3, #29
 8006592:	d512      	bpl.n	80065ba <__swsetup_r+0x5a>
 8006594:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006596:	b141      	cbz	r1, 80065aa <__swsetup_r+0x4a>
 8006598:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800659c:	4299      	cmp	r1, r3
 800659e:	d002      	beq.n	80065a6 <__swsetup_r+0x46>
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7fd fe15 	bl	80041d0 <_free_r>
 80065a6:	2300      	movs	r3, #0
 80065a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80065aa:	89a3      	ldrh	r3, [r4, #12]
 80065ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f043 0308 	orr.w	r3, r3, #8
 80065c0:	81a3      	strh	r3, [r4, #12]
 80065c2:	6923      	ldr	r3, [r4, #16]
 80065c4:	b94b      	cbnz	r3, 80065da <__swsetup_r+0x7a>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d0:	d003      	beq.n	80065da <__swsetup_r+0x7a>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f000 f83e 	bl	8006656 <__smakebuf_r>
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	f013 0201 	ands.w	r2, r3, #1
 80065e2:	d00a      	beq.n	80065fa <__swsetup_r+0x9a>
 80065e4:	2200      	movs	r2, #0
 80065e6:	60a2      	str	r2, [r4, #8]
 80065e8:	6962      	ldr	r2, [r4, #20]
 80065ea:	4252      	negs	r2, r2
 80065ec:	61a2      	str	r2, [r4, #24]
 80065ee:	6922      	ldr	r2, [r4, #16]
 80065f0:	b942      	cbnz	r2, 8006604 <__swsetup_r+0xa4>
 80065f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065f6:	d1c5      	bne.n	8006584 <__swsetup_r+0x24>
 80065f8:	bd38      	pop	{r3, r4, r5, pc}
 80065fa:	0799      	lsls	r1, r3, #30
 80065fc:	bf58      	it	pl
 80065fe:	6962      	ldrpl	r2, [r4, #20]
 8006600:	60a2      	str	r2, [r4, #8]
 8006602:	e7f4      	b.n	80065ee <__swsetup_r+0x8e>
 8006604:	2000      	movs	r0, #0
 8006606:	e7f7      	b.n	80065f8 <__swsetup_r+0x98>
 8006608:	20000184 	.word	0x20000184

0800660c <__swhatbuf_r>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	460c      	mov	r4, r1
 8006610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006614:	4615      	mov	r5, r2
 8006616:	2900      	cmp	r1, #0
 8006618:	461e      	mov	r6, r3
 800661a:	b096      	sub	sp, #88	@ 0x58
 800661c:	da0c      	bge.n	8006638 <__swhatbuf_r+0x2c>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	2100      	movs	r1, #0
 8006622:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006626:	bf14      	ite	ne
 8006628:	2340      	movne	r3, #64	@ 0x40
 800662a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800662e:	2000      	movs	r0, #0
 8006630:	6031      	str	r1, [r6, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	b016      	add	sp, #88	@ 0x58
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	466a      	mov	r2, sp
 800663a:	f000 f849 	bl	80066d0 <_fstat_r>
 800663e:	2800      	cmp	r0, #0
 8006640:	dbed      	blt.n	800661e <__swhatbuf_r+0x12>
 8006642:	9901      	ldr	r1, [sp, #4]
 8006644:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006648:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800664c:	4259      	negs	r1, r3
 800664e:	4159      	adcs	r1, r3
 8006650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006654:	e7eb      	b.n	800662e <__swhatbuf_r+0x22>

08006656 <__smakebuf_r>:
 8006656:	898b      	ldrh	r3, [r1, #12]
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	079d      	lsls	r5, r3, #30
 800665c:	4606      	mov	r6, r0
 800665e:	460c      	mov	r4, r1
 8006660:	d507      	bpl.n	8006672 <__smakebuf_r+0x1c>
 8006662:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	2301      	movs	r3, #1
 800666c:	6163      	str	r3, [r4, #20]
 800666e:	b003      	add	sp, #12
 8006670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006672:	466a      	mov	r2, sp
 8006674:	ab01      	add	r3, sp, #4
 8006676:	f7ff ffc9 	bl	800660c <__swhatbuf_r>
 800667a:	9f00      	ldr	r7, [sp, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	4639      	mov	r1, r7
 8006680:	4630      	mov	r0, r6
 8006682:	f7fe fb13 	bl	8004cac <_malloc_r>
 8006686:	b948      	cbnz	r0, 800669c <__smakebuf_r+0x46>
 8006688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668c:	059a      	lsls	r2, r3, #22
 800668e:	d4ee      	bmi.n	800666e <__smakebuf_r+0x18>
 8006690:	f023 0303 	bic.w	r3, r3, #3
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	e7e2      	b.n	8006662 <__smakebuf_r+0xc>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	6020      	str	r0, [r4, #0]
 80066ac:	b15b      	cbz	r3, 80066c6 <__smakebuf_r+0x70>
 80066ae:	4630      	mov	r0, r6
 80066b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b4:	f000 f81e 	bl	80066f4 <_isatty_r>
 80066b8:	b128      	cbz	r0, 80066c6 <__smakebuf_r+0x70>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	431d      	orrs	r5, r3
 80066ca:	81a5      	strh	r5, [r4, #12]
 80066cc:	e7cf      	b.n	800666e <__smakebuf_r+0x18>
	...

080066d0 <_fstat_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	2300      	movs	r3, #0
 80066d4:	4d06      	ldr	r5, [pc, #24]	@ (80066f0 <_fstat_r+0x20>)
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f7fa ffc1 	bl	8001664 <_fstat>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d102      	bne.n	80066ec <_fstat_r+0x1c>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	b103      	cbz	r3, 80066ec <_fstat_r+0x1c>
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	20000428 	.word	0x20000428

080066f4 <_isatty_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	2300      	movs	r3, #0
 80066f8:	4d05      	ldr	r5, [pc, #20]	@ (8006710 <_isatty_r+0x1c>)
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	f7fa ffbf 	bl	8001682 <_isatty>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_isatty_r+0x1a>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_isatty_r+0x1a>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000428 	.word	0x20000428

08006714 <_raise_r>:
 8006714:	291f      	cmp	r1, #31
 8006716:	b538      	push	{r3, r4, r5, lr}
 8006718:	4605      	mov	r5, r0
 800671a:	460c      	mov	r4, r1
 800671c:	d904      	bls.n	8006728 <_raise_r+0x14>
 800671e:	2316      	movs	r3, #22
 8006720:	6003      	str	r3, [r0, #0]
 8006722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800672a:	b112      	cbz	r2, 8006732 <_raise_r+0x1e>
 800672c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006730:	b94b      	cbnz	r3, 8006746 <_raise_r+0x32>
 8006732:	4628      	mov	r0, r5
 8006734:	f000 f830 	bl	8006798 <_getpid_r>
 8006738:	4622      	mov	r2, r4
 800673a:	4601      	mov	r1, r0
 800673c:	4628      	mov	r0, r5
 800673e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006742:	f000 b817 	b.w	8006774 <_kill_r>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d00a      	beq.n	8006760 <_raise_r+0x4c>
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	d103      	bne.n	8006756 <_raise_r+0x42>
 800674e:	2316      	movs	r3, #22
 8006750:	6003      	str	r3, [r0, #0]
 8006752:	2001      	movs	r0, #1
 8006754:	e7e7      	b.n	8006726 <_raise_r+0x12>
 8006756:	2100      	movs	r1, #0
 8006758:	4620      	mov	r0, r4
 800675a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800675e:	4798      	blx	r3
 8006760:	2000      	movs	r0, #0
 8006762:	e7e0      	b.n	8006726 <_raise_r+0x12>

08006764 <raise>:
 8006764:	4b02      	ldr	r3, [pc, #8]	@ (8006770 <raise+0xc>)
 8006766:	4601      	mov	r1, r0
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	f7ff bfd3 	b.w	8006714 <_raise_r>
 800676e:	bf00      	nop
 8006770:	20000184 	.word	0x20000184

08006774 <_kill_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	2300      	movs	r3, #0
 8006778:	4d06      	ldr	r5, [pc, #24]	@ (8006794 <_kill_r+0x20>)
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f7fa ff10 	bl	80015a6 <_kill>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d102      	bne.n	8006790 <_kill_r+0x1c>
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	b103      	cbz	r3, 8006790 <_kill_r+0x1c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	20000428 	.word	0x20000428

08006798 <_getpid_r>:
 8006798:	f7fa befe 	b.w	8001598 <_getpid>

0800679c <_init>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr

080067a8 <_fini>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr
